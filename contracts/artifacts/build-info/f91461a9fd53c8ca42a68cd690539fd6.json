{
	"id": "f91461a9fd53c8ca42a68cd690539fd6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721A.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721A {\n    using Address for address;\n    using Strings for uint256;\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n    string public baseExtension = \".json\";\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr) if (curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), baseExtension)) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex < end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex < end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            do {\n                emit Transfer(address(0), to, updatedIndex++);\n            } while (updatedIndex < end);\n\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"contracts/IERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v3.3.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A is IERC721, IERC721Metadata {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     * \n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220184f122e4a4528fb55b34dbfc9e58137b732102445c23a91edff28a093d58e2e64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220184f122e4a4528fb55b34dbfc9e58137b732102445c23a91edff28a093d58e2e64736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0x4F SLT 0x2E 0x4A GASLIMIT 0x28 0xFB SSTORE 0xB3 0x4D 0xBF 0xC9 0xE5 DUP2 CALLDATACOPY 0xB7 ORIGIN LT 0x24 GASLIMIT 0xC2 GASPRICE SWAP2 0xED SELFDESTRUCT 0x28 LOG0 SWAP4 0xD5 DUP15 0x2E PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220184f122e4a4528fb55b34dbfc9e58137b732102445c23a91edff28a093d58e2e64736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0x4F SLT 0x2E 0x4A GASLIMIT 0x28 0xFB SSTORE 0xB3 0x4D 0xBF 0xC9 0xE5 DUP2 CALLDATACOPY 0xB7 ORIGIN LT 0x24 GASLIMIT 0xC2 GASPRICE SWAP2 0xED SELFDESTRUCT 0x28 LOG0 SWAP4 0xD5 DUP15 0x2E PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220184f122e4a4528fb55b34dbfc9e58137b732102445c23a91edff28a093d58e2e64736f6c634300080a0033",
									".code": [
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":161:2396  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":161:2396  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220091dc2f21bc54a4b26b2fab1b11aabf41194fa984ae48a00aed1a9cddfcd4d0464736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220091dc2f21bc54a4b26b2fab1b11aabf41194fa984ae48a00aed1a9cddfcd4d0464736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SAR 0xC2 CALLCODE SHL 0xC5 0x4A 0x4B 0x26 0xB2 STATICCALL 0xB1 0xB1 BYTE 0xAB DELEGATECALL GT SWAP5 STATICCALL SWAP9 0x4A 0xE4 DUP11 STOP 0xAE 0xD1 0xA9 0xCD 0xDF 0xCD 0x4D DIV PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "161:2235:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220091dc2f21bc54a4b26b2fab1b11aabf41194fa984ae48a00aed1a9cddfcd4d0464736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SAR 0xC2 CALLCODE SHL 0xC5 0x4A 0x4B 0x26 0xB2 STATICCALL 0xB1 0xB1 BYTE 0xAB DELEGATECALL GT SWAP5 STATICCALL SWAP9 0x4A 0xE4 DUP11 STOP 0xAE 0xD1 0xA9 0xCD 0xDF 0xCD 0x4D DIV PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "161:2235:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 161,
									"end": 2396,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220091dc2f21bc54a4b26b2fab1b11aabf41194fa984ae48a00aed1a9cddfcd4d0464736f6c634300080a0033",
									".code": [
										{
											"begin": 161,
											"end": 2396,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 161,
											"end": 2396,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ERC721A.sol": {
				"ERC721A": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "baseExtension",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC721A.sol\":891:21381  contract ERC721A is Context, ERC165, IERC721A {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ERC721A.sol\":1259:1296  string public baseExtension = \".json\" */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  0x2e6a736f6e000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  0x04\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_1\n  swap3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"contracts/ERC721A.sol\":1874:2028  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_4\n  swap2\n  swap1\n  tag_5\n  jump\t// in\ntag_4:\n    /* \"contracts/ERC721A.sol\":1948:1953  name_ */\n  dup2\n    /* \"contracts/ERC721A.sol\":1940:1945  _name */\n  0x02\n    /* \"contracts/ERC721A.sol\":1940:1953  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_8:\n  pop\n    /* \"contracts/ERC721A.sol\":1973:1980  symbol_ */\n  dup1\n    /* \"contracts/ERC721A.sol\":1963:1970  _symbol */\n  0x03\n    /* \"contracts/ERC721A.sol\":1963:1980  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_9\n  swap3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_9:\n  pop\n    /* \"contracts/ERC721A.sol\":2006:2021  _startTokenId() */\n  tag_10\n    /* \"contracts/ERC721A.sol\":2006:2019  _startTokenId */\n  shl(0x20, tag_11)\n    /* \"contracts/ERC721A.sol\":2006:2021  _startTokenId() */\n  0x20\n  shr\n  jump\t// in\ntag_10:\n    /* \"contracts/ERC721A.sol\":1990:2003  _currentIndex */\n  0x00\n    /* \"contracts/ERC721A.sol\":1990:2021  _currentIndex = _startTokenId() */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC721A.sol\":1874:2028  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"contracts/ERC721A.sol\":891:21381  contract ERC721A is Context, ERC165, IERC721A {... */\n  jump(tag_12)\n    /* \"contracts/ERC721A.sol\":2120:2210  function _startTokenId() internal view virtual returns (uint256) {... */\ntag_11:\n    /* \"contracts/ERC721A.sol\":2176:2183  uint256 */\n  0x00\n    /* \"contracts/ERC721A.sol\":2120:2210  function _startTokenId() internal view virtual returns (uint256) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/ERC721A.sol\":891:21381  contract ERC721A is Context, ERC165, IERC721A {... */\ntag_2:\n  dup3\n  dup1\n  sload\n  tag_14\n  swap1\n  tag_15\n  jump\t// in\ntag_14:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_17\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_17:\n  dup3\n  0x1f\n  lt\n  tag_18\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_18:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_19:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_20\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_19)\ntag_20:\ntag_16:\n  pop\n  swap1\n  pop\n  tag_21\n  swap2\n  swap1\n  tag_22\n  jump\t// in\ntag_21:\n  pop\n  swap1\n  jump\t// out\ntag_22:\ntag_23:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_24\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_23)\ntag_24:\n  pop\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:82   */\ntag_25:\n    /* \"#utility.yul\":40:46   */\n  0x00\n    /* \"#utility.yul\":73:75   */\n  0x40\n    /* \"#utility.yul\":67:76   */\n  mload\n    /* \"#utility.yul\":57:76   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:82   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_26:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":211:328   */\ntag_27:\n    /* \"#utility.yul\":320:321   */\n  0x00\n    /* \"#utility.yul\":317:318   */\n  dup1\n    /* \"#utility.yul\":310:322   */\n  revert\n    /* \"#utility.yul\":334:451   */\ntag_28:\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":440:441   */\n  dup1\n    /* \"#utility.yul\":433:445   */\n  revert\n    /* \"#utility.yul\":457:574   */\ntag_29:\n    /* \"#utility.yul\":566:567   */\n  0x00\n    /* \"#utility.yul\":563:564   */\n  dup1\n    /* \"#utility.yul\":556:568   */\n  revert\n    /* \"#utility.yul\":580:682   */\ntag_30:\n    /* \"#utility.yul\":621:627   */\n  0x00\n    /* \"#utility.yul\":672:674   */\n  0x1f\n    /* \"#utility.yul\":668:675   */\n  not\n    /* \"#utility.yul\":663:665   */\n  0x1f\n    /* \"#utility.yul\":656:661   */\n  dup4\n    /* \"#utility.yul\":652:666   */\n  add\n    /* \"#utility.yul\":648:676   */\n  and\n    /* \"#utility.yul\":638:676   */\n  swap1\n  pop\n    /* \"#utility.yul\":580:682   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":688:868   */\ntag_31:\n    /* \"#utility.yul\":736:813   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":733:734   */\n  0x00\n    /* \"#utility.yul\":726:814   */\n  mstore\n    /* \"#utility.yul\":833:837   */\n  0x41\n    /* \"#utility.yul\":830:831   */\n  0x04\n    /* \"#utility.yul\":823:838   */\n  mstore\n    /* \"#utility.yul\":857:861   */\n  0x24\n    /* \"#utility.yul\":854:855   */\n  0x00\n    /* \"#utility.yul\":847:862   */\n  revert\n    /* \"#utility.yul\":874:1155   */\ntag_32:\n    /* \"#utility.yul\":957:984   */\n  tag_48\n    /* \"#utility.yul\":979:983   */\n  dup3\n    /* \"#utility.yul\":957:984   */\n  tag_30\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":949:955   */\n  dup2\n    /* \"#utility.yul\":945:985   */\n  add\n    /* \"#utility.yul\":1087:1093   */\n  dup2\n    /* \"#utility.yul\":1075:1085   */\n  dup2\n    /* \"#utility.yul\":1072:1094   */\n  lt\n    /* \"#utility.yul\":1051:1069   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1039:1049   */\n  dup3\n    /* \"#utility.yul\":1036:1070   */\n  gt\n    /* \"#utility.yul\":1033:1095   */\n  or\n    /* \"#utility.yul\":1030:1118   */\n  iszero\n  tag_49\n  jumpi\n    /* \"#utility.yul\":1098:1116   */\n  tag_50\n  tag_31\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":1030:1118   */\ntag_49:\n    /* \"#utility.yul\":1138:1148   */\n  dup1\n    /* \"#utility.yul\":1134:1136   */\n  0x40\n    /* \"#utility.yul\":1127:1149   */\n  mstore\n    /* \"#utility.yul\":917:1155   */\n  pop\n    /* \"#utility.yul\":874:1155   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1161:1290   */\ntag_33:\n    /* \"#utility.yul\":1195:1201   */\n  0x00\n    /* \"#utility.yul\":1222:1242   */\n  tag_52\n  tag_25\n  jump\t// in\ntag_52:\n    /* \"#utility.yul\":1212:1242   */\n  swap1\n  pop\n    /* \"#utility.yul\":1251:1284   */\n  tag_53\n    /* \"#utility.yul\":1279:1283   */\n  dup3\n    /* \"#utility.yul\":1271:1277   */\n  dup3\n    /* \"#utility.yul\":1251:1284   */\n  tag_32\n  jump\t// in\ntag_53:\n    /* \"#utility.yul\":1161:1290   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1296:1604   */\ntag_34:\n    /* \"#utility.yul\":1358:1362   */\n  0x00\n    /* \"#utility.yul\":1448:1466   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1440:1446   */\n  dup3\n    /* \"#utility.yul\":1437:1467   */\n  gt\n    /* \"#utility.yul\":1434:1490   */\n  iszero\n  tag_55\n  jumpi\n    /* \"#utility.yul\":1470:1488   */\n  tag_56\n  tag_31\n  jump\t// in\ntag_56:\n    /* \"#utility.yul\":1434:1490   */\ntag_55:\n    /* \"#utility.yul\":1508:1537   */\n  tag_57\n    /* \"#utility.yul\":1530:1536   */\n  dup3\n    /* \"#utility.yul\":1508:1537   */\n  tag_30\n  jump\t// in\ntag_57:\n    /* \"#utility.yul\":1500:1537   */\n  swap1\n  pop\n    /* \"#utility.yul\":1592:1596   */\n  0x20\n    /* \"#utility.yul\":1586:1590   */\n  dup2\n    /* \"#utility.yul\":1582:1597   */\n  add\n    /* \"#utility.yul\":1574:1597   */\n  swap1\n  pop\n    /* \"#utility.yul\":1296:1604   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1610:1917   */\ntag_35:\n    /* \"#utility.yul\":1678:1679   */\n  0x00\n    /* \"#utility.yul\":1688:1801   */\ntag_59:\n    /* \"#utility.yul\":1702:1708   */\n  dup4\n    /* \"#utility.yul\":1699:1700   */\n  dup2\n    /* \"#utility.yul\":1696:1709   */\n  lt\n    /* \"#utility.yul\":1688:1801   */\n  iszero\n  tag_61\n  jumpi\n    /* \"#utility.yul\":1787:1788   */\n  dup1\n    /* \"#utility.yul\":1782:1785   */\n  dup3\n    /* \"#utility.yul\":1778:1789   */\n  add\n    /* \"#utility.yul\":1772:1790   */\n  mload\n    /* \"#utility.yul\":1768:1769   */\n  dup2\n    /* \"#utility.yul\":1763:1766   */\n  dup5\n    /* \"#utility.yul\":1759:1770   */\n  add\n    /* \"#utility.yul\":1752:1791   */\n  mstore\n    /* \"#utility.yul\":1724:1726   */\n  0x20\n    /* \"#utility.yul\":1721:1722   */\n  dup2\n    /* \"#utility.yul\":1717:1727   */\n  add\n    /* \"#utility.yul\":1712:1727   */\n  swap1\n  pop\n    /* \"#utility.yul\":1688:1801   */\n  jump(tag_59)\ntag_61:\n    /* \"#utility.yul\":1819:1825   */\n  dup4\n    /* \"#utility.yul\":1816:1817   */\n  dup2\n    /* \"#utility.yul\":1813:1826   */\n  gt\n    /* \"#utility.yul\":1810:1911   */\n  iszero\n  tag_62\n  jumpi\n    /* \"#utility.yul\":1899:1900   */\n  0x00\n    /* \"#utility.yul\":1890:1896   */\n  dup5\n    /* \"#utility.yul\":1885:1888   */\n  dup5\n    /* \"#utility.yul\":1881:1897   */\n  add\n    /* \"#utility.yul\":1874:1901   */\n  mstore\n    /* \"#utility.yul\":1810:1911   */\ntag_62:\n    /* \"#utility.yul\":1659:1917   */\n  pop\n    /* \"#utility.yul\":1610:1917   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1923:2344   */\ntag_36:\n    /* \"#utility.yul\":2012:2017   */\n  0x00\n    /* \"#utility.yul\":2037:2103   */\n  tag_64\n    /* \"#utility.yul\":2053:2102   */\n  tag_65\n    /* \"#utility.yul\":2095:2101   */\n  dup5\n    /* \"#utility.yul\":2053:2102   */\n  tag_34\n  jump\t// in\ntag_65:\n    /* \"#utility.yul\":2037:2103   */\n  tag_33\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":2028:2103   */\n  swap1\n  pop\n    /* \"#utility.yul\":2126:2132   */\n  dup3\n    /* \"#utility.yul\":2119:2124   */\n  dup2\n    /* \"#utility.yul\":2112:2133   */\n  mstore\n    /* \"#utility.yul\":2164:2168   */\n  0x20\n    /* \"#utility.yul\":2157:2162   */\n  dup2\n    /* \"#utility.yul\":2153:2169   */\n  add\n    /* \"#utility.yul\":2202:2205   */\n  dup5\n    /* \"#utility.yul\":2193:2199   */\n  dup5\n    /* \"#utility.yul\":2188:2191   */\n  dup5\n    /* \"#utility.yul\":2184:2200   */\n  add\n    /* \"#utility.yul\":2181:2206   */\n  gt\n    /* \"#utility.yul\":2178:2290   */\n  iszero\n  tag_66\n  jumpi\n    /* \"#utility.yul\":2209:2288   */\n  tag_67\n  tag_29\n  jump\t// in\ntag_67:\n    /* \"#utility.yul\":2178:2290   */\ntag_66:\n    /* \"#utility.yul\":2299:2338   */\n  tag_68\n    /* \"#utility.yul\":2331:2337   */\n  dup5\n    /* \"#utility.yul\":2326:2329   */\n  dup3\n    /* \"#utility.yul\":2321:2324   */\n  dup6\n    /* \"#utility.yul\":2299:2338   */\n  tag_35\n  jump\t// in\ntag_68:\n    /* \"#utility.yul\":2018:2344   */\n  pop\n    /* \"#utility.yul\":1923:2344   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2719   */\ntag_37:\n    /* \"#utility.yul\":2431:2436   */\n  0x00\n    /* \"#utility.yul\":2480:2483   */\n  dup3\n    /* \"#utility.yul\":2473:2477   */\n  0x1f\n    /* \"#utility.yul\":2465:2471   */\n  dup4\n    /* \"#utility.yul\":2461:2478   */\n  add\n    /* \"#utility.yul\":2457:2484   */\n  slt\n    /* \"#utility.yul\":2447:2569   */\n  tag_70\n  jumpi\n    /* \"#utility.yul\":2488:2567   */\n  tag_71\n  tag_28\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":2447:2569   */\ntag_70:\n    /* \"#utility.yul\":2598:2604   */\n  dup2\n    /* \"#utility.yul\":2592:2605   */\n  mload\n    /* \"#utility.yul\":2623:2713   */\n  tag_72\n    /* \"#utility.yul\":2709:2712   */\n  dup5\n    /* \"#utility.yul\":2701:2707   */\n  dup3\n    /* \"#utility.yul\":2694:2698   */\n  0x20\n    /* \"#utility.yul\":2686:2692   */\n  dup7\n    /* \"#utility.yul\":2682:2699   */\n  add\n    /* \"#utility.yul\":2623:2713   */\n  tag_36\n  jump\t// in\ntag_72:\n    /* \"#utility.yul\":2614:2713   */\n  swap2\n  pop\n    /* \"#utility.yul\":2437:2719   */\n  pop\n    /* \"#utility.yul\":2364:2719   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2725:3578   */\ntag_5:\n    /* \"#utility.yul\":2824:2830   */\n  0x00\n    /* \"#utility.yul\":2832:2838   */\n  dup1\n    /* \"#utility.yul\":2881:2883   */\n  0x40\n    /* \"#utility.yul\":2869:2878   */\n  dup4\n    /* \"#utility.yul\":2860:2867   */\n  dup6\n    /* \"#utility.yul\":2856:2879   */\n  sub\n    /* \"#utility.yul\":2852:2884   */\n  slt\n    /* \"#utility.yul\":2849:2968   */\n  iszero\n  tag_74\n  jumpi\n    /* \"#utility.yul\":2887:2966   */\n  tag_75\n  tag_26\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":2849:2968   */\ntag_74:\n    /* \"#utility.yul\":3028:3029   */\n  0x00\n    /* \"#utility.yul\":3017:3026   */\n  dup4\n    /* \"#utility.yul\":3013:3030   */\n  add\n    /* \"#utility.yul\":3007:3031   */\n  mload\n    /* \"#utility.yul\":3058:3076   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3050:3056   */\n  dup2\n    /* \"#utility.yul\":3047:3077   */\n  gt\n    /* \"#utility.yul\":3044:3161   */\n  iszero\n  tag_76\n  jumpi\n    /* \"#utility.yul\":3080:3159   */\n  tag_77\n  tag_27\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":3044:3161   */\ntag_76:\n    /* \"#utility.yul\":3185:3259   */\n  tag_78\n    /* \"#utility.yul\":3251:3258   */\n  dup6\n    /* \"#utility.yul\":3242:3248   */\n  dup3\n    /* \"#utility.yul\":3231:3240   */\n  dup7\n    /* \"#utility.yul\":3227:3249   */\n  add\n    /* \"#utility.yul\":3185:3259   */\n  tag_37\n  jump\t// in\ntag_78:\n    /* \"#utility.yul\":3175:3259   */\n  swap3\n  pop\n    /* \"#utility.yul\":2978:3269   */\n  pop\n    /* \"#utility.yul\":3329:3331   */\n  0x20\n    /* \"#utility.yul\":3318:3327   */\n  dup4\n    /* \"#utility.yul\":3314:3332   */\n  add\n    /* \"#utility.yul\":3308:3333   */\n  mload\n    /* \"#utility.yul\":3360:3378   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3352:3358   */\n  dup2\n    /* \"#utility.yul\":3349:3379   */\n  gt\n    /* \"#utility.yul\":3346:3463   */\n  iszero\n  tag_79\n  jumpi\n    /* \"#utility.yul\":3382:3461   */\n  tag_80\n  tag_27\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":3346:3463   */\ntag_79:\n    /* \"#utility.yul\":3487:3561   */\n  tag_81\n    /* \"#utility.yul\":3553:3560   */\n  dup6\n    /* \"#utility.yul\":3544:3550   */\n  dup3\n    /* \"#utility.yul\":3533:3542   */\n  dup7\n    /* \"#utility.yul\":3529:3551   */\n  add\n    /* \"#utility.yul\":3487:3561   */\n  tag_37\n  jump\t// in\ntag_81:\n    /* \"#utility.yul\":3477:3561   */\n  swap2\n  pop\n    /* \"#utility.yul\":3279:3571   */\n  pop\n    /* \"#utility.yul\":2725:3578   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3584:3764   */\ntag_38:\n    /* \"#utility.yul\":3632:3709   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3629:3630   */\n  0x00\n    /* \"#utility.yul\":3622:3710   */\n  mstore\n    /* \"#utility.yul\":3729:3733   */\n  0x22\n    /* \"#utility.yul\":3726:3727   */\n  0x04\n    /* \"#utility.yul\":3719:3734   */\n  mstore\n    /* \"#utility.yul\":3753:3757   */\n  0x24\n    /* \"#utility.yul\":3750:3751   */\n  0x00\n    /* \"#utility.yul\":3743:3758   */\n  revert\n    /* \"#utility.yul\":3770:4090   */\ntag_15:\n    /* \"#utility.yul\":3814:3820   */\n  0x00\n    /* \"#utility.yul\":3851:3852   */\n  0x02\n    /* \"#utility.yul\":3845:3849   */\n  dup3\n    /* \"#utility.yul\":3841:3853   */\n  div\n    /* \"#utility.yul\":3831:3853   */\n  swap1\n  pop\n    /* \"#utility.yul\":3898:3899   */\n  0x01\n    /* \"#utility.yul\":3892:3896   */\n  dup3\n    /* \"#utility.yul\":3888:3900   */\n  and\n    /* \"#utility.yul\":3919:3937   */\n  dup1\n    /* \"#utility.yul\":3909:3990   */\n  tag_84\n  jumpi\n    /* \"#utility.yul\":3975:3979   */\n  0x7f\n    /* \"#utility.yul\":3967:3973   */\n  dup3\n    /* \"#utility.yul\":3963:3980   */\n  and\n    /* \"#utility.yul\":3953:3980   */\n  swap2\n  pop\n    /* \"#utility.yul\":3909:3990   */\ntag_84:\n    /* \"#utility.yul\":4037:4039   */\n  0x20\n    /* \"#utility.yul\":4029:4035   */\n  dup3\n    /* \"#utility.yul\":4026:4040   */\n  lt\n    /* \"#utility.yul\":4006:4024   */\n  dup2\n    /* \"#utility.yul\":4003:4041   */\n  eq\n    /* \"#utility.yul\":4000:4084   */\n  iszero\n  tag_85\n  jumpi\n    /* \"#utility.yul\":4056:4074   */\n  tag_86\n  tag_38\n  jump\t// in\ntag_86:\n    /* \"#utility.yul\":4000:4084   */\ntag_85:\n    /* \"#utility.yul\":3821:4090   */\n  pop\n    /* \"#utility.yul\":3770:4090   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/ERC721A.sol\":891:21381  contract ERC721A is Context, ERC165, IERC721A {... */\ntag_12:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC721A.sol\":891:21381  contract ERC721A is Context, ERC165, IERC721A {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xb88d4fde\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc6682862\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_18:\n      dup1\n      0x095ea7b3\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ERC721A.sol\":3077:3377  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":6107:6205  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":7579:7779  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":7155:7518  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"contracts/ERC721A.sol\":2339:2645  function totalSupply() public view override returns (uint256) {... */\n    tag_7:\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":8418:8582  function transferFrom(... */\n    tag_8:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      stop\n        /* \"contracts/ERC721A.sol\":8648:8827  function safeTransferFrom(... */\n    tag_9:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n    tag_49:\n      stop\n        /* \"contracts/ERC721A.sol\":5922:6045  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_10:\n      tag_52\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      tag_55\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":3436:3639  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_11:\n      tag_56\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_57\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      tag_60\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":6269:6371  function symbol() public view virtual override returns (string memory) {... */\n    tag_12:\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      tag_63\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":7846:8128  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_13:\n      tag_64\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_65\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n    tag_64:\n      stop\n        /* \"contracts/ERC721A.sol\":8893:9253  function safeTransferFrom(... */\n    tag_14:\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      stop\n        /* \"contracts/ERC721A.sol\":1259:1296  string public baseExtension = \".json\" */\n    tag_15:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      tag_74\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":6437:6765  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_16:\n      tag_75\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_76\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_76:\n      tag_77\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      tag_78\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":8194:8356  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_17:\n      tag_79\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_80\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n      tag_82\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC721A.sol\":3077:3377  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_24:\n        /* \"contracts/ERC721A.sol\":3179:3183  bool */\n      0x00\n        /* \"contracts/ERC721A.sol\":3229:3254  type(IERC721).interfaceId */\n      0x80ac58cd00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/ERC721A.sol\":3214:3254  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC721A.sol\":3214:3225  interfaceId */\n      dup3\n        /* \"contracts/ERC721A.sol\":3214:3254  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":3214:3318  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_85\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":3285:3318  type(IERC721Metadata).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/ERC721A.sol\":3270:3318  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC721A.sol\":3270:3281  interfaceId */\n      dup3\n        /* \"contracts/ERC721A.sol\":3270:3318  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":3214:3318  interfaceId == type(IERC721).interfaceId ||... */\n    tag_85:\n        /* \"contracts/ERC721A.sol\":3214:3370  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_86\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":3334:3370  super.supportsInterface(interfaceId) */\n      tag_87\n        /* \"contracts/ERC721A.sol\":3358:3369  interfaceId */\n      dup3\n        /* \"contracts/ERC721A.sol\":3334:3357  super.supportsInterface */\n      tag_88\n        /* \"contracts/ERC721A.sol\":3334:3370  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_87:\n        /* \"contracts/ERC721A.sol\":3214:3370  interfaceId == type(IERC721).interfaceId ||... */\n    tag_86:\n        /* \"contracts/ERC721A.sol\":3195:3370  return... */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":3077:3377  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":6107:6205  function name() public view virtual override returns (string memory) {... */\n    tag_28:\n        /* \"contracts/ERC721A.sol\":6161:6174  string memory */\n      0x60\n        /* \"contracts/ERC721A.sol\":6193:6198  _name */\n      0x02\n        /* \"contracts/ERC721A.sol\":6186:6198  return _name */\n      dup1\n      sload\n      tag_90\n      swap1\n      tag_91\n      jump\t// in\n    tag_90:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_91\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":6107:6205  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":7579:7779  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_34:\n        /* \"contracts/ERC721A.sol\":7647:7654  address */\n      0x00\n        /* \"contracts/ERC721A.sol\":7671:7687  _exists(tokenId) */\n      tag_97\n        /* \"contracts/ERC721A.sol\":7679:7686  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":7671:7678  _exists */\n      tag_98\n        /* \"contracts/ERC721A.sol\":7671:7687  _exists(tokenId) */\n      jump\t// in\n    tag_97:\n        /* \"contracts/ERC721A.sol\":7666:7730  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_99\n      jumpi\n        /* \"contracts/ERC721A.sol\":7696:7730  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      0xcf4700e400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":7666:7730  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_99:\n        /* \"contracts/ERC721A.sol\":7748:7763  _tokenApprovals */\n      0x07\n        /* \"contracts/ERC721A.sol\":7748:7772  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contracts/ERC721A.sol\":7764:7771  tokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":7748:7772  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":7741:7772  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":7579:7779  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":7155:7518  function approve(address to, uint256 tokenId) public override {... */\n    tag_40:\n        /* \"contracts/ERC721A.sol\":7227:7240  address owner */\n      0x00\n        /* \"contracts/ERC721A.sol\":7243:7267  ERC721A.ownerOf(tokenId) */\n      tag_101\n        /* \"contracts/ERC721A.sol\":7259:7266  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":7243:7258  ERC721A.ownerOf */\n      tag_54\n        /* \"contracts/ERC721A.sol\":7243:7267  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_101:\n        /* \"contracts/ERC721A.sol\":7227:7267  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":7287:7292  owner */\n      dup1\n        /* \"contracts/ERC721A.sol\":7281:7292  to == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":7281:7283  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":7281:7292  to == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":7277:7325  if (to == owner) revert ApprovalToCurrentOwner() */\n      iszero\n      tag_102\n      jumpi\n        /* \"contracts/ERC721A.sol\":7301:7325  ApprovalToCurrentOwner() */\n      mload(0x40)\n      0x943f7b8c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":7277:7325  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_102:\n        /* \"contracts/ERC721A.sol\":7356:7361  owner */\n      dup1\n        /* \"contracts/ERC721A.sol\":7340:7361  _msgSender() != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":7340:7352  _msgSender() */\n      tag_103\n        /* \"contracts/ERC721A.sol\":7340:7350  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":7340:7352  _msgSender() */\n      jump\t// in\n    tag_103:\n        /* \"contracts/ERC721A.sol\":7340:7361  _msgSender() != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":7336:7473  if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {... */\n      tag_105\n      jumpi\n        /* \"contracts/ERC721A.sol\":7367:7404  isApprovedForAll(owner, _msgSender()) */\n      tag_106\n        /* \"contracts/ERC721A.sol\":7384:7389  owner */\n      dup2\n        /* \"contracts/ERC721A.sol\":7391:7403  _msgSender() */\n      tag_107\n        /* \"contracts/ERC721A.sol\":7391:7401  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":7391:7403  _msgSender() */\n      jump\t// in\n    tag_107:\n        /* \"contracts/ERC721A.sol\":7367:7383  isApprovedForAll */\n      tag_82\n        /* \"contracts/ERC721A.sol\":7367:7404  isApprovedForAll(owner, _msgSender()) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/ERC721A.sol\":7363:7473  if(!isApprovedForAll(owner, _msgSender())) {... */\n      tag_108\n      jumpi\n        /* \"contracts/ERC721A.sol\":7427:7462  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      0xcfb3b94200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":7363:7473  if(!isApprovedForAll(owner, _msgSender())) {... */\n    tag_108:\n        /* \"contracts/ERC721A.sol\":7336:7473  if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {... */\n    tag_105:\n        /* \"contracts/ERC721A.sol\":7483:7511  _approve(to, tokenId, owner) */\n      tag_109\n        /* \"contracts/ERC721A.sol\":7492:7494  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":7496:7503  tokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":7505:7510  owner */\n      dup4\n        /* \"contracts/ERC721A.sol\":7483:7491  _approve */\n      tag_110\n        /* \"contracts/ERC721A.sol\":7483:7511  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_109:\n        /* \"contracts/ERC721A.sol\":7217:7518  {... */\n      pop\n        /* \"contracts/ERC721A.sol\":7155:7518  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":2339:2645  function totalSupply() public view override returns (uint256) {... */\n    tag_42:\n        /* \"contracts/ERC721A.sol\":2392:2399  uint256 */\n      0x00\n        /* \"contracts/ERC721A.sol\":2613:2628  _startTokenId() */\n      tag_112\n        /* \"contracts/ERC721A.sol\":2613:2626  _startTokenId */\n      tag_113\n        /* \"contracts/ERC721A.sol\":2613:2628  _startTokenId() */\n      jump\t// in\n    tag_112:\n        /* \"contracts/ERC721A.sol\":2598:2610  _burnCounter */\n      sload(0x01)\n        /* \"contracts/ERC721A.sol\":2582:2595  _currentIndex */\n      sload(0x00)\n        /* \"contracts/ERC721A.sol\":2582:2610  _currentIndex - _burnCounter */\n      sub\n        /* \"contracts/ERC721A.sol\":2582:2628  _currentIndex - _burnCounter - _startTokenId() */\n      sub\n        /* \"contracts/ERC721A.sol\":2575:2628  return _currentIndex - _burnCounter - _startTokenId() */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":2339:2645  function totalSupply() public view override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":8418:8582  function transferFrom(... */\n    tag_48:\n        /* \"contracts/ERC721A.sol\":8547:8575  _transfer(from, to, tokenId) */\n      tag_115\n        /* \"contracts/ERC721A.sol\":8557:8561  from */\n      dup4\n        /* \"contracts/ERC721A.sol\":8563:8565  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":8567:8574  tokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":8547:8556  _transfer */\n      tag_116\n        /* \"contracts/ERC721A.sol\":8547:8575  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_115:\n        /* \"contracts/ERC721A.sol\":8418:8582  function transferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":8648:8827  function safeTransferFrom(... */\n    tag_51:\n        /* \"contracts/ERC721A.sol\":8781:8820  safeTransferFrom(from, to, tokenId, '') */\n      tag_118\n        /* \"contracts/ERC721A.sol\":8798:8802  from */\n      dup4\n        /* \"contracts/ERC721A.sol\":8804:8806  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":8808:8815  tokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":8781:8820  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"contracts/ERC721A.sol\":8781:8797  safeTransferFrom */\n      tag_71\n        /* \"contracts/ERC721A.sol\":8781:8820  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n    tag_118:\n        /* \"contracts/ERC721A.sol\":8648:8827  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":5922:6045  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_54:\n        /* \"contracts/ERC721A.sol\":5986:5993  address */\n      0x00\n        /* \"contracts/ERC721A.sol\":6012:6033  _ownershipOf(tokenId) */\n      tag_120\n        /* \"contracts/ERC721A.sol\":6025:6032  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":6012:6024  _ownershipOf */\n      tag_121\n        /* \"contracts/ERC721A.sol\":6012:6033  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_120:\n        /* \"contracts/ERC721A.sol\":6012:6038  _ownershipOf(tokenId).addr */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":6005:6038  return _ownershipOf(tokenId).addr */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":5922:6045  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":3436:3639  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_59:\n        /* \"contracts/ERC721A.sol\":3500:3507  uint256 */\n      0x00\n        /* \"contracts/ERC721A.sol\":3540:3541  0 */\n      dup1\n        /* \"contracts/ERC721A.sol\":3523:3542  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":3523:3528  owner */\n      dup3\n        /* \"contracts/ERC721A.sol\":3523:3542  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":3519:3579  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      iszero\n      tag_123\n      jumpi\n        /* \"contracts/ERC721A.sol\":3551:3579  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      0x8f4eb60400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":3519:3579  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_123:\n        /* \"contracts/ERC721A.sol\":3604:3616  _addressData */\n      0x06\n        /* \"contracts/ERC721A.sol\":3604:3623  _addressData[owner] */\n      0x00\n        /* \"contracts/ERC721A.sol\":3617:3622  owner */\n      dup4\n        /* \"contracts/ERC721A.sol\":3604:3623  _addressData[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":3604:3631  _addressData[owner].balance */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":3596:3632  uint256(_addressData[owner].balance) */\n      0xffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":3589:3632  return uint256(_addressData[owner].balance) */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":3436:3639  function balanceOf(address owner) public view override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":6269:6371  function symbol() public view virtual override returns (string memory) {... */\n    tag_62:\n        /* \"contracts/ERC721A.sol\":6325:6338  string memory */\n      0x60\n        /* \"contracts/ERC721A.sol\":6357:6364  _symbol */\n      0x03\n        /* \"contracts/ERC721A.sol\":6350:6364  return _symbol */\n      dup1\n      sload\n      tag_125\n      swap1\n      tag_91\n      jump\t// in\n    tag_125:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_126\n      swap1\n      tag_91\n      jump\t// in\n    tag_126:\n      dup1\n      iszero\n      tag_127\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_128\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_127)\n    tag_128:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_129:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_129\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_127:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":6269:6371  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":7846:8128  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_67:\n        /* \"contracts/ERC721A.sol\":7956:7968  _msgSender() */\n      tag_131\n        /* \"contracts/ERC721A.sol\":7956:7966  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":7956:7968  _msgSender() */\n      jump\t// in\n    tag_131:\n        /* \"contracts/ERC721A.sol\":7944:7968  operator == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":7944:7952  operator */\n      dup3\n        /* \"contracts/ERC721A.sol\":7944:7968  operator == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":7940:7994  if (operator == _msgSender()) revert ApproveToCaller() */\n      iszero\n      tag_132\n      jumpi\n        /* \"contracts/ERC721A.sol\":7977:7994  ApproveToCaller() */\n      mload(0x40)\n      0xb06307db00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":7940:7994  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_132:\n        /* \"contracts/ERC721A.sol\":8050:8058  approved */\n      dup1\n        /* \"contracts/ERC721A.sol\":8005:8023  _operatorApprovals */\n      0x08\n        /* \"contracts/ERC721A.sol\":8005:8037  _operatorApprovals[_msgSender()] */\n      0x00\n        /* \"contracts/ERC721A.sol\":8024:8036  _msgSender() */\n      tag_133\n        /* \"contracts/ERC721A.sol\":8024:8034  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":8024:8036  _msgSender() */\n      jump\t// in\n    tag_133:\n        /* \"contracts/ERC721A.sol\":8005:8037  _operatorApprovals[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":8005:8047  _operatorApprovals[_msgSender()][operator] */\n      0x00\n        /* \"contracts/ERC721A.sol\":8038:8046  operator */\n      dup5\n        /* \"contracts/ERC721A.sol\":8005:8047  _operatorApprovals[_msgSender()][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC721A.sol\":8005:8058  _operatorApprovals[_msgSender()][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":8102:8110  operator */\n      dup2\n        /* \"contracts/ERC721A.sol\":8073:8121  ApprovalForAll(_msgSender(), operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":8088:8100  _msgSender() */\n      tag_134\n        /* \"contracts/ERC721A.sol\":8088:8098  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":8088:8100  _msgSender() */\n      jump\t// in\n    tag_134:\n        /* \"contracts/ERC721A.sol\":8073:8121  ApprovalForAll(_msgSender(), operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \"contracts/ERC721A.sol\":8112:8120  approved */\n      dup4\n        /* \"contracts/ERC721A.sol\":8073:8121  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/ERC721A.sol\":7846:8128  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":8893:9253  function safeTransferFrom(... */\n    tag_71:\n        /* \"contracts/ERC721A.sol\":9054:9082  _transfer(from, to, tokenId) */\n      tag_137\n        /* \"contracts/ERC721A.sol\":9064:9068  from */\n      dup5\n        /* \"contracts/ERC721A.sol\":9070:9072  to */\n      dup5\n        /* \"contracts/ERC721A.sol\":9074:9081  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":9054:9063  _transfer */\n      tag_116\n        /* \"contracts/ERC721A.sol\":9054:9082  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_137:\n        /* \"contracts/ERC721A.sol\":9096:9111  to.isContract() */\n      tag_138\n        /* \"contracts/ERC721A.sol\":9096:9098  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":9096:9109  to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_139\n        /* \"contracts/ERC721A.sol\":9096:9111  to.isContract() */\n      jump\t// in\n    tag_138:\n        /* \"contracts/ERC721A.sol\":9092:9247  if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_140\n      jumpi\n        /* \"contracts/ERC721A.sol\":9117:9173  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_141\n        /* \"contracts/ERC721A.sol\":9148:9152  from */\n      dup5\n        /* \"contracts/ERC721A.sol\":9154:9156  to */\n      dup5\n        /* \"contracts/ERC721A.sol\":9158:9165  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":9167:9172  _data */\n      dup5\n        /* \"contracts/ERC721A.sol\":9117:9147  _checkContractOnERC721Received */\n      tag_142\n        /* \"contracts/ERC721A.sol\":9117:9173  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_141:\n        /* \"contracts/ERC721A.sol\":9113:9247  if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      tag_143\n      jumpi\n        /* \"contracts/ERC721A.sol\":9196:9236  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      0xd1a57ed600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":9113:9247  if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_143:\n        /* \"contracts/ERC721A.sol\":9092:9247  if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_140:\n        /* \"contracts/ERC721A.sol\":8893:9253  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":1259:1296  string public baseExtension = \".json\" */\n    tag_73:\n      0x04\n      dup1\n      sload\n      tag_144\n      swap1\n      tag_91\n      jump\t// in\n    tag_144:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_145\n      swap1\n      tag_91\n      jump\t// in\n    tag_145:\n      dup1\n      iszero\n      tag_146\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_147\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_146)\n    tag_147:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_148:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_148\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_146:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":6437:6765  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_77:\n        /* \"contracts/ERC721A.sol\":6510:6523  string memory */\n      0x60\n        /* \"contracts/ERC721A.sol\":6540:6556  _exists(tokenId) */\n      tag_150\n        /* \"contracts/ERC721A.sol\":6548:6555  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":6540:6547  _exists */\n      tag_98\n        /* \"contracts/ERC721A.sol\":6540:6556  _exists(tokenId) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/ERC721A.sol\":6535:6594  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_151\n      jumpi\n        /* \"contracts/ERC721A.sol\":6565:6594  URIQueryForNonexistentToken() */\n      mload(0x40)\n      0xa14c4b5000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":6535:6594  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_151:\n        /* \"contracts/ERC721A.sol\":6605:6626  string memory baseURI */\n      0x00\n        /* \"contracts/ERC721A.sol\":6629:6639  _baseURI() */\n      tag_152\n        /* \"contracts/ERC721A.sol\":6629:6637  _baseURI */\n      tag_153\n        /* \"contracts/ERC721A.sol\":6629:6639  _baseURI() */\n      jump\t// in\n    tag_152:\n        /* \"contracts/ERC721A.sol\":6605:6639  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":6681:6682  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":6662:6669  baseURI */\n      dup2\n        /* \"contracts/ERC721A.sol\":6656:6677  bytes(baseURI).length */\n      mload\n        /* \"contracts/ERC721A.sol\":6656:6682  bytes(baseURI).length != 0 */\n      eq\n      iszero\n        /* \"contracts/ERC721A.sol\":6656:6758  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), baseExtension)) : '' */\n      tag_154\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_155)\n    tag_154:\n        /* \"contracts/ERC721A.sol\":6709:6716  baseURI */\n      dup1\n        /* \"contracts/ERC721A.sol\":6718:6736  tokenId.toString() */\n      tag_156\n        /* \"contracts/ERC721A.sol\":6718:6725  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":6718:6734  tokenId.toString */\n      tag_157\n        /* \"contracts/ERC721A.sol\":6718:6736  tokenId.toString() */\n      jump\t// in\n    tag_156:\n        /* \"contracts/ERC721A.sol\":6738:6751  baseExtension */\n      0x04\n        /* \"contracts/ERC721A.sol\":6692:6752  abi.encodePacked(baseURI, tokenId.toString(), baseExtension) */\n      add(0x20, mload(0x40))\n      tag_158\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_158:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/ERC721A.sol\":6656:6758  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), baseExtension)) : '' */\n    tag_155:\n        /* \"contracts/ERC721A.sol\":6649:6758  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), baseExtension)) : '' */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC721A.sol\":6437:6765  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":8194:8356  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_82:\n        /* \"contracts/ERC721A.sol\":8291:8295  bool */\n      0x00\n        /* \"contracts/ERC721A.sol\":8314:8332  _operatorApprovals */\n      0x08\n        /* \"contracts/ERC721A.sol\":8314:8339  _operatorApprovals[owner] */\n      0x00\n        /* \"contracts/ERC721A.sol\":8333:8338  owner */\n      dup5\n        /* \"contracts/ERC721A.sol\":8314:8339  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":8314:8349  _operatorApprovals[owner][operator] */\n      0x00\n        /* \"contracts/ERC721A.sol\":8340:8348  operator */\n      dup4\n        /* \"contracts/ERC721A.sol\":8314:8349  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC721A.sol\":8307:8349  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":8194:8356  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":914:918  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":952:977  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:948  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":930:977  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":9499:9671  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_98:\n        /* \"contracts/ERC721A.sol\":9556:9560  bool */\n      0x00\n        /* \"contracts/ERC721A.sol\":9598:9605  tokenId */\n      dup2\n        /* \"contracts/ERC721A.sol\":9579:9594  _startTokenId() */\n      tag_163\n        /* \"contracts/ERC721A.sol\":9579:9592  _startTokenId */\n      tag_113\n        /* \"contracts/ERC721A.sol\":9579:9594  _startTokenId() */\n      jump\t// in\n    tag_163:\n        /* \"contracts/ERC721A.sol\":9579:9605  _startTokenId() <= tokenId */\n      gt\n      iszero\n        /* \"contracts/ERC721A.sol\":9579:9632  _startTokenId() <= tokenId && tokenId < _currentIndex */\n      dup1\n      iszero\n      tag_164\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":9619:9632  _currentIndex */\n      sload(0x00)\n        /* \"contracts/ERC721A.sol\":9609:9616  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":9609:9632  tokenId < _currentIndex */\n      lt\n        /* \"contracts/ERC721A.sol\":9579:9632  _startTokenId() <= tokenId && tokenId < _currentIndex */\n    tag_164:\n        /* \"contracts/ERC721A.sol\":9579:9664  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      dup1\n      iszero\n      tag_165\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":9637:9648  _ownerships */\n      0x05\n        /* \"contracts/ERC721A.sol\":9637:9657  _ownerships[tokenId] */\n      0x00\n        /* \"contracts/ERC721A.sol\":9649:9656  tokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":9637:9657  _ownerships[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":9637:9664  _ownerships[tokenId].burned */\n      0x00\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC721A.sol\":9636:9664  !_ownerships[tokenId].burned */\n      iszero\n        /* \"contracts/ERC721A.sol\":9579:9664  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n    tag_165:\n        /* \"contracts/ERC721A.sol\":9572:9664  return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":9499:9671  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":18480:18669  function _approve(... */\n    tag_110:\n        /* \"contracts/ERC721A.sol\":18617:18619  to */\n      dup3\n        /* \"contracts/ERC721A.sol\":18590:18605  _tokenApprovals */\n      0x07\n        /* \"contracts/ERC721A.sol\":18590:18614  _tokenApprovals[tokenId] */\n      0x00\n        /* \"contracts/ERC721A.sol\":18606:18613  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":18590:18614  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC721A.sol\":18590:18619  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":18654:18661  tokenId */\n      dup2\n        /* \"contracts/ERC721A.sol\":18650:18652  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":18634:18662  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":18643:18648  owner */\n      dup3\n        /* \"contracts/ERC721A.sol\":18634:18662  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contracts/ERC721A.sol\":18480:18669  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":2120:2210  function _startTokenId() internal view virtual returns (uint256) {... */\n    tag_113:\n        /* \"contracts/ERC721A.sol\":2176:2183  uint256 */\n      0x00\n        /* \"contracts/ERC721A.sol\":2120:2210  function _startTokenId() internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":13555:15637  function _transfer(... */\n    tag_116:\n        /* \"contracts/ERC721A.sol\":13665:13700  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"contracts/ERC721A.sol\":13703:13724  _ownershipOf(tokenId) */\n      tag_170\n        /* \"contracts/ERC721A.sol\":13716:13723  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":13703:13715  _ownershipOf */\n      tag_121\n        /* \"contracts/ERC721A.sol\":13703:13724  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_170:\n        /* \"contracts/ERC721A.sol\":13665:13724  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":13761:13765  from */\n      dup4\n        /* \"contracts/ERC721A.sol\":13739:13765  prevOwnership.addr != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":13739:13752  prevOwnership */\n      dup2\n        /* \"contracts/ERC721A.sol\":13739:13757  prevOwnership.addr */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":13739:13765  prevOwnership.addr != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":13735:13802  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_171\n      jumpi\n        /* \"contracts/ERC721A.sol\":13774:13802  TransferFromIncorrectOwner() */\n      mload(0x40)\n      0xa114810000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":13735:13802  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_171:\n        /* \"contracts/ERC721A.sol\":13813:13835  bool isApprovedOrOwner */\n      0x00\n        /* \"contracts/ERC721A.sol\":13855:13859  from */\n      dup5\n        /* \"contracts/ERC721A.sol\":13839:13859  _msgSender() == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":13839:13851  _msgSender() */\n      tag_172\n        /* \"contracts/ERC721A.sol\":13839:13849  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":13839:13851  _msgSender() */\n      jump\t// in\n    tag_172:\n        /* \"contracts/ERC721A.sol\":13839:13859  _msgSender() == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":13839:13911  _msgSender() == from ||... */\n      dup1\n      tag_173\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":13875:13911  isApprovedForAll(from, _msgSender()) */\n      tag_174\n        /* \"contracts/ERC721A.sol\":13892:13896  from */\n      dup6\n        /* \"contracts/ERC721A.sol\":13898:13910  _msgSender() */\n      tag_175\n        /* \"contracts/ERC721A.sol\":13898:13908  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":13898:13910  _msgSender() */\n      jump\t// in\n    tag_175:\n        /* \"contracts/ERC721A.sol\":13875:13891  isApprovedForAll */\n      tag_82\n        /* \"contracts/ERC721A.sol\":13875:13911  isApprovedForAll(from, _msgSender()) */\n      jump\t// in\n    tag_174:\n        /* \"contracts/ERC721A.sol\":13839:13911  _msgSender() == from ||... */\n    tag_173:\n        /* \"contracts/ERC721A.sol\":13839:13963  _msgSender() == from ||... */\n      dup1\n      tag_176\n      jumpi\n      pop\n        /* \"contracts/ERC721A.sol\":13951:13963  _msgSender() */\n      tag_177\n        /* \"contracts/ERC721A.sol\":13951:13961  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":13951:13963  _msgSender() */\n      jump\t// in\n    tag_177:\n        /* \"contracts/ERC721A.sol\":13927:13963  getApproved(tokenId) == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":13927:13947  getApproved(tokenId) */\n      tag_178\n        /* \"contracts/ERC721A.sol\":13939:13946  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":13927:13938  getApproved */\n      tag_34\n        /* \"contracts/ERC721A.sol\":13927:13947  getApproved(tokenId) */\n      jump\t// in\n    tag_178:\n        /* \"contracts/ERC721A.sol\":13927:13963  getApproved(tokenId) == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":13839:13963  _msgSender() == from ||... */\n    tag_176:\n        /* \"contracts/ERC721A.sol\":13813:13964  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":13980:13997  isApprovedOrOwner */\n      dup1\n        /* \"contracts/ERC721A.sol\":13975:14041  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_179\n      jumpi\n        /* \"contracts/ERC721A.sol\":14006:14041  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      0x59c896be00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":13975:14041  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_179:\n        /* \"contracts/ERC721A.sol\":14069:14070  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":14055:14071  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":14055:14057  to */\n      dup5\n        /* \"contracts/ERC721A.sol\":14055:14071  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":14051:14103  if (to == address(0)) revert TransferToZeroAddress() */\n      iszero\n      tag_180\n      jumpi\n        /* \"contracts/ERC721A.sol\":14080:14103  TransferToZeroAddress() */\n      mload(0x40)\n      0xea553b3400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":14051:14103  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_180:\n        /* \"contracts/ERC721A.sol\":14114:14157  _beforeTokenTransfers(from, to, tokenId, 1) */\n      tag_181\n        /* \"contracts/ERC721A.sol\":14136:14140  from */\n      dup6\n        /* \"contracts/ERC721A.sol\":14142:14144  to */\n      dup6\n        /* \"contracts/ERC721A.sol\":14146:14153  tokenId */\n      dup6\n        /* \"contracts/ERC721A.sol\":14155:14156  1 */\n      0x01\n        /* \"contracts/ERC721A.sol\":14114:14135  _beforeTokenTransfers */\n      tag_182\n        /* \"contracts/ERC721A.sol\":14114:14157  _beforeTokenTransfers(from, to, tokenId, 1) */\n      jump\t// in\n    tag_181:\n        /* \"contracts/ERC721A.sol\":14219:14254  _approve(address(0), tokenId, from) */\n      tag_183\n        /* \"contracts/ERC721A.sol\":14236:14237  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":14240:14247  tokenId */\n      dup5\n        /* \"contracts/ERC721A.sol\":14249:14253  from */\n      dup8\n        /* \"contracts/ERC721A.sol\":14219:14227  _approve */\n      tag_110\n        /* \"contracts/ERC721A.sol\":14219:14254  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_183:\n        /* \"contracts/ERC721A.sol\":14574:14575  1 */\n      0x01\n        /* \"contracts/ERC721A.sol\":14544:14556  _addressData */\n      0x06\n        /* \"contracts/ERC721A.sol\":14544:14562  _addressData[from] */\n      0x00\n        /* \"contracts/ERC721A.sol\":14557:14561  from */\n      dup8\n        /* \"contracts/ERC721A.sol\":14544:14562  _addressData[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":14544:14570  _addressData[from].balance */\n      0x00\n      add\n      0x00\n        /* \"contracts/ERC721A.sol\":14544:14575  _addressData[from].balance -= 1 */\n      dup3\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      sub\n      swap3\n      pop\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":14617:14618  1 */\n      0x01\n        /* \"contracts/ERC721A.sol\":14589:14601  _addressData */\n      0x06\n        /* \"contracts/ERC721A.sol\":14589:14605  _addressData[to] */\n      0x00\n        /* \"contracts/ERC721A.sol\":14602:14604  to */\n      dup7\n        /* \"contracts/ERC721A.sol\":14589:14605  _addressData[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":14589:14613  _addressData[to].balance */\n      0x00\n      add\n      0x00\n        /* \"contracts/ERC721A.sol\":14589:14618  _addressData[to].balance += 1 */\n      dup3\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      add\n      swap3\n      pop\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":14633:14664  TokenOwnership storage currSlot */\n      0x00\n        /* \"contracts/ERC721A.sol\":14667:14678  _ownerships */\n      0x05\n        /* \"contracts/ERC721A.sol\":14667:14687  _ownerships[tokenId] */\n      0x00\n        /* \"contracts/ERC721A.sol\":14679:14686  tokenId */\n      dup6\n        /* \"contracts/ERC721A.sol\":14667:14687  _ownerships[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":14633:14687  TokenOwnership storage currSlot = _ownerships[tokenId] */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":14717:14719  to */\n      dup5\n        /* \"contracts/ERC721A.sol\":14701:14709  currSlot */\n      dup2\n        /* \"contracts/ERC721A.sol\":14701:14714  currSlot.addr */\n      0x00\n      add\n      0x00\n        /* \"contracts/ERC721A.sol\":14701:14719  currSlot.addr = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":14766:14781  block.timestamp */\n      timestamp\n        /* \"contracts/ERC721A.sol\":14733:14741  currSlot */\n      dup2\n        /* \"contracts/ERC721A.sol\":14733:14756  currSlot.startTimestamp */\n      0x00\n      add\n      0x14\n        /* \"contracts/ERC721A.sol\":14733:14782  currSlot.startTimestamp = uint64(block.timestamp) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":15030:15049  uint256 nextTokenId */\n      0x00\n        /* \"contracts/ERC721A.sol\":15062:15063  1 */\n      0x01\n        /* \"contracts/ERC721A.sol\":15052:15059  tokenId */\n      dup6\n        /* \"contracts/ERC721A.sol\":15052:15063  tokenId + 1 */\n      add\n        /* \"contracts/ERC721A.sol\":15030:15063  uint256 nextTokenId = tokenId + 1 */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":15077:15108  TokenOwnership storage nextSlot */\n      0x00\n        /* \"contracts/ERC721A.sol\":15111:15122  _ownerships */\n      0x05\n        /* \"contracts/ERC721A.sol\":15111:15135  _ownerships[nextTokenId] */\n      0x00\n        /* \"contracts/ERC721A.sol\":15123:15134  nextTokenId */\n      dup4\n        /* \"contracts/ERC721A.sol\":15111:15135  _ownerships[nextTokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":15077:15135  TokenOwnership storage nextSlot = _ownerships[nextTokenId] */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":15178:15179  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":15153:15180  nextSlot.addr == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":15153:15161  nextSlot */\n      dup2\n        /* \"contracts/ERC721A.sol\":15153:15166  nextSlot.addr */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":15153:15180  nextSlot.addr == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":15149:15526  if (nextSlot.addr == address(0)) {... */\n      iszero\n      tag_184\n      jumpi\n        /* \"contracts/ERC721A.sol\":15360:15373  _currentIndex */\n      sload(0x00)\n        /* \"contracts/ERC721A.sol\":15345:15356  nextTokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":15345:15373  nextTokenId != _currentIndex */\n      eq\n        /* \"contracts/ERC721A.sol\":15341:15512  if (nextTokenId != _currentIndex) {... */\n      tag_185\n      jumpi\n        /* \"contracts/ERC721A.sol\":15413:15417  from */\n      dup8\n        /* \"contracts/ERC721A.sol\":15397:15405  nextSlot */\n      dup2\n        /* \"contracts/ERC721A.sol\":15397:15410  nextSlot.addr */\n      0x00\n      add\n      0x00\n        /* \"contracts/ERC721A.sol\":15397:15417  nextSlot.addr = from */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":15465:15478  prevOwnership */\n      dup5\n        /* \"contracts/ERC721A.sol\":15465:15493  prevOwnership.startTimestamp */\n      0x20\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":15439:15447  nextSlot */\n      dup2\n        /* \"contracts/ERC721A.sol\":15439:15462  nextSlot.startTimestamp */\n      0x00\n      add\n      0x14\n        /* \"contracts/ERC721A.sol\":15439:15493  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC721A.sol\":15341:15512  if (nextTokenId != _currentIndex) {... */\n    tag_185:\n        /* \"contracts/ERC721A.sol\":15149:15526  if (nextSlot.addr == address(0)) {... */\n    tag_184:\n        /* \"contracts/ERC721A.sol\":14520:15536  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"contracts/ERC721A.sol\":15570:15577  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":15566:15568  to */\n      dup5\n        /* \"contracts/ERC721A.sol\":15551:15578  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":15560:15564  from */\n      dup7\n        /* \"contracts/ERC721A.sol\":15551:15578  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contracts/ERC721A.sol\":15588:15630  _afterTokenTransfers(from, to, tokenId, 1) */\n      tag_186\n        /* \"contracts/ERC721A.sol\":15609:15613  from */\n      dup6\n        /* \"contracts/ERC721A.sol\":15615:15617  to */\n      dup6\n        /* \"contracts/ERC721A.sol\":15619:15626  tokenId */\n      dup6\n        /* \"contracts/ERC721A.sol\":15628:15629  1 */\n      0x01\n        /* \"contracts/ERC721A.sol\":15588:15608  _afterTokenTransfers */\n      tag_187\n        /* \"contracts/ERC721A.sol\":15588:15630  _afterTokenTransfers(from, to, tokenId, 1) */\n      jump\t// in\n    tag_186:\n        /* \"contracts/ERC721A.sol\":13655:15637  {... */\n      pop\n      pop\n        /* \"contracts/ERC721A.sol\":13555:15637  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":4779:5865  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_121:\n        /* \"contracts/ERC721A.sol\":4841:4862  TokenOwnership memory */\n      tag_188\n      tag_189\n      jump\t// in\n    tag_188:\n        /* \"contracts/ERC721A.sol\":4874:4886  uint256 curr */\n      0x00\n        /* \"contracts/ERC721A.sol\":4889:4896  tokenId */\n      dup3\n        /* \"contracts/ERC721A.sol\":4874:4896  uint256 curr = tokenId */\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":4954:4958  curr */\n      dup1\n        /* \"contracts/ERC721A.sol\":4935:4950  _startTokenId() */\n      tag_191\n        /* \"contracts/ERC721A.sol\":4935:4948  _startTokenId */\n      tag_113\n        /* \"contracts/ERC721A.sol\":4935:4950  _startTokenId() */\n      jump\t// in\n    tag_191:\n        /* \"contracts/ERC721A.sol\":4935:4958  _startTokenId() <= curr */\n      gt\n        /* \"contracts/ERC721A.sol\":4931:5801  if (_startTokenId() <= curr) if (curr < _currentIndex) {... */\n      tag_192\n      jumpi\n        /* \"contracts/ERC721A.sol\":4971:4984  _currentIndex */\n      sload(0x00)\n        /* \"contracts/ERC721A.sol\":4964:4968  curr */\n      dup2\n        /* \"contracts/ERC721A.sol\":4964:4984  curr < _currentIndex */\n      lt\n        /* \"contracts/ERC721A.sol\":4960:5801  if (curr < _currentIndex) {... */\n      iszero\n      tag_193\n      jumpi\n        /* \"contracts/ERC721A.sol\":5004:5035  TokenOwnership memory ownership */\n      0x00\n        /* \"contracts/ERC721A.sol\":5038:5049  _ownerships */\n      0x05\n        /* \"contracts/ERC721A.sol\":5038:5055  _ownerships[curr] */\n      0x00\n        /* \"contracts/ERC721A.sol\":5050:5054  curr */\n      dup4\n        /* \"contracts/ERC721A.sol\":5038:5055  _ownerships[curr] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":5004:5055  TokenOwnership memory ownership = _ownerships[curr] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":5078:5087  ownership */\n      dup1\n        /* \"contracts/ERC721A.sol\":5078:5094  ownership.burned */\n      0x40\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":5073:5787  if (!ownership.burned) {... */\n      tag_194\n      jumpi\n        /* \"contracts/ERC721A.sol\":5148:5149  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":5122:5150  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":5122:5131  ownership */\n      dup2\n        /* \"contracts/ERC721A.sol\":5122:5136  ownership.addr */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":5122:5150  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":5118:5217  if (ownership.addr != address(0)) {... */\n      tag_195\n      jumpi\n        /* \"contracts/ERC721A.sol\":5185:5194  ownership */\n      dup1\n        /* \"contracts/ERC721A.sol\":5178:5194  return ownership */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_190)\n        /* \"contracts/ERC721A.sol\":5118:5217  if (ownership.addr != address(0)) {... */\n    tag_195:\n        /* \"contracts/ERC721A.sol\":5514:5769  while (true) {... */\n    tag_196:\n        /* \"contracts/ERC721A.sol\":5521:5525  true */\n      0x01\n        /* \"contracts/ERC721A.sol\":5514:5769  while (true) {... */\n      iszero\n      tag_197\n      jumpi\n        /* \"contracts/ERC721A.sol\":5553:5559  curr-- */\n      dup2\n      dup1\n      0x01\n      swap1\n      sub\n      swap3\n      pop\n      pop\n        /* \"contracts/ERC721A.sol\":5597:5608  _ownerships */\n      0x05\n        /* \"contracts/ERC721A.sol\":5597:5614  _ownerships[curr] */\n      0x00\n        /* \"contracts/ERC721A.sol\":5609:5613  curr */\n      dup4\n        /* \"contracts/ERC721A.sol\":5597:5614  _ownerships[curr] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC721A.sol\":5585:5614  ownership = _ownerships[curr] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":5670:5671  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":5644:5672  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC721A.sol\":5644:5653  ownership */\n      dup2\n        /* \"contracts/ERC721A.sol\":5644:5658  ownership.addr */\n      0x00\n      add\n      mload\n        /* \"contracts/ERC721A.sol\":5644:5672  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":5640:5747  if (ownership.addr != address(0)) {... */\n      tag_198\n      jumpi\n        /* \"contracts/ERC721A.sol\":5711:5720  ownership */\n      dup1\n        /* \"contracts/ERC721A.sol\":5704:5720  return ownership */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_190)\n        /* \"contracts/ERC721A.sol\":5640:5747  if (ownership.addr != address(0)) {... */\n    tag_198:\n        /* \"contracts/ERC721A.sol\":5514:5769  while (true) {... */\n      jump(tag_196)\n    tag_197:\n        /* \"contracts/ERC721A.sol\":5073:5787  if (!ownership.burned) {... */\n    tag_194:\n        /* \"contracts/ERC721A.sol\":4986:5801  {... */\n      pop\n        /* \"contracts/ERC721A.sol\":4960:5801  if (curr < _currentIndex) {... */\n    tag_193:\n        /* \"contracts/ERC721A.sol\":4931:5801  if (_startTokenId() <= curr) if (curr < _currentIndex) {... */\n    tag_192:\n        /* \"contracts/ERC721A.sol\":5827:5858  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      0xdf2d9b4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":4779:5865  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_190:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":19150:19800  function _checkContractOnERC721Received(... */\n    tag_142:\n        /* \"contracts/ERC721A.sol\":19308:19312  bool */\n      0x00\n        /* \"contracts/ERC721A.sol\":19344:19346  to */\n      dup4\n        /* \"contracts/ERC721A.sol\":19328:19364  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \"contracts/ERC721A.sol\":19365:19377  _msgSender() */\n      tag_201\n        /* \"contracts/ERC721A.sol\":19365:19375  _msgSender */\n      tag_104\n        /* \"contracts/ERC721A.sol\":19365:19377  _msgSender() */\n      jump\t// in\n    tag_201:\n        /* \"contracts/ERC721A.sol\":19379:19383  from */\n      dup8\n        /* \"contracts/ERC721A.sol\":19385:19392  tokenId */\n      dup7\n        /* \"contracts/ERC721A.sol\":19394:19399  _data */\n      dup7\n        /* \"contracts/ERC721A.sol\":19328:19400  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_202\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_202:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_204\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_205\n      swap2\n      swap1\n      tag_206\n      jump\t// in\n    tag_205:\n      0x01\n    tag_204:\n        /* \"contracts/ERC721A.sol\":19324:19794  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_207\n      jumpi\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_212\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_211)\n    tag_212:\n      0x60\n      swap2\n      pop\n    tag_211:\n      pop\n        /* \"contracts/ERC721A.sol\":19576:19577  0 */\n      0x00\n        /* \"contracts/ERC721A.sol\":19559:19565  reason */\n      dup2\n        /* \"contracts/ERC721A.sol\":19559:19572  reason.length */\n      mload\n        /* \"contracts/ERC721A.sol\":19559:19577  reason.length == 0 */\n      eq\n        /* \"contracts/ERC721A.sol\":19555:19784  if (reason.length == 0) {... */\n      iszero\n      tag_213\n      jumpi\n        /* \"contracts/ERC721A.sol\":19604:19644  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      0xd1a57ed600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC721A.sol\":19555:19784  if (reason.length == 0) {... */\n    tag_213:\n        /* \"contracts/ERC721A.sol\":19744:19750  reason */\n      dup1\n        /* \"contracts/ERC721A.sol\":19738:19751  mload(reason) */\n      mload\n        /* \"contracts/ERC721A.sol\":19729:19735  reason */\n      dup2\n        /* \"contracts/ERC721A.sol\":19725:19727  32 */\n      0x20\n        /* \"contracts/ERC721A.sol\":19721:19736  add(32, reason) */\n      add\n        /* \"contracts/ERC721A.sol\":19714:19752  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"contracts/ERC721A.sol\":19324:19794  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_207:\n        /* \"contracts/ERC721A.sol\":19456:19501  IERC721Receiver(to).onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"contracts/ERC721A.sol\":19446:19501  retval == IERC721Receiver(to).onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC721A.sol\":19446:19452  retval */\n      dup2\n        /* \"contracts/ERC721A.sol\":19446:19501  retval == IERC721Receiver(to).onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC721A.sol\":19439:19501  return retval == IERC721Receiver(to).onERC721Received.selector */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC721A.sol\":19150:19800  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":7006:7098  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_153:\n        /* \"contracts/ERC721A.sol\":7057:7070  string memory */\n      0x60\n        /* \"contracts/ERC721A.sol\":7082:7091  return '' */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC721A.sol\":7006:7098  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":392:1095  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":448:461  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":674:675  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":665:670  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":665:675  value == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":661:712  if (value == 0) {... */\n      iszero\n      tag_218\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":691:701  return \"0\" */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n      jump(tag_217)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":661:712  if (value == 0) {... */\n    tag_218:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":721:733  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":736:741  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":721:741  uint256 temp = value */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":751:765  uint256 digits */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":775:850  while (temp != 0) {... */\n    tag_219:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":790:791  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":782:786  temp */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":782:791  temp != 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":775:850  while (temp != 0) {... */\n      tag_220\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":807:815  digits++ */\n      dup1\n      dup1\n      tag_221\n      swap1\n      tag_222\n      jump\t// in\n    tag_221:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":837:839  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":829:839  temp /= 10 */\n      dup3\n      tag_223\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_223:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":775:850  while (temp != 0) {... */\n      jump(tag_219)\n    tag_220:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":859:878  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":891:897  digits */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":881:898  new bytes(digits) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_225\n      jumpi\n      tag_226\n      tag_227\n      jump\t// in\n    tag_226:\n    tag_225:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_228\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_228:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":859:898  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":908:1058  while (value != 0) {... */\n    tag_229:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":924:925  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":915:920  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":915:925  value != 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":908:1058  while (value != 0) {... */\n      tag_230\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":951:952  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":941:952  digits -= 1 */\n      dup3\n      tag_231\n      swap2\n      swap1\n      tag_232\n      jump\t// in\n    tag_231:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1017:1019  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1009:1014  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1009:1019  value % 10 */\n      tag_233\n      swap2\n      swap1\n      tag_234\n      jump\t// in\n    tag_233:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":996:998  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":996:1020  48 + uint256(value % 10) */\n      tag_235\n      swap2\n      swap1\n      tag_236\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":983:1022  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":966:972  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":973:979  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":966:980  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_237\n      jumpi\n      tag_238\n      tag_239\n      jump\t// in\n    tag_238:\n    tag_237:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":966:1022  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1045:1047  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1036:1047  value /= 10 */\n      dup6\n      tag_240\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_240:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":908:1058  while (value != 0) {... */\n      jump(tag_229)\n    tag_230:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1081:1087  buffer */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1067:1088  return string(buffer) */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":392:1095  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_217:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":20431:20585  function _beforeTokenTransfers(... */\n    tag_182:\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC721A.sol\":21226:21379  function _afterTokenTransfers(... */\n    tag_187:\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_189:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      iszero(iszero(0x00))\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_243:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_244:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_245:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:483   */\n    tag_246:\n        /* \"#utility.yul\":370:377   */\n      0x00\n        /* \"#utility.yul\":410:476   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":403:408   */\n      dup3\n        /* \"#utility.yul\":399:477   */\n      and\n        /* \"#utility.yul\":388:477   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:483   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":489:609   */\n    tag_247:\n        /* \"#utility.yul\":561:584   */\n      tag_292\n        /* \"#utility.yul\":578:583   */\n      dup2\n        /* \"#utility.yul\":561:584   */\n      tag_246\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":554:559   */\n      dup2\n        /* \"#utility.yul\":551:585   */\n      eq\n        /* \"#utility.yul\":541:603   */\n      tag_293\n      jumpi\n        /* \"#utility.yul\":599:600   */\n      0x00\n        /* \"#utility.yul\":596:597   */\n      dup1\n        /* \"#utility.yul\":589:601   */\n      revert\n        /* \"#utility.yul\":541:603   */\n    tag_293:\n        /* \"#utility.yul\":489:609   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:752   */\n    tag_248:\n        /* \"#utility.yul\":660:665   */\n      0x00\n        /* \"#utility.yul\":698:704   */\n      dup2\n        /* \"#utility.yul\":685:705   */\n      calldataload\n        /* \"#utility.yul\":676:705   */\n      swap1\n      pop\n        /* \"#utility.yul\":714:746   */\n      tag_295\n        /* \"#utility.yul\":740:745   */\n      dup2\n        /* \"#utility.yul\":714:746   */\n      tag_247\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":615:752   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1085   */\n    tag_23:\n        /* \"#utility.yul\":816:822   */\n      0x00\n        /* \"#utility.yul\":865:867   */\n      0x20\n        /* \"#utility.yul\":853:862   */\n      dup3\n        /* \"#utility.yul\":844:851   */\n      dup5\n        /* \"#utility.yul\":840:863   */\n      sub\n        /* \"#utility.yul\":836:868   */\n      slt\n        /* \"#utility.yul\":833:952   */\n      iszero\n      tag_297\n      jumpi\n        /* \"#utility.yul\":871:950   */\n      tag_298\n      tag_244\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":833:952   */\n    tag_297:\n        /* \"#utility.yul\":991:992   */\n      0x00\n        /* \"#utility.yul\":1016:1068   */\n      tag_299\n        /* \"#utility.yul\":1060:1067   */\n      dup5\n        /* \"#utility.yul\":1051:1057   */\n      dup3\n        /* \"#utility.yul\":1040:1049   */\n      dup6\n        /* \"#utility.yul\":1036:1058   */\n      add\n        /* \"#utility.yul\":1016:1068   */\n      tag_248\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":1006:1068   */\n      swap2\n      pop\n        /* \"#utility.yul\":962:1078   */\n      pop\n        /* \"#utility.yul\":758:1085   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1091:1181   */\n    tag_249:\n        /* \"#utility.yul\":1125:1132   */\n      0x00\n        /* \"#utility.yul\":1168:1173   */\n      dup2\n        /* \"#utility.yul\":1161:1174   */\n      iszero\n        /* \"#utility.yul\":1154:1175   */\n      iszero\n        /* \"#utility.yul\":1143:1175   */\n      swap1\n      pop\n        /* \"#utility.yul\":1091:1181   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1187:1296   */\n    tag_250:\n        /* \"#utility.yul\":1268:1289   */\n      tag_302\n        /* \"#utility.yul\":1283:1288   */\n      dup2\n        /* \"#utility.yul\":1268:1289   */\n      tag_249\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":1263:1266   */\n      dup3\n        /* \"#utility.yul\":1256:1290   */\n      mstore\n        /* \"#utility.yul\":1187:1296   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1302:1512   */\n    tag_26:\n        /* \"#utility.yul\":1389:1393   */\n      0x00\n        /* \"#utility.yul\":1427:1429   */\n      0x20\n        /* \"#utility.yul\":1416:1425   */\n      dup3\n        /* \"#utility.yul\":1412:1430   */\n      add\n        /* \"#utility.yul\":1404:1430   */\n      swap1\n      pop\n        /* \"#utility.yul\":1440:1505   */\n      tag_304\n        /* \"#utility.yul\":1502:1503   */\n      0x00\n        /* \"#utility.yul\":1491:1500   */\n      dup4\n        /* \"#utility.yul\":1487:1504   */\n      add\n        /* \"#utility.yul\":1478:1484   */\n      dup5\n        /* \"#utility.yul\":1440:1505   */\n      tag_250\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":1302:1512   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1617   */\n    tag_251:\n        /* \"#utility.yul\":1570:1576   */\n      0x00\n        /* \"#utility.yul\":1604:1609   */\n      dup2\n        /* \"#utility.yul\":1598:1610   */\n      mload\n        /* \"#utility.yul\":1588:1610   */\n      swap1\n      pop\n        /* \"#utility.yul\":1518:1617   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1623:1792   */\n    tag_252:\n        /* \"#utility.yul\":1707:1718   */\n      0x00\n        /* \"#utility.yul\":1741:1747   */\n      dup3\n        /* \"#utility.yul\":1736:1739   */\n      dup3\n        /* \"#utility.yul\":1729:1748   */\n      mstore\n        /* \"#utility.yul\":1781:1785   */\n      0x20\n        /* \"#utility.yul\":1776:1779   */\n      dup3\n        /* \"#utility.yul\":1772:1786   */\n      add\n        /* \"#utility.yul\":1757:1786   */\n      swap1\n      pop\n        /* \"#utility.yul\":1623:1792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1798:2105   */\n    tag_253:\n        /* \"#utility.yul\":1866:1867   */\n      0x00\n        /* \"#utility.yul\":1876:1989   */\n    tag_308:\n        /* \"#utility.yul\":1890:1896   */\n      dup4\n        /* \"#utility.yul\":1887:1888   */\n      dup2\n        /* \"#utility.yul\":1884:1897   */\n      lt\n        /* \"#utility.yul\":1876:1989   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":1975:1976   */\n      dup1\n        /* \"#utility.yul\":1970:1973   */\n      dup3\n        /* \"#utility.yul\":1966:1977   */\n      add\n        /* \"#utility.yul\":1960:1978   */\n      mload\n        /* \"#utility.yul\":1956:1957   */\n      dup2\n        /* \"#utility.yul\":1951:1954   */\n      dup5\n        /* \"#utility.yul\":1947:1958   */\n      add\n        /* \"#utility.yul\":1940:1979   */\n      mstore\n        /* \"#utility.yul\":1912:1914   */\n      0x20\n        /* \"#utility.yul\":1909:1910   */\n      dup2\n        /* \"#utility.yul\":1905:1915   */\n      add\n        /* \"#utility.yul\":1900:1915   */\n      swap1\n      pop\n        /* \"#utility.yul\":1876:1989   */\n      jump(tag_308)\n    tag_310:\n        /* \"#utility.yul\":2007:2013   */\n      dup4\n        /* \"#utility.yul\":2004:2005   */\n      dup2\n        /* \"#utility.yul\":2001:2014   */\n      gt\n        /* \"#utility.yul\":1998:2099   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":2087:2088   */\n      0x00\n        /* \"#utility.yul\":2078:2084   */\n      dup5\n        /* \"#utility.yul\":2073:2076   */\n      dup5\n        /* \"#utility.yul\":2069:2085   */\n      add\n        /* \"#utility.yul\":2062:2089   */\n      mstore\n        /* \"#utility.yul\":1998:2099   */\n    tag_311:\n        /* \"#utility.yul\":1847:2105   */\n      pop\n        /* \"#utility.yul\":1798:2105   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2111:2213   */\n    tag_254:\n        /* \"#utility.yul\":2152:2158   */\n      0x00\n        /* \"#utility.yul\":2203:2205   */\n      0x1f\n        /* \"#utility.yul\":2199:2206   */\n      not\n        /* \"#utility.yul\":2194:2196   */\n      0x1f\n        /* \"#utility.yul\":2187:2192   */\n      dup4\n        /* \"#utility.yul\":2183:2197   */\n      add\n        /* \"#utility.yul\":2179:2207   */\n      and\n        /* \"#utility.yul\":2169:2207   */\n      swap1\n      pop\n        /* \"#utility.yul\":2111:2213   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2219:2583   */\n    tag_255:\n        /* \"#utility.yul\":2307:2310   */\n      0x00\n        /* \"#utility.yul\":2335:2374   */\n      tag_314\n        /* \"#utility.yul\":2368:2373   */\n      dup3\n        /* \"#utility.yul\":2335:2374   */\n      tag_251\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":2390:2461   */\n      tag_315\n        /* \"#utility.yul\":2454:2460   */\n      dup2\n        /* \"#utility.yul\":2449:2452   */\n      dup6\n        /* \"#utility.yul\":2390:2461   */\n      tag_252\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":2383:2461   */\n      swap4\n      pop\n        /* \"#utility.yul\":2470:2522   */\n      tag_316\n        /* \"#utility.yul\":2515:2521   */\n      dup2\n        /* \"#utility.yul\":2510:2513   */\n      dup6\n        /* \"#utility.yul\":2503:2507   */\n      0x20\n        /* \"#utility.yul\":2496:2501   */\n      dup7\n        /* \"#utility.yul\":2492:2508   */\n      add\n        /* \"#utility.yul\":2470:2522   */\n      tag_253\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":2547:2576   */\n      tag_317\n        /* \"#utility.yul\":2569:2575   */\n      dup2\n        /* \"#utility.yul\":2547:2576   */\n      tag_254\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":2542:2545   */\n      dup5\n        /* \"#utility.yul\":2538:2577   */\n      add\n        /* \"#utility.yul\":2531:2577   */\n      swap2\n      pop\n        /* \"#utility.yul\":2311:2583   */\n      pop\n        /* \"#utility.yul\":2219:2583   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2589:2902   */\n    tag_30:\n        /* \"#utility.yul\":2702:2706   */\n      0x00\n        /* \"#utility.yul\":2740:2742   */\n      0x20\n        /* \"#utility.yul\":2729:2738   */\n      dup3\n        /* \"#utility.yul\":2725:2743   */\n      add\n        /* \"#utility.yul\":2717:2743   */\n      swap1\n      pop\n        /* \"#utility.yul\":2789:2798   */\n      dup2\n        /* \"#utility.yul\":2783:2787   */\n      dup2\n        /* \"#utility.yul\":2779:2799   */\n      sub\n        /* \"#utility.yul\":2775:2776   */\n      0x00\n        /* \"#utility.yul\":2764:2773   */\n      dup4\n        /* \"#utility.yul\":2760:2777   */\n      add\n        /* \"#utility.yul\":2753:2800   */\n      mstore\n        /* \"#utility.yul\":2817:2895   */\n      tag_319\n        /* \"#utility.yul\":2890:2894   */\n      dup2\n        /* \"#utility.yul\":2881:2887   */\n      dup5\n        /* \"#utility.yul\":2817:2895   */\n      tag_255\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":2809:2895   */\n      swap1\n      pop\n        /* \"#utility.yul\":2589:2902   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2908:2985   */\n    tag_256:\n        /* \"#utility.yul\":2945:2952   */\n      0x00\n        /* \"#utility.yul\":2974:2979   */\n      dup2\n        /* \"#utility.yul\":2963:2979   */\n      swap1\n      pop\n        /* \"#utility.yul\":2908:2985   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2991:3113   */\n    tag_257:\n        /* \"#utility.yul\":3064:3088   */\n      tag_322\n        /* \"#utility.yul\":3082:3087   */\n      dup2\n        /* \"#utility.yul\":3064:3088   */\n      tag_256\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":3057:3062   */\n      dup2\n        /* \"#utility.yul\":3054:3089   */\n      eq\n        /* \"#utility.yul\":3044:3107   */\n      tag_323\n      jumpi\n        /* \"#utility.yul\":3103:3104   */\n      0x00\n        /* \"#utility.yul\":3100:3101   */\n      dup1\n        /* \"#utility.yul\":3093:3105   */\n      revert\n        /* \"#utility.yul\":3044:3107   */\n    tag_323:\n        /* \"#utility.yul\":2991:3113   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3119:3258   */\n    tag_258:\n        /* \"#utility.yul\":3165:3170   */\n      0x00\n        /* \"#utility.yul\":3203:3209   */\n      dup2\n        /* \"#utility.yul\":3190:3210   */\n      calldataload\n        /* \"#utility.yul\":3181:3210   */\n      swap1\n      pop\n        /* \"#utility.yul\":3219:3252   */\n      tag_325\n        /* \"#utility.yul\":3246:3251   */\n      dup2\n        /* \"#utility.yul\":3219:3252   */\n      tag_257\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":3119:3258   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3264:3593   */\n    tag_33:\n        /* \"#utility.yul\":3323:3329   */\n      0x00\n        /* \"#utility.yul\":3372:3374   */\n      0x20\n        /* \"#utility.yul\":3360:3369   */\n      dup3\n        /* \"#utility.yul\":3351:3358   */\n      dup5\n        /* \"#utility.yul\":3347:3370   */\n      sub\n        /* \"#utility.yul\":3343:3375   */\n      slt\n        /* \"#utility.yul\":3340:3459   */\n      iszero\n      tag_327\n      jumpi\n        /* \"#utility.yul\":3378:3457   */\n      tag_328\n      tag_244\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":3340:3459   */\n    tag_327:\n        /* \"#utility.yul\":3498:3499   */\n      0x00\n        /* \"#utility.yul\":3523:3576   */\n      tag_329\n        /* \"#utility.yul\":3568:3575   */\n      dup5\n        /* \"#utility.yul\":3559:3565   */\n      dup3\n        /* \"#utility.yul\":3548:3557   */\n      dup6\n        /* \"#utility.yul\":3544:3566   */\n      add\n        /* \"#utility.yul\":3523:3576   */\n      tag_258\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":3513:3576   */\n      swap2\n      pop\n        /* \"#utility.yul\":3469:3586   */\n      pop\n        /* \"#utility.yul\":3264:3593   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3599:3725   */\n    tag_259:\n        /* \"#utility.yul\":3636:3643   */\n      0x00\n        /* \"#utility.yul\":3676:3718   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3669:3674   */\n      dup3\n        /* \"#utility.yul\":3665:3719   */\n      and\n        /* \"#utility.yul\":3654:3719   */\n      swap1\n      pop\n        /* \"#utility.yul\":3599:3725   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3731:3827   */\n    tag_260:\n        /* \"#utility.yul\":3768:3775   */\n      0x00\n        /* \"#utility.yul\":3797:3821   */\n      tag_332\n        /* \"#utility.yul\":3815:3820   */\n      dup3\n        /* \"#utility.yul\":3797:3821   */\n      tag_259\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":3786:3821   */\n      swap1\n      pop\n        /* \"#utility.yul\":3731:3827   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3833:3951   */\n    tag_261:\n        /* \"#utility.yul\":3920:3944   */\n      tag_334\n        /* \"#utility.yul\":3938:3943   */\n      dup2\n        /* \"#utility.yul\":3920:3944   */\n      tag_260\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":3915:3918   */\n      dup3\n        /* \"#utility.yul\":3908:3945   */\n      mstore\n        /* \"#utility.yul\":3833:3951   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3957:4179   */\n    tag_36:\n        /* \"#utility.yul\":4050:4054   */\n      0x00\n        /* \"#utility.yul\":4088:4090   */\n      0x20\n        /* \"#utility.yul\":4077:4086   */\n      dup3\n        /* \"#utility.yul\":4073:4091   */\n      add\n        /* \"#utility.yul\":4065:4091   */\n      swap1\n      pop\n        /* \"#utility.yul\":4101:4172   */\n      tag_336\n        /* \"#utility.yul\":4169:4170   */\n      0x00\n        /* \"#utility.yul\":4158:4167   */\n      dup4\n        /* \"#utility.yul\":4154:4171   */\n      add\n        /* \"#utility.yul\":4145:4151   */\n      dup5\n        /* \"#utility.yul\":4101:4172   */\n      tag_261\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":3957:4179   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4185:4307   */\n    tag_262:\n        /* \"#utility.yul\":4258:4282   */\n      tag_338\n        /* \"#utility.yul\":4276:4281   */\n      dup2\n        /* \"#utility.yul\":4258:4282   */\n      tag_260\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":4251:4256   */\n      dup2\n        /* \"#utility.yul\":4248:4283   */\n      eq\n        /* \"#utility.yul\":4238:4301   */\n      tag_339\n      jumpi\n        /* \"#utility.yul\":4297:4298   */\n      0x00\n        /* \"#utility.yul\":4294:4295   */\n      dup1\n        /* \"#utility.yul\":4287:4299   */\n      revert\n        /* \"#utility.yul\":4238:4301   */\n    tag_339:\n        /* \"#utility.yul\":4185:4307   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4313:4452   */\n    tag_263:\n        /* \"#utility.yul\":4359:4364   */\n      0x00\n        /* \"#utility.yul\":4397:4403   */\n      dup2\n        /* \"#utility.yul\":4384:4404   */\n      calldataload\n        /* \"#utility.yul\":4375:4404   */\n      swap1\n      pop\n        /* \"#utility.yul\":4413:4446   */\n      tag_341\n        /* \"#utility.yul\":4440:4445   */\n      dup2\n        /* \"#utility.yul\":4413:4446   */\n      tag_262\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":4313:4452   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4458:4932   */\n    tag_39:\n        /* \"#utility.yul\":4526:4532   */\n      0x00\n        /* \"#utility.yul\":4534:4540   */\n      dup1\n        /* \"#utility.yul\":4583:4585   */\n      0x40\n        /* \"#utility.yul\":4571:4580   */\n      dup4\n        /* \"#utility.yul\":4562:4569   */\n      dup6\n        /* \"#utility.yul\":4558:4581   */\n      sub\n        /* \"#utility.yul\":4554:4586   */\n      slt\n        /* \"#utility.yul\":4551:4670   */\n      iszero\n      tag_343\n      jumpi\n        /* \"#utility.yul\":4589:4668   */\n      tag_344\n      tag_244\n      jump\t// in\n    tag_344:\n        /* \"#utility.yul\":4551:4670   */\n    tag_343:\n        /* \"#utility.yul\":4709:4710   */\n      0x00\n        /* \"#utility.yul\":4734:4787   */\n      tag_345\n        /* \"#utility.yul\":4779:4786   */\n      dup6\n        /* \"#utility.yul\":4770:4776   */\n      dup3\n        /* \"#utility.yul\":4759:4768   */\n      dup7\n        /* \"#utility.yul\":4755:4777   */\n      add\n        /* \"#utility.yul\":4734:4787   */\n      tag_263\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":4724:4787   */\n      swap3\n      pop\n        /* \"#utility.yul\":4680:4797   */\n      pop\n        /* \"#utility.yul\":4836:4838   */\n      0x20\n        /* \"#utility.yul\":4862:4915   */\n      tag_346\n        /* \"#utility.yul\":4907:4914   */\n      dup6\n        /* \"#utility.yul\":4898:4904   */\n      dup3\n        /* \"#utility.yul\":4887:4896   */\n      dup7\n        /* \"#utility.yul\":4883:4905   */\n      add\n        /* \"#utility.yul\":4862:4915   */\n      tag_258\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":4852:4915   */\n      swap2\n      pop\n        /* \"#utility.yul\":4807:4925   */\n      pop\n        /* \"#utility.yul\":4458:4932   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4938:5056   */\n    tag_264:\n        /* \"#utility.yul\":5025:5049   */\n      tag_348\n        /* \"#utility.yul\":5043:5048   */\n      dup2\n        /* \"#utility.yul\":5025:5049   */\n      tag_256\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":5020:5023   */\n      dup3\n        /* \"#utility.yul\":5013:5050   */\n      mstore\n        /* \"#utility.yul\":4938:5056   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5062:5284   */\n    tag_44:\n        /* \"#utility.yul\":5155:5159   */\n      0x00\n        /* \"#utility.yul\":5193:5195   */\n      0x20\n        /* \"#utility.yul\":5182:5191   */\n      dup3\n        /* \"#utility.yul\":5178:5196   */\n      add\n        /* \"#utility.yul\":5170:5196   */\n      swap1\n      pop\n        /* \"#utility.yul\":5206:5277   */\n      tag_350\n        /* \"#utility.yul\":5274:5275   */\n      0x00\n        /* \"#utility.yul\":5263:5272   */\n      dup4\n        /* \"#utility.yul\":5259:5276   */\n      add\n        /* \"#utility.yul\":5250:5256   */\n      dup5\n        /* \"#utility.yul\":5206:5277   */\n      tag_264\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":5062:5284   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5290:5909   */\n    tag_47:\n        /* \"#utility.yul\":5367:5373   */\n      0x00\n        /* \"#utility.yul\":5375:5381   */\n      dup1\n        /* \"#utility.yul\":5383:5389   */\n      0x00\n        /* \"#utility.yul\":5432:5434   */\n      0x60\n        /* \"#utility.yul\":5420:5429   */\n      dup5\n        /* \"#utility.yul\":5411:5418   */\n      dup7\n        /* \"#utility.yul\":5407:5430   */\n      sub\n        /* \"#utility.yul\":5403:5435   */\n      slt\n        /* \"#utility.yul\":5400:5519   */\n      iszero\n      tag_352\n      jumpi\n        /* \"#utility.yul\":5438:5517   */\n      tag_353\n      tag_244\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":5400:5519   */\n    tag_352:\n        /* \"#utility.yul\":5558:5559   */\n      0x00\n        /* \"#utility.yul\":5583:5636   */\n      tag_354\n        /* \"#utility.yul\":5628:5635   */\n      dup7\n        /* \"#utility.yul\":5619:5625   */\n      dup3\n        /* \"#utility.yul\":5608:5617   */\n      dup8\n        /* \"#utility.yul\":5604:5626   */\n      add\n        /* \"#utility.yul\":5583:5636   */\n      tag_263\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":5573:5636   */\n      swap4\n      pop\n        /* \"#utility.yul\":5529:5646   */\n      pop\n        /* \"#utility.yul\":5685:5687   */\n      0x20\n        /* \"#utility.yul\":5711:5764   */\n      tag_355\n        /* \"#utility.yul\":5756:5763   */\n      dup7\n        /* \"#utility.yul\":5747:5753   */\n      dup3\n        /* \"#utility.yul\":5736:5745   */\n      dup8\n        /* \"#utility.yul\":5732:5754   */\n      add\n        /* \"#utility.yul\":5711:5764   */\n      tag_263\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":5701:5764   */\n      swap3\n      pop\n        /* \"#utility.yul\":5656:5774   */\n      pop\n        /* \"#utility.yul\":5813:5815   */\n      0x40\n        /* \"#utility.yul\":5839:5892   */\n      tag_356\n        /* \"#utility.yul\":5884:5891   */\n      dup7\n        /* \"#utility.yul\":5875:5881   */\n      dup3\n        /* \"#utility.yul\":5864:5873   */\n      dup8\n        /* \"#utility.yul\":5860:5882   */\n      add\n        /* \"#utility.yul\":5839:5892   */\n      tag_258\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":5829:5892   */\n      swap2\n      pop\n        /* \"#utility.yul\":5784:5902   */\n      pop\n        /* \"#utility.yul\":5290:5909   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":5915:6244   */\n    tag_58:\n        /* \"#utility.yul\":5974:5980   */\n      0x00\n        /* \"#utility.yul\":6023:6025   */\n      0x20\n        /* \"#utility.yul\":6011:6020   */\n      dup3\n        /* \"#utility.yul\":6002:6009   */\n      dup5\n        /* \"#utility.yul\":5998:6021   */\n      sub\n        /* \"#utility.yul\":5994:6026   */\n      slt\n        /* \"#utility.yul\":5991:6110   */\n      iszero\n      tag_358\n      jumpi\n        /* \"#utility.yul\":6029:6108   */\n      tag_359\n      tag_244\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":5991:6110   */\n    tag_358:\n        /* \"#utility.yul\":6149:6150   */\n      0x00\n        /* \"#utility.yul\":6174:6227   */\n      tag_360\n        /* \"#utility.yul\":6219:6226   */\n      dup5\n        /* \"#utility.yul\":6210:6216   */\n      dup3\n        /* \"#utility.yul\":6199:6208   */\n      dup6\n        /* \"#utility.yul\":6195:6217   */\n      add\n        /* \"#utility.yul\":6174:6227   */\n      tag_263\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":6164:6227   */\n      swap2\n      pop\n        /* \"#utility.yul\":6120:6237   */\n      pop\n        /* \"#utility.yul\":5915:6244   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6250:6366   */\n    tag_265:\n        /* \"#utility.yul\":6320:6341   */\n      tag_362\n        /* \"#utility.yul\":6335:6340   */\n      dup2\n        /* \"#utility.yul\":6320:6341   */\n      tag_249\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":6313:6318   */\n      dup2\n        /* \"#utility.yul\":6310:6342   */\n      eq\n        /* \"#utility.yul\":6300:6360   */\n      tag_363\n      jumpi\n        /* \"#utility.yul\":6356:6357   */\n      0x00\n        /* \"#utility.yul\":6353:6354   */\n      dup1\n        /* \"#utility.yul\":6346:6358   */\n      revert\n        /* \"#utility.yul\":6300:6360   */\n    tag_363:\n        /* \"#utility.yul\":6250:6366   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6372:6505   */\n    tag_266:\n        /* \"#utility.yul\":6415:6420   */\n      0x00\n        /* \"#utility.yul\":6453:6459   */\n      dup2\n        /* \"#utility.yul\":6440:6460   */\n      calldataload\n        /* \"#utility.yul\":6431:6460   */\n      swap1\n      pop\n        /* \"#utility.yul\":6469:6499   */\n      tag_365\n        /* \"#utility.yul\":6493:6498   */\n      dup2\n        /* \"#utility.yul\":6469:6499   */\n      tag_265\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":6372:6505   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6511:6979   */\n    tag_66:\n        /* \"#utility.yul\":6576:6582   */\n      0x00\n        /* \"#utility.yul\":6584:6590   */\n      dup1\n        /* \"#utility.yul\":6633:6635   */\n      0x40\n        /* \"#utility.yul\":6621:6630   */\n      dup4\n        /* \"#utility.yul\":6612:6619   */\n      dup6\n        /* \"#utility.yul\":6608:6631   */\n      sub\n        /* \"#utility.yul\":6604:6636   */\n      slt\n        /* \"#utility.yul\":6601:6720   */\n      iszero\n      tag_367\n      jumpi\n        /* \"#utility.yul\":6639:6718   */\n      tag_368\n      tag_244\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":6601:6720   */\n    tag_367:\n        /* \"#utility.yul\":6759:6760   */\n      0x00\n        /* \"#utility.yul\":6784:6837   */\n      tag_369\n        /* \"#utility.yul\":6829:6836   */\n      dup6\n        /* \"#utility.yul\":6820:6826   */\n      dup3\n        /* \"#utility.yul\":6809:6818   */\n      dup7\n        /* \"#utility.yul\":6805:6827   */\n      add\n        /* \"#utility.yul\":6784:6837   */\n      tag_263\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":6774:6837   */\n      swap3\n      pop\n        /* \"#utility.yul\":6730:6847   */\n      pop\n        /* \"#utility.yul\":6886:6888   */\n      0x20\n        /* \"#utility.yul\":6912:6962   */\n      tag_370\n        /* \"#utility.yul\":6954:6961   */\n      dup6\n        /* \"#utility.yul\":6945:6951   */\n      dup3\n        /* \"#utility.yul\":6934:6943   */\n      dup7\n        /* \"#utility.yul\":6930:6952   */\n      add\n        /* \"#utility.yul\":6912:6962   */\n      tag_266\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":6902:6962   */\n      swap2\n      pop\n        /* \"#utility.yul\":6857:6972   */\n      pop\n        /* \"#utility.yul\":6511:6979   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6985:7102   */\n    tag_267:\n        /* \"#utility.yul\":7094:7095   */\n      0x00\n        /* \"#utility.yul\":7091:7092   */\n      dup1\n        /* \"#utility.yul\":7084:7096   */\n      revert\n        /* \"#utility.yul\":7108:7225   */\n    tag_268:\n        /* \"#utility.yul\":7217:7218   */\n      0x00\n        /* \"#utility.yul\":7214:7215   */\n      dup1\n        /* \"#utility.yul\":7207:7219   */\n      revert\n        /* \"#utility.yul\":7231:7411   */\n    tag_227:\n        /* \"#utility.yul\":7279:7356   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7276:7277   */\n      0x00\n        /* \"#utility.yul\":7269:7357   */\n      mstore\n        /* \"#utility.yul\":7376:7380   */\n      0x41\n        /* \"#utility.yul\":7373:7374   */\n      0x04\n        /* \"#utility.yul\":7366:7381   */\n      mstore\n        /* \"#utility.yul\":7400:7404   */\n      0x24\n        /* \"#utility.yul\":7397:7398   */\n      0x00\n        /* \"#utility.yul\":7390:7405   */\n      revert\n        /* \"#utility.yul\":7417:7698   */\n    tag_269:\n        /* \"#utility.yul\":7500:7527   */\n      tag_375\n        /* \"#utility.yul\":7522:7526   */\n      dup3\n        /* \"#utility.yul\":7500:7527   */\n      tag_254\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":7492:7498   */\n      dup2\n        /* \"#utility.yul\":7488:7528   */\n      add\n        /* \"#utility.yul\":7630:7636   */\n      dup2\n        /* \"#utility.yul\":7618:7628   */\n      dup2\n        /* \"#utility.yul\":7615:7637   */\n      lt\n        /* \"#utility.yul\":7594:7612   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7582:7592   */\n      dup3\n        /* \"#utility.yul\":7579:7613   */\n      gt\n        /* \"#utility.yul\":7576:7638   */\n      or\n        /* \"#utility.yul\":7573:7661   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":7641:7659   */\n      tag_377\n      tag_227\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":7573:7661   */\n    tag_376:\n        /* \"#utility.yul\":7681:7691   */\n      dup1\n        /* \"#utility.yul\":7677:7679   */\n      0x40\n        /* \"#utility.yul\":7670:7692   */\n      mstore\n        /* \"#utility.yul\":7460:7698   */\n      pop\n        /* \"#utility.yul\":7417:7698   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7704:7833   */\n    tag_270:\n        /* \"#utility.yul\":7738:7744   */\n      0x00\n        /* \"#utility.yul\":7765:7785   */\n      tag_379\n      tag_243\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":7755:7785   */\n      swap1\n      pop\n        /* \"#utility.yul\":7794:7827   */\n      tag_380\n        /* \"#utility.yul\":7822:7826   */\n      dup3\n        /* \"#utility.yul\":7814:7820   */\n      dup3\n        /* \"#utility.yul\":7794:7827   */\n      tag_269\n      jump\t// in\n    tag_380:\n        /* \"#utility.yul\":7704:7833   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7839:8146   */\n    tag_271:\n        /* \"#utility.yul\":7900:7904   */\n      0x00\n        /* \"#utility.yul\":7990:8008   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7982:7988   */\n      dup3\n        /* \"#utility.yul\":7979:8009   */\n      gt\n        /* \"#utility.yul\":7976:8032   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":8012:8030   */\n      tag_383\n      tag_227\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":7976:8032   */\n    tag_382:\n        /* \"#utility.yul\":8050:8079   */\n      tag_384\n        /* \"#utility.yul\":8072:8078   */\n      dup3\n        /* \"#utility.yul\":8050:8079   */\n      tag_254\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":8042:8079   */\n      swap1\n      pop\n        /* \"#utility.yul\":8134:8138   */\n      0x20\n        /* \"#utility.yul\":8128:8132   */\n      dup2\n        /* \"#utility.yul\":8124:8139   */\n      add\n        /* \"#utility.yul\":8116:8139   */\n      swap1\n      pop\n        /* \"#utility.yul\":7839:8146   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8152:8306   */\n    tag_272:\n        /* \"#utility.yul\":8236:8242   */\n      dup3\n        /* \"#utility.yul\":8231:8234   */\n      dup2\n        /* \"#utility.yul\":8226:8229   */\n      dup4\n        /* \"#utility.yul\":8213:8243   */\n      calldatacopy\n        /* \"#utility.yul\":8298:8299   */\n      0x00\n        /* \"#utility.yul\":8289:8295   */\n      dup4\n        /* \"#utility.yul\":8284:8287   */\n      dup4\n        /* \"#utility.yul\":8280:8296   */\n      add\n        /* \"#utility.yul\":8273:8300   */\n      mstore\n        /* \"#utility.yul\":8152:8306   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8312:8722   */\n    tag_273:\n        /* \"#utility.yul\":8389:8394   */\n      0x00\n        /* \"#utility.yul\":8414:8479   */\n      tag_387\n        /* \"#utility.yul\":8430:8478   */\n      tag_388\n        /* \"#utility.yul\":8471:8477   */\n      dup5\n        /* \"#utility.yul\":8430:8478   */\n      tag_271\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":8414:8479   */\n      tag_270\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":8405:8479   */\n      swap1\n      pop\n        /* \"#utility.yul\":8502:8508   */\n      dup3\n        /* \"#utility.yul\":8495:8500   */\n      dup2\n        /* \"#utility.yul\":8488:8509   */\n      mstore\n        /* \"#utility.yul\":8540:8544   */\n      0x20\n        /* \"#utility.yul\":8533:8538   */\n      dup2\n        /* \"#utility.yul\":8529:8545   */\n      add\n        /* \"#utility.yul\":8578:8581   */\n      dup5\n        /* \"#utility.yul\":8569:8575   */\n      dup5\n        /* \"#utility.yul\":8564:8567   */\n      dup5\n        /* \"#utility.yul\":8560:8576   */\n      add\n        /* \"#utility.yul\":8557:8582   */\n      gt\n        /* \"#utility.yul\":8554:8666   */\n      iszero\n      tag_389\n      jumpi\n        /* \"#utility.yul\":8585:8664   */\n      tag_390\n      tag_268\n      jump\t// in\n    tag_390:\n        /* \"#utility.yul\":8554:8666   */\n    tag_389:\n        /* \"#utility.yul\":8675:8716   */\n      tag_391\n        /* \"#utility.yul\":8709:8715   */\n      dup5\n        /* \"#utility.yul\":8704:8707   */\n      dup3\n        /* \"#utility.yul\":8699:8702   */\n      dup6\n        /* \"#utility.yul\":8675:8716   */\n      tag_272\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":8395:8722   */\n      pop\n        /* \"#utility.yul\":8312:8722   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8741:9079   */\n    tag_274:\n        /* \"#utility.yul\":8796:8801   */\n      0x00\n        /* \"#utility.yul\":8845:8848   */\n      dup3\n        /* \"#utility.yul\":8838:8842   */\n      0x1f\n        /* \"#utility.yul\":8830:8836   */\n      dup4\n        /* \"#utility.yul\":8826:8843   */\n      add\n        /* \"#utility.yul\":8822:8849   */\n      slt\n        /* \"#utility.yul\":8812:8934   */\n      tag_393\n      jumpi\n        /* \"#utility.yul\":8853:8932   */\n      tag_394\n      tag_267\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":8812:8934   */\n    tag_393:\n        /* \"#utility.yul\":8970:8976   */\n      dup2\n        /* \"#utility.yul\":8957:8977   */\n      calldataload\n        /* \"#utility.yul\":8995:9073   */\n      tag_395\n        /* \"#utility.yul\":9069:9072   */\n      dup5\n        /* \"#utility.yul\":9061:9067   */\n      dup3\n        /* \"#utility.yul\":9054:9058   */\n      0x20\n        /* \"#utility.yul\":9046:9052   */\n      dup7\n        /* \"#utility.yul\":9042:9059   */\n      add\n        /* \"#utility.yul\":8995:9073   */\n      tag_273\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":8986:9073   */\n      swap2\n      pop\n        /* \"#utility.yul\":8802:9079   */\n      pop\n        /* \"#utility.yul\":8741:9079   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9085:10028   */\n    tag_70:\n        /* \"#utility.yul\":9180:9186   */\n      0x00\n        /* \"#utility.yul\":9188:9194   */\n      dup1\n        /* \"#utility.yul\":9196:9202   */\n      0x00\n        /* \"#utility.yul\":9204:9210   */\n      dup1\n        /* \"#utility.yul\":9253:9256   */\n      0x80\n        /* \"#utility.yul\":9241:9250   */\n      dup6\n        /* \"#utility.yul\":9232:9239   */\n      dup8\n        /* \"#utility.yul\":9228:9251   */\n      sub\n        /* \"#utility.yul\":9224:9257   */\n      slt\n        /* \"#utility.yul\":9221:9341   */\n      iszero\n      tag_397\n      jumpi\n        /* \"#utility.yul\":9260:9339   */\n      tag_398\n      tag_244\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":9221:9341   */\n    tag_397:\n        /* \"#utility.yul\":9380:9381   */\n      0x00\n        /* \"#utility.yul\":9405:9458   */\n      tag_399\n        /* \"#utility.yul\":9450:9457   */\n      dup8\n        /* \"#utility.yul\":9441:9447   */\n      dup3\n        /* \"#utility.yul\":9430:9439   */\n      dup9\n        /* \"#utility.yul\":9426:9448   */\n      add\n        /* \"#utility.yul\":9405:9458   */\n      tag_263\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":9395:9458   */\n      swap5\n      pop\n        /* \"#utility.yul\":9351:9468   */\n      pop\n        /* \"#utility.yul\":9507:9509   */\n      0x20\n        /* \"#utility.yul\":9533:9586   */\n      tag_400\n        /* \"#utility.yul\":9578:9585   */\n      dup8\n        /* \"#utility.yul\":9569:9575   */\n      dup3\n        /* \"#utility.yul\":9558:9567   */\n      dup9\n        /* \"#utility.yul\":9554:9576   */\n      add\n        /* \"#utility.yul\":9533:9586   */\n      tag_263\n      jump\t// in\n    tag_400:\n        /* \"#utility.yul\":9523:9586   */\n      swap4\n      pop\n        /* \"#utility.yul\":9478:9596   */\n      pop\n        /* \"#utility.yul\":9635:9637   */\n      0x40\n        /* \"#utility.yul\":9661:9714   */\n      tag_401\n        /* \"#utility.yul\":9706:9713   */\n      dup8\n        /* \"#utility.yul\":9697:9703   */\n      dup3\n        /* \"#utility.yul\":9686:9695   */\n      dup9\n        /* \"#utility.yul\":9682:9704   */\n      add\n        /* \"#utility.yul\":9661:9714   */\n      tag_258\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":9651:9714   */\n      swap3\n      pop\n        /* \"#utility.yul\":9606:9724   */\n      pop\n        /* \"#utility.yul\":9791:9793   */\n      0x60\n        /* \"#utility.yul\":9780:9789   */\n      dup6\n        /* \"#utility.yul\":9776:9794   */\n      add\n        /* \"#utility.yul\":9763:9795   */\n      calldataload\n        /* \"#utility.yul\":9822:9840   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9814:9820   */\n      dup2\n        /* \"#utility.yul\":9811:9841   */\n      gt\n        /* \"#utility.yul\":9808:9925   */\n      iszero\n      tag_402\n      jumpi\n        /* \"#utility.yul\":9844:9923   */\n      tag_403\n      tag_245\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":9808:9925   */\n    tag_402:\n        /* \"#utility.yul\":9949:10011   */\n      tag_404\n        /* \"#utility.yul\":10003:10010   */\n      dup8\n        /* \"#utility.yul\":9994:10000   */\n      dup3\n        /* \"#utility.yul\":9983:9992   */\n      dup9\n        /* \"#utility.yul\":9979:10001   */\n      add\n        /* \"#utility.yul\":9949:10011   */\n      tag_274\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":9939:10011   */\n      swap2\n      pop\n        /* \"#utility.yul\":9734:10021   */\n      pop\n        /* \"#utility.yul\":9085:10028   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10034:10508   */\n    tag_81:\n        /* \"#utility.yul\":10102:10108   */\n      0x00\n        /* \"#utility.yul\":10110:10116   */\n      dup1\n        /* \"#utility.yul\":10159:10161   */\n      0x40\n        /* \"#utility.yul\":10147:10156   */\n      dup4\n        /* \"#utility.yul\":10138:10145   */\n      dup6\n        /* \"#utility.yul\":10134:10157   */\n      sub\n        /* \"#utility.yul\":10130:10162   */\n      slt\n        /* \"#utility.yul\":10127:10246   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":10165:10244   */\n      tag_407\n      tag_244\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":10127:10246   */\n    tag_406:\n        /* \"#utility.yul\":10285:10286   */\n      0x00\n        /* \"#utility.yul\":10310:10363   */\n      tag_408\n        /* \"#utility.yul\":10355:10362   */\n      dup6\n        /* \"#utility.yul\":10346:10352   */\n      dup3\n        /* \"#utility.yul\":10335:10344   */\n      dup7\n        /* \"#utility.yul\":10331:10353   */\n      add\n        /* \"#utility.yul\":10310:10363   */\n      tag_263\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":10300:10363   */\n      swap3\n      pop\n        /* \"#utility.yul\":10256:10373   */\n      pop\n        /* \"#utility.yul\":10412:10414   */\n      0x20\n        /* \"#utility.yul\":10438:10491   */\n      tag_409\n        /* \"#utility.yul\":10483:10490   */\n      dup6\n        /* \"#utility.yul\":10474:10480   */\n      dup3\n        /* \"#utility.yul\":10463:10472   */\n      dup7\n        /* \"#utility.yul\":10459:10481   */\n      add\n        /* \"#utility.yul\":10438:10491   */\n      tag_263\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":10428:10491   */\n      swap2\n      pop\n        /* \"#utility.yul\":10383:10501   */\n      pop\n        /* \"#utility.yul\":10034:10508   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10514:10694   */\n    tag_275:\n        /* \"#utility.yul\":10562:10639   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10559:10560   */\n      0x00\n        /* \"#utility.yul\":10552:10640   */\n      mstore\n        /* \"#utility.yul\":10659:10663   */\n      0x22\n        /* \"#utility.yul\":10656:10657   */\n      0x04\n        /* \"#utility.yul\":10649:10664   */\n      mstore\n        /* \"#utility.yul\":10683:10687   */\n      0x24\n        /* \"#utility.yul\":10680:10681   */\n      0x00\n        /* \"#utility.yul\":10673:10688   */\n      revert\n        /* \"#utility.yul\":10700:11020   */\n    tag_91:\n        /* \"#utility.yul\":10744:10750   */\n      0x00\n        /* \"#utility.yul\":10781:10782   */\n      0x02\n        /* \"#utility.yul\":10775:10779   */\n      dup3\n        /* \"#utility.yul\":10771:10783   */\n      div\n        /* \"#utility.yul\":10761:10783   */\n      swap1\n      pop\n        /* \"#utility.yul\":10828:10829   */\n      0x01\n        /* \"#utility.yul\":10822:10826   */\n      dup3\n        /* \"#utility.yul\":10818:10830   */\n      and\n        /* \"#utility.yul\":10849:10867   */\n      dup1\n        /* \"#utility.yul\":10839:10920   */\n      tag_412\n      jumpi\n        /* \"#utility.yul\":10905:10909   */\n      0x7f\n        /* \"#utility.yul\":10897:10903   */\n      dup3\n        /* \"#utility.yul\":10893:10910   */\n      and\n        /* \"#utility.yul\":10883:10910   */\n      swap2\n      pop\n        /* \"#utility.yul\":10839:10920   */\n    tag_412:\n        /* \"#utility.yul\":10967:10969   */\n      0x20\n        /* \"#utility.yul\":10959:10965   */\n      dup3\n        /* \"#utility.yul\":10956:10970   */\n      lt\n        /* \"#utility.yul\":10936:10954   */\n      dup2\n        /* \"#utility.yul\":10933:10971   */\n      eq\n        /* \"#utility.yul\":10930:11014   */\n      iszero\n      tag_413\n      jumpi\n        /* \"#utility.yul\":10986:11004   */\n      tag_414\n      tag_275\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":10930:11014   */\n    tag_413:\n        /* \"#utility.yul\":10751:11020   */\n      pop\n        /* \"#utility.yul\":10700:11020   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11026:11174   */\n    tag_276:\n        /* \"#utility.yul\":11128:11139   */\n      0x00\n        /* \"#utility.yul\":11165:11168   */\n      dup2\n        /* \"#utility.yul\":11150:11168   */\n      swap1\n      pop\n        /* \"#utility.yul\":11026:11174   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11180:11557   */\n    tag_277:\n        /* \"#utility.yul\":11286:11289   */\n      0x00\n        /* \"#utility.yul\":11314:11353   */\n      tag_417\n        /* \"#utility.yul\":11347:11352   */\n      dup3\n        /* \"#utility.yul\":11314:11353   */\n      tag_251\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":11369:11458   */\n      tag_418\n        /* \"#utility.yul\":11451:11457   */\n      dup2\n        /* \"#utility.yul\":11446:11449   */\n      dup6\n        /* \"#utility.yul\":11369:11458   */\n      tag_276\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":11362:11458   */\n      swap4\n      pop\n        /* \"#utility.yul\":11467:11519   */\n      tag_419\n        /* \"#utility.yul\":11512:11518   */\n      dup2\n        /* \"#utility.yul\":11507:11510   */\n      dup6\n        /* \"#utility.yul\":11500:11504   */\n      0x20\n        /* \"#utility.yul\":11493:11498   */\n      dup7\n        /* \"#utility.yul\":11489:11505   */\n      add\n        /* \"#utility.yul\":11467:11519   */\n      tag_253\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":11544:11550   */\n      dup1\n        /* \"#utility.yul\":11539:11542   */\n      dup5\n        /* \"#utility.yul\":11535:11551   */\n      add\n        /* \"#utility.yul\":11528:11551   */\n      swap2\n      pop\n        /* \"#utility.yul\":11290:11557   */\n      pop\n        /* \"#utility.yul\":11180:11557   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11563:11704   */\n    tag_278:\n        /* \"#utility.yul\":11612:11616   */\n      0x00\n        /* \"#utility.yul\":11635:11638   */\n      dup2\n        /* \"#utility.yul\":11627:11638   */\n      swap1\n      pop\n        /* \"#utility.yul\":11658:11661   */\n      dup2\n        /* \"#utility.yul\":11655:11656   */\n      0x00\n        /* \"#utility.yul\":11648:11662   */\n      mstore\n        /* \"#utility.yul\":11692:11696   */\n      0x20\n        /* \"#utility.yul\":11689:11690   */\n      0x00\n        /* \"#utility.yul\":11679:11697   */\n      keccak256\n        /* \"#utility.yul\":11671:11697   */\n      swap1\n      pop\n        /* \"#utility.yul\":11563:11704   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11734:12579   */\n    tag_279:\n        /* \"#utility.yul\":11837:11840   */\n      0x00\n        /* \"#utility.yul\":11874:11879   */\n      dup2\n        /* \"#utility.yul\":11868:11880   */\n      sload\n        /* \"#utility.yul\":11903:11939   */\n      tag_422\n        /* \"#utility.yul\":11929:11938   */\n      dup2\n        /* \"#utility.yul\":11903:11939   */\n      tag_91\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":11955:12044   */\n      tag_423\n        /* \"#utility.yul\":12037:12043   */\n      dup2\n        /* \"#utility.yul\":12032:12035   */\n      dup7\n        /* \"#utility.yul\":11955:12044   */\n      tag_276\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":11948:12044   */\n      swap5\n      pop\n        /* \"#utility.yul\":12075:12076   */\n      0x01\n        /* \"#utility.yul\":12064:12073   */\n      dup3\n        /* \"#utility.yul\":12060:12077   */\n      and\n        /* \"#utility.yul\":12091:12092   */\n      0x00\n        /* \"#utility.yul\":12086:12223   */\n      dup2\n      eq\n      tag_425\n      jumpi\n        /* \"#utility.yul\":12237:12238   */\n      0x01\n        /* \"#utility.yul\":12232:12573   */\n      dup2\n      eq\n      tag_426\n      jumpi\n        /* \"#utility.yul\":12053:12573   */\n      jump(tag_424)\n        /* \"#utility.yul\":12086:12223   */\n    tag_425:\n        /* \"#utility.yul\":12170:12174   */\n      0xff\n        /* \"#utility.yul\":12166:12175   */\n      not\n        /* \"#utility.yul\":12155:12164   */\n      dup4\n        /* \"#utility.yul\":12151:12176   */\n      and\n        /* \"#utility.yul\":12146:12149   */\n      dup7\n        /* \"#utility.yul\":12139:12177   */\n      mstore\n        /* \"#utility.yul\":12206:12212   */\n      dup2\n        /* \"#utility.yul\":12201:12204   */\n      dup7\n        /* \"#utility.yul\":12197:12213   */\n      add\n        /* \"#utility.yul\":12190:12213   */\n      swap4\n      pop\n        /* \"#utility.yul\":12086:12223   */\n      jump(tag_424)\n        /* \"#utility.yul\":12232:12573   */\n    tag_426:\n        /* \"#utility.yul\":12299:12337   */\n      tag_427\n        /* \"#utility.yul\":12331:12336   */\n      dup6\n        /* \"#utility.yul\":12299:12337   */\n      tag_278\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":12359:12360   */\n      0x00\n        /* \"#utility.yul\":12373:12527   */\n    tag_428:\n        /* \"#utility.yul\":12387:12393   */\n      dup4\n        /* \"#utility.yul\":12384:12385   */\n      dup2\n        /* \"#utility.yul\":12381:12394   */\n      lt\n        /* \"#utility.yul\":12373:12527   */\n      iszero\n      tag_430\n      jumpi\n        /* \"#utility.yul\":12461:12468   */\n      dup2\n        /* \"#utility.yul\":12455:12469   */\n      sload\n        /* \"#utility.yul\":12451:12452   */\n      dup2\n        /* \"#utility.yul\":12446:12449   */\n      dup10\n        /* \"#utility.yul\":12442:12453   */\n      add\n        /* \"#utility.yul\":12435:12470   */\n      mstore\n        /* \"#utility.yul\":12511:12512   */\n      0x01\n        /* \"#utility.yul\":12502:12509   */\n      dup3\n        /* \"#utility.yul\":12498:12513   */\n      add\n        /* \"#utility.yul\":12487:12513   */\n      swap2\n      pop\n        /* \"#utility.yul\":12409:12413   */\n      0x20\n        /* \"#utility.yul\":12406:12407   */\n      dup2\n        /* \"#utility.yul\":12402:12414   */\n      add\n        /* \"#utility.yul\":12397:12414   */\n      swap1\n      pop\n        /* \"#utility.yul\":12373:12527   */\n      jump(tag_428)\n    tag_430:\n        /* \"#utility.yul\":12556:12562   */\n      dup4\n        /* \"#utility.yul\":12551:12554   */\n      dup9\n        /* \"#utility.yul\":12547:12563   */\n      add\n        /* \"#utility.yul\":12540:12563   */\n      swap6\n      pop\n        /* \"#utility.yul\":12239:12573   */\n      pop\n      pop\n        /* \"#utility.yul\":12053:12573   */\n    tag_424:\n      pop\n        /* \"#utility.yul\":11841:12579   */\n      pop\n      pop\n        /* \"#utility.yul\":11734:12579   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12585:13174   */\n    tag_159:\n        /* \"#utility.yul\":12810:12813   */\n      0x00\n        /* \"#utility.yul\":12832:12927   */\n      tag_432\n        /* \"#utility.yul\":12923:12926   */\n      dup3\n        /* \"#utility.yul\":12914:12920   */\n      dup7\n        /* \"#utility.yul\":12832:12927   */\n      tag_277\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":12825:12927   */\n      swap2\n      pop\n        /* \"#utility.yul\":12944:13039   */\n      tag_433\n        /* \"#utility.yul\":13035:13038   */\n      dup3\n        /* \"#utility.yul\":13026:13032   */\n      dup6\n        /* \"#utility.yul\":12944:13039   */\n      tag_277\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":12937:13039   */\n      swap2\n      pop\n        /* \"#utility.yul\":13056:13148   */\n      tag_434\n        /* \"#utility.yul\":13144:13147   */\n      dup3\n        /* \"#utility.yul\":13135:13141   */\n      dup5\n        /* \"#utility.yul\":13056:13148   */\n      tag_279\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":13049:13148   */\n      swap2\n      pop\n        /* \"#utility.yul\":13165:13168   */\n      dup2\n        /* \"#utility.yul\":13158:13168   */\n      swap1\n      pop\n        /* \"#utility.yul\":12585:13174   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13180:13278   */\n    tag_280:\n        /* \"#utility.yul\":13231:13237   */\n      0x00\n        /* \"#utility.yul\":13265:13270   */\n      dup2\n        /* \"#utility.yul\":13259:13271   */\n      mload\n        /* \"#utility.yul\":13249:13271   */\n      swap1\n      pop\n        /* \"#utility.yul\":13180:13278   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13284:13452   */\n    tag_281:\n        /* \"#utility.yul\":13367:13378   */\n      0x00\n        /* \"#utility.yul\":13401:13407   */\n      dup3\n        /* \"#utility.yul\":13396:13399   */\n      dup3\n        /* \"#utility.yul\":13389:13408   */\n      mstore\n        /* \"#utility.yul\":13441:13445   */\n      0x20\n        /* \"#utility.yul\":13436:13439   */\n      dup3\n        /* \"#utility.yul\":13432:13446   */\n      add\n        /* \"#utility.yul\":13417:13446   */\n      swap1\n      pop\n        /* \"#utility.yul\":13284:13452   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13458:13818   */\n    tag_282:\n        /* \"#utility.yul\":13544:13547   */\n      0x00\n        /* \"#utility.yul\":13572:13610   */\n      tag_438\n        /* \"#utility.yul\":13604:13609   */\n      dup3\n        /* \"#utility.yul\":13572:13610   */\n      tag_280\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":13626:13696   */\n      tag_439\n        /* \"#utility.yul\":13689:13695   */\n      dup2\n        /* \"#utility.yul\":13684:13687   */\n      dup6\n        /* \"#utility.yul\":13626:13696   */\n      tag_281\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":13619:13696   */\n      swap4\n      pop\n        /* \"#utility.yul\":13705:13757   */\n      tag_440\n        /* \"#utility.yul\":13750:13756   */\n      dup2\n        /* \"#utility.yul\":13745:13748   */\n      dup6\n        /* \"#utility.yul\":13738:13742   */\n      0x20\n        /* \"#utility.yul\":13731:13736   */\n      dup7\n        /* \"#utility.yul\":13727:13743   */\n      add\n        /* \"#utility.yul\":13705:13757   */\n      tag_253\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":13782:13811   */\n      tag_441\n        /* \"#utility.yul\":13804:13810   */\n      dup2\n        /* \"#utility.yul\":13782:13811   */\n      tag_254\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":13777:13780   */\n      dup5\n        /* \"#utility.yul\":13773:13812   */\n      add\n        /* \"#utility.yul\":13766:13812   */\n      swap2\n      pop\n        /* \"#utility.yul\":13548:13818   */\n      pop\n        /* \"#utility.yul\":13458:13818   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13824:14464   */\n    tag_203:\n        /* \"#utility.yul\":14019:14023   */\n      0x00\n        /* \"#utility.yul\":14057:14060   */\n      0x80\n        /* \"#utility.yul\":14046:14055   */\n      dup3\n        /* \"#utility.yul\":14042:14061   */\n      add\n        /* \"#utility.yul\":14034:14061   */\n      swap1\n      pop\n        /* \"#utility.yul\":14071:14142   */\n      tag_443\n        /* \"#utility.yul\":14139:14140   */\n      0x00\n        /* \"#utility.yul\":14128:14137   */\n      dup4\n        /* \"#utility.yul\":14124:14141   */\n      add\n        /* \"#utility.yul\":14115:14121   */\n      dup8\n        /* \"#utility.yul\":14071:14142   */\n      tag_261\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":14152:14224   */\n      tag_444\n        /* \"#utility.yul\":14220:14222   */\n      0x20\n        /* \"#utility.yul\":14209:14218   */\n      dup4\n        /* \"#utility.yul\":14205:14223   */\n      add\n        /* \"#utility.yul\":14196:14202   */\n      dup7\n        /* \"#utility.yul\":14152:14224   */\n      tag_261\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":14234:14306   */\n      tag_445\n        /* \"#utility.yul\":14302:14304   */\n      0x40\n        /* \"#utility.yul\":14291:14300   */\n      dup4\n        /* \"#utility.yul\":14287:14305   */\n      add\n        /* \"#utility.yul\":14278:14284   */\n      dup6\n        /* \"#utility.yul\":14234:14306   */\n      tag_264\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":14353:14362   */\n      dup2\n        /* \"#utility.yul\":14347:14351   */\n      dup2\n        /* \"#utility.yul\":14343:14363   */\n      sub\n        /* \"#utility.yul\":14338:14340   */\n      0x60\n        /* \"#utility.yul\":14327:14336   */\n      dup4\n        /* \"#utility.yul\":14323:14341   */\n      add\n        /* \"#utility.yul\":14316:14364   */\n      mstore\n        /* \"#utility.yul\":14381:14457   */\n      tag_446\n        /* \"#utility.yul\":14452:14456   */\n      dup2\n        /* \"#utility.yul\":14443:14449   */\n      dup5\n        /* \"#utility.yul\":14381:14457   */\n      tag_282\n      jump\t// in\n    tag_446:\n        /* \"#utility.yul\":14373:14457   */\n      swap1\n      pop\n        /* \"#utility.yul\":13824:14464   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14470:14611   */\n    tag_283:\n        /* \"#utility.yul\":14526:14531   */\n      0x00\n        /* \"#utility.yul\":14557:14563   */\n      dup2\n        /* \"#utility.yul\":14551:14564   */\n      mload\n        /* \"#utility.yul\":14542:14564   */\n      swap1\n      pop\n        /* \"#utility.yul\":14573:14605   */\n      tag_448\n        /* \"#utility.yul\":14599:14604   */\n      dup2\n        /* \"#utility.yul\":14573:14605   */\n      tag_247\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":14470:14611   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14617:14966   */\n    tag_206:\n        /* \"#utility.yul\":14686:14692   */\n      0x00\n        /* \"#utility.yul\":14735:14737   */\n      0x20\n        /* \"#utility.yul\":14723:14732   */\n      dup3\n        /* \"#utility.yul\":14714:14721   */\n      dup5\n        /* \"#utility.yul\":14710:14733   */\n      sub\n        /* \"#utility.yul\":14706:14738   */\n      slt\n        /* \"#utility.yul\":14703:14822   */\n      iszero\n      tag_450\n      jumpi\n        /* \"#utility.yul\":14741:14820   */\n      tag_451\n      tag_244\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":14703:14822   */\n    tag_450:\n        /* \"#utility.yul\":14861:14862   */\n      0x00\n        /* \"#utility.yul\":14886:14949   */\n      tag_452\n        /* \"#utility.yul\":14941:14948   */\n      dup5\n        /* \"#utility.yul\":14932:14938   */\n      dup3\n        /* \"#utility.yul\":14921:14930   */\n      dup6\n        /* \"#utility.yul\":14917:14939   */\n      add\n        /* \"#utility.yul\":14886:14949   */\n      tag_283\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":14876:14949   */\n      swap2\n      pop\n        /* \"#utility.yul\":14832:14959   */\n      pop\n        /* \"#utility.yul\":14617:14966   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14972:15152   */\n    tag_284:\n        /* \"#utility.yul\":15020:15097   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15017:15018   */\n      0x00\n        /* \"#utility.yul\":15010:15098   */\n      mstore\n        /* \"#utility.yul\":15117:15121   */\n      0x11\n        /* \"#utility.yul\":15114:15115   */\n      0x04\n        /* \"#utility.yul\":15107:15122   */\n      mstore\n        /* \"#utility.yul\":15141:15145   */\n      0x24\n        /* \"#utility.yul\":15138:15139   */\n      0x00\n        /* \"#utility.yul\":15131:15146   */\n      revert\n        /* \"#utility.yul\":15158:15391   */\n    tag_222:\n        /* \"#utility.yul\":15197:15200   */\n      0x00\n        /* \"#utility.yul\":15220:15244   */\n      tag_455\n        /* \"#utility.yul\":15238:15243   */\n      dup3\n        /* \"#utility.yul\":15220:15244   */\n      tag_256\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":15211:15244   */\n      swap2\n      pop\n        /* \"#utility.yul\":15266:15332   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":15259:15264   */\n      dup3\n        /* \"#utility.yul\":15256:15333   */\n      eq\n        /* \"#utility.yul\":15253:15356   */\n      iszero\n      tag_456\n      jumpi\n        /* \"#utility.yul\":15336:15354   */\n      tag_457\n      tag_284\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":15253:15356   */\n    tag_456:\n        /* \"#utility.yul\":15383:15384   */\n      0x01\n        /* \"#utility.yul\":15376:15381   */\n      dup3\n        /* \"#utility.yul\":15372:15385   */\n      add\n        /* \"#utility.yul\":15365:15385   */\n      swap1\n      pop\n        /* \"#utility.yul\":15158:15391   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15397:15577   */\n    tag_285:\n        /* \"#utility.yul\":15445:15522   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15442:15443   */\n      0x00\n        /* \"#utility.yul\":15435:15523   */\n      mstore\n        /* \"#utility.yul\":15542:15546   */\n      0x12\n        /* \"#utility.yul\":15539:15540   */\n      0x04\n        /* \"#utility.yul\":15532:15547   */\n      mstore\n        /* \"#utility.yul\":15566:15570   */\n      0x24\n        /* \"#utility.yul\":15563:15564   */\n      0x00\n        /* \"#utility.yul\":15556:15571   */\n      revert\n        /* \"#utility.yul\":15583:15768   */\n    tag_224:\n        /* \"#utility.yul\":15623:15624   */\n      0x00\n        /* \"#utility.yul\":15640:15660   */\n      tag_460\n        /* \"#utility.yul\":15658:15659   */\n      dup3\n        /* \"#utility.yul\":15640:15660   */\n      tag_256\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":15635:15660   */\n      swap2\n      pop\n        /* \"#utility.yul\":15674:15694   */\n      tag_461\n        /* \"#utility.yul\":15692:15693   */\n      dup4\n        /* \"#utility.yul\":15674:15694   */\n      tag_256\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":15669:15694   */\n      swap3\n      pop\n        /* \"#utility.yul\":15713:15714   */\n      dup3\n        /* \"#utility.yul\":15703:15738   */\n      tag_462\n      jumpi\n        /* \"#utility.yul\":15718:15736   */\n      tag_463\n      tag_285\n      jump\t// in\n    tag_463:\n        /* \"#utility.yul\":15703:15738   */\n    tag_462:\n        /* \"#utility.yul\":15760:15761   */\n      dup3\n        /* \"#utility.yul\":15757:15758   */\n      dup3\n        /* \"#utility.yul\":15753:15762   */\n      div\n        /* \"#utility.yul\":15748:15762   */\n      swap1\n      pop\n        /* \"#utility.yul\":15583:15768   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15774:15965   */\n    tag_232:\n        /* \"#utility.yul\":15814:15818   */\n      0x00\n        /* \"#utility.yul\":15834:15854   */\n      tag_465\n        /* \"#utility.yul\":15852:15853   */\n      dup3\n        /* \"#utility.yul\":15834:15854   */\n      tag_256\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":15829:15854   */\n      swap2\n      pop\n        /* \"#utility.yul\":15868:15888   */\n      tag_466\n        /* \"#utility.yul\":15886:15887   */\n      dup4\n        /* \"#utility.yul\":15868:15888   */\n      tag_256\n      jump\t// in\n    tag_466:\n        /* \"#utility.yul\":15863:15888   */\n      swap3\n      pop\n        /* \"#utility.yul\":15907:15908   */\n      dup3\n        /* \"#utility.yul\":15904:15905   */\n      dup3\n        /* \"#utility.yul\":15901:15909   */\n      lt\n        /* \"#utility.yul\":15898:15932   */\n      iszero\n      tag_467\n      jumpi\n        /* \"#utility.yul\":15912:15930   */\n      tag_468\n      tag_284\n      jump\t// in\n    tag_468:\n        /* \"#utility.yul\":15898:15932   */\n    tag_467:\n        /* \"#utility.yul\":15957:15958   */\n      dup3\n        /* \"#utility.yul\":15954:15955   */\n      dup3\n        /* \"#utility.yul\":15950:15959   */\n      sub\n        /* \"#utility.yul\":15942:15959   */\n      swap1\n      pop\n        /* \"#utility.yul\":15774:15965   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15971:16147   */\n    tag_234:\n        /* \"#utility.yul\":16003:16004   */\n      0x00\n        /* \"#utility.yul\":16020:16040   */\n      tag_470\n        /* \"#utility.yul\":16038:16039   */\n      dup3\n        /* \"#utility.yul\":16020:16040   */\n      tag_256\n      jump\t// in\n    tag_470:\n        /* \"#utility.yul\":16015:16040   */\n      swap2\n      pop\n        /* \"#utility.yul\":16054:16074   */\n      tag_471\n        /* \"#utility.yul\":16072:16073   */\n      dup4\n        /* \"#utility.yul\":16054:16074   */\n      tag_256\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":16049:16074   */\n      swap3\n      pop\n        /* \"#utility.yul\":16093:16094   */\n      dup3\n        /* \"#utility.yul\":16083:16118   */\n      tag_472\n      jumpi\n        /* \"#utility.yul\":16098:16116   */\n      tag_473\n      tag_285\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":16083:16118   */\n    tag_472:\n        /* \"#utility.yul\":16139:16140   */\n      dup3\n        /* \"#utility.yul\":16136:16137   */\n      dup3\n        /* \"#utility.yul\":16132:16141   */\n      mod\n        /* \"#utility.yul\":16127:16141   */\n      swap1\n      pop\n        /* \"#utility.yul\":15971:16147   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16153:16458   */\n    tag_236:\n        /* \"#utility.yul\":16193:16196   */\n      0x00\n        /* \"#utility.yul\":16212:16232   */\n      tag_475\n        /* \"#utility.yul\":16230:16231   */\n      dup3\n        /* \"#utility.yul\":16212:16232   */\n      tag_256\n      jump\t// in\n    tag_475:\n        /* \"#utility.yul\":16207:16232   */\n      swap2\n      pop\n        /* \"#utility.yul\":16246:16266   */\n      tag_476\n        /* \"#utility.yul\":16264:16265   */\n      dup4\n        /* \"#utility.yul\":16246:16266   */\n      tag_256\n      jump\t// in\n    tag_476:\n        /* \"#utility.yul\":16241:16266   */\n      swap3\n      pop\n        /* \"#utility.yul\":16400:16401   */\n      dup3\n        /* \"#utility.yul\":16332:16398   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":16328:16402   */\n      sub\n        /* \"#utility.yul\":16325:16326   */\n      dup3\n        /* \"#utility.yul\":16322:16403   */\n      gt\n        /* \"#utility.yul\":16319:16426   */\n      iszero\n      tag_477\n      jumpi\n        /* \"#utility.yul\":16406:16424   */\n      tag_478\n      tag_284\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":16319:16426   */\n    tag_477:\n        /* \"#utility.yul\":16450:16451   */\n      dup3\n        /* \"#utility.yul\":16447:16448   */\n      dup3\n        /* \"#utility.yul\":16443:16452   */\n      add\n        /* \"#utility.yul\":16436:16452   */\n      swap1\n      pop\n        /* \"#utility.yul\":16153:16458   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16464:16644   */\n    tag_239:\n        /* \"#utility.yul\":16512:16589   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":16509:16510   */\n      0x00\n        /* \"#utility.yul\":16502:16590   */\n      mstore\n        /* \"#utility.yul\":16609:16613   */\n      0x32\n        /* \"#utility.yul\":16606:16607   */\n      0x04\n        /* \"#utility.yul\":16599:16614   */\n      mstore\n        /* \"#utility.yul\":16633:16637   */\n      0x24\n        /* \"#utility.yul\":16630:16631   */\n      0x00\n        /* \"#utility.yul\":16623:16638   */\n      revert\n\n    auxdata: 0xa2646970667358221220ee26ce2ba2811328e70784f0efd89385d8c801408e36156045398542c65e791f64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_812": {
									"entryPoint": null,
									"id": 812,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_startTokenId_821": {
									"entryPoint": 213,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_string_memory_ptr_fromMemory": {
									"entryPoint": 681,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr_fromMemory": {
									"entryPoint": 756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 807,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_memory": {
									"entryPoint": 542,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 394,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 573,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 627,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 987,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 488,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 940,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 441,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 414,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 419,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 409,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 404,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 424,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4093:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "423:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "546:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "563:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "566:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "556:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "556:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "556:12:10"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "457:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "628:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "638:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "656:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "663:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "652:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "652:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "672:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "668:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "668:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "648:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "638:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "611:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "621:6:10",
														"type": ""
													}
												],
												"src": "580:102:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "716:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "733:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "736:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "726:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "726:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "726:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "830:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "833:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "823:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "823:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "823:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "854:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "857:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "847:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "847:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "847:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "688:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "917:238:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "927:58:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "949:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "979:4:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "957:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "957:27:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "945:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "945:40:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "931:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1096:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1098:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1098:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1098:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1039:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1051:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1036:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1036:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1075:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1087:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1072:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1072:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1033:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1033:62:10"
															},
															"nodeType": "YulIf",
															"src": "1030:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1134:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1138:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1127:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1127:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1127:22:10"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "903:6:10",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "911:4:10",
														"type": ""
													}
												],
												"src": "874:281:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:88:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1212:30:10",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1222:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1222:20:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1212:6:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1271:6:10"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1279:4:10"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1251:19:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1251:33:10"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1186:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1195:6:10",
														"type": ""
													}
												],
												"src": "1161:129:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1363:241:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1468:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1470:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1470:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1470:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1440:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1437:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1437:30:10"
															},
															"nodeType": "YulIf",
															"src": "1434:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1500:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1530:6:10"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "1508:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1508:29:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1500:4:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1574:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1586:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1592:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1582:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:15:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1574:4:10"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1347:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1358:4:10",
														"type": ""
													}
												],
												"src": "1296:308:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1659:258:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1669:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1678:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1673:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1738:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1763:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1768:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1759:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1759:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1782:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1787:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1778:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1778:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1772:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1772:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1752:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1752:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1752:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1699:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1702:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1696:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1696:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1710:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1712:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1721:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1724:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1717:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1717:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1712:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1692:3:10",
																"statements": []
															},
															"src": "1688:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1835:76:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1885:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "1890:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1881:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1881:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1874:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1874:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1816:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1819:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1813:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1813:13:10"
															},
															"nodeType": "YulIf",
															"src": "1810:101:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1641:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1646:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1651:6:10",
														"type": ""
													}
												],
												"src": "1610:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2018:326:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2028:75:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2095:6:10"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2053:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2053:49:10"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2037:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2037:66:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2028:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2119:5:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2126:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2112:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2112:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2112:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2142:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2157:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2164:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2153:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2153:16:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2146:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2207:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "2209:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2209:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2209:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "2188:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2193:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2184:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2184:16:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2202:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2181:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2181:25:10"
															},
															"nodeType": "YulIf",
															"src": "2178:112:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2321:3:10"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2326:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2331:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2299:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2299:39:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2299:39:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1991:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1996:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2004:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2012:5:10",
														"type": ""
													}
												],
												"src": "1923:421:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2437:282:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2486:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "2488:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2488:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2488:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2465:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2473:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2461:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2461:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "2480:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2457:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2457:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2450:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2450:35:10"
															},
															"nodeType": "YulIf",
															"src": "2447:122:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2578:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2598:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2592:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2592:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2582:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2614:99:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2686:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2694:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2682:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2682:17:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2701:6:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2709:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2623:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2623:90:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2614:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2415:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2423:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2431:5:10",
														"type": ""
													}
												],
												"src": "2364:355:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2839:739:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2885:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2887:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2860:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2869:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2856:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2856:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2881:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2852:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2852:32:10"
															},
															"nodeType": "YulIf",
															"src": "2849:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2978:291:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2993:38:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3017:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3028:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3013:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3013:17:10"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3007:5:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3007:24:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2997:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3078:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3080:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3080:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3080:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3050:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3058:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3047:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3047:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "3044:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3175:84:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3231:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3242:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3227:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3227:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3251:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3185:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3185:74:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3175:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3279:292:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3294:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3318:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3329:2:10",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3314:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3314:18:10"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3308:5:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3308:25:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3298:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3380:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3382:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3382:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3382:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3352:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3360:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3349:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3349:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "3346:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3477:84:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3533:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3544:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3529:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3529:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3553:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3487:41:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3487:74:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3477:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2801:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2812:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2824:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2832:6:10",
														"type": ""
													}
												],
												"src": "2725:853:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3612:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3629:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3632:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3622:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3622:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3726:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3729:4:10",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3719:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3719:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3719:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3750:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3753:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3743:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3743:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3743:15:10"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "3584:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3821:269:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3831:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3845:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3851:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3841:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "3831:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3862:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3892:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3898:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3888:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3888:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "3866:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3939:51:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3953:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "3967:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3975:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "3963:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3963:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3953:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "3919:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3912:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3912:26:10"
															},
															"nodeType": "YulIf",
															"src": "3909:81:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4042:42:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "4056:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4056:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4056:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4006:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4029:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4037:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4026:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4026:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4003:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4003:38:10"
															},
															"nodeType": "YulIf",
															"src": "4000:84:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3805:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3814:6:10",
														"type": ""
													}
												],
												"src": "3770:320:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040526040518060400160405280600581526020017f2e6a736f6e0000000000000000000000000000000000000000000000000000008152506004908051906020019062000051929190620000da565b503480156200005f57600080fd5b506040516200259a3803806200259a833981810160405281019062000085919062000327565b81600290805190602001906200009d929190620000da565b508060039080519060200190620000b6929190620000da565b50620000c7620000d560201b60201c565b600081905550505062000411565b600090565b828054620000e890620003db565b90600052602060002090601f0160209004810192826200010c576000855562000158565b82601f106200012757805160ff191683800117855562000158565b8280016001018555821562000158579182015b82811115620001575782518255916020019190600101906200013a565b5b5090506200016791906200016b565b5090565b5b80821115620001865760008160009055506001016200016c565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f382620001a8565b810181811067ffffffffffffffff82111715620002155762000214620001b9565b5b80604052505050565b60006200022a6200018a565b9050620002388282620001e8565b919050565b600067ffffffffffffffff8211156200025b576200025a620001b9565b5b6200026682620001a8565b9050602081019050919050565b60005b838110156200029357808201518184015260208101905062000276565b83811115620002a3576000848401525b50505050565b6000620002c0620002ba846200023d565b6200021e565b905082815260208101848484011115620002df57620002de620001a3565b5b620002ec84828562000273565b509392505050565b600082601f8301126200030c576200030b6200019e565b5b81516200031e848260208601620002a9565b91505092915050565b6000806040838503121562000341576200034062000194565b5b600083015167ffffffffffffffff81111562000362576200036162000199565b5b6200037085828601620002f4565b925050602083015167ffffffffffffffff81111562000394576200039362000199565b5b620003a285828601620002f4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003f457607f821691505b602082108114156200040b576200040a620003ac565b5b50919050565b61217980620004216000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063b88d4fde11610066578063b88d4fde14610284578063c6682862146102a0578063c87b56dd146102be578063e985e9c5146102ee576100f5565b80636352211e146101ea57806370a082311461021a57806395d89b411461024a578063a22cb46514610268576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806318160ddd1461019457806323b872dd146101b257806342842e0e146101ce576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f91906117e5565b61031e565b604051610121919061182d565b60405180910390f35b610132610400565b60405161013f91906118e1565b60405180910390f35b610162600480360381019061015d9190611939565b610492565b60405161016f91906119a7565b60405180910390f35b610192600480360381019061018d91906119ee565b61050e565b005b61019c610613565b6040516101a99190611a3d565b60405180910390f35b6101cc60048036038101906101c79190611a58565b61062a565b005b6101e860048036038101906101e39190611a58565b61063a565b005b61020460048036038101906101ff9190611939565b61065a565b60405161021191906119a7565b60405180910390f35b610234600480360381019061022f9190611aab565b610670565b6040516102419190611a3d565b60405180910390f35b610252610740565b60405161025f91906118e1565b60405180910390f35b610282600480360381019061027d9190611b04565b6107d2565b005b61029e60048036038101906102999190611c79565b61094a565b005b6102a86109c2565b6040516102b591906118e1565b60405180910390f35b6102d860048036038101906102d39190611939565b610a50565b6040516102e591906118e1565b60405180910390f35b61030860048036038101906103039190611cfc565b610af2565b604051610315919061182d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103f957506103f882610b86565b5b9050919050565b60606002805461040f90611d6b565b80601f016020809104026020016040519081016040528092919081815260200182805461043b90611d6b565b80156104885780601f1061045d57610100808354040283529160200191610488565b820191906000526020600020905b81548152906001019060200180831161046b57829003601f168201915b5050505050905090565b600061049d82610bf0565b6104d3576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105198261065a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610581576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105a0610c3e565b73ffffffffffffffffffffffffffffffffffffffff1614610603576105cc816105c7610c3e565b610af2565b610602576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61060e838383610c46565b505050565b600061061d610cf8565b6001546000540303905090565b610635838383610cfd565b505050565b6106558383836040518060200160405280600081525061094a565b505050565b6000610665826111b3565b600001519050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106d8576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60606003805461074f90611d6b565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90611d6b565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b5050505050905090565b6107da610c3e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561083f576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806008600061084c610c3e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108f9610c3e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161093e919061182d565b60405180910390a35050565b610955848484610cfd565b6109748373ffffffffffffffffffffffffffffffffffffffff1661143e565b156109bc5761098584848484611461565b6109bb576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600480546109cf90611d6b565b80601f01602080910402602001604051908101604052809291908181526020018280546109fb90611d6b565b8015610a485780601f10610a1d57610100808354040283529160200191610a48565b820191906000526020600020905b815481529060010190602001808311610a2b57829003601f168201915b505050505081565b6060610a5b82610bf0565b610a91576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a9b6115b2565b9050600081511415610abc5760405180602001604052806000815250610aea565b80610ac6846115c9565b6004604051602001610ada93929190611e6d565b6040516020818303038152906040525b915050919050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081610bfb610cf8565b11158015610c0a575060005482105b8015610c37575060056000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600090565b6000610d08826111b3565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610d73576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16610d94610c3e565b73ffffffffffffffffffffffffffffffffffffffff161480610dc35750610dc285610dbd610c3e565b610af2565b5b80610e085750610dd1610c3e565b73ffffffffffffffffffffffffffffffffffffffff16610df084610492565b73ffffffffffffffffffffffffffffffffffffffff16145b905080610e41576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ea8576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610eb5858585600161172a565b610ec160008487610c46565b6001600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600560008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600560008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561114157600054821461114057878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111ac8585856001611730565b5050505050565b6111bb611736565b6000829050806111c9610cf8565b1161140757600054811015611406576000600560008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050806040015161140457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146112e8578092505050611439565b5b60011561140357818060019003925050600560008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146113fe578092505050611439565b6112e9565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611487610c3e565b8786866040518563ffffffff1660e01b81526004016114a99493929190611ef3565b6020604051808303816000875af19250505080156114e557506040513d601f19601f820116820180604052508101906114e29190611f54565b60015b61155f573d8060008114611515576040519150601f19603f3d011682016040523d82523d6000602084013e61151a565b606091505b50600081511415611557576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052806000815250905090565b60606000821415611611576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611725565b600082905060005b6000821461164357808061162c90611fb0565b915050600a8261163c9190612028565b9150611619565b60008167ffffffffffffffff81111561165f5761165e611b4e565b5b6040519080825280601f01601f1916602001820160405280156116915781602001600182028036833780820191505090505b5090505b6000851461171e576001826116aa9190612059565b9150600a856116b9919061208d565b60306116c591906120be565b60f81b8183815181106116db576116da612114565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117179190612028565b9450611695565b8093505050505b919050565b50505050565b50505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117c28161178d565b81146117cd57600080fd5b50565b6000813590506117df816117b9565b92915050565b6000602082840312156117fb576117fa611783565b5b6000611809848285016117d0565b91505092915050565b60008115159050919050565b61182781611812565b82525050565b6000602082019050611842600083018461181e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611882578082015181840152602081019050611867565b83811115611891576000848401525b50505050565b6000601f19601f8301169050919050565b60006118b382611848565b6118bd8185611853565b93506118cd818560208601611864565b6118d681611897565b840191505092915050565b600060208201905081810360008301526118fb81846118a8565b905092915050565b6000819050919050565b61191681611903565b811461192157600080fd5b50565b6000813590506119338161190d565b92915050565b60006020828403121561194f5761194e611783565b5b600061195d84828501611924565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199182611966565b9050919050565b6119a181611986565b82525050565b60006020820190506119bc6000830184611998565b92915050565b6119cb81611986565b81146119d657600080fd5b50565b6000813590506119e8816119c2565b92915050565b60008060408385031215611a0557611a04611783565b5b6000611a13858286016119d9565b9250506020611a2485828601611924565b9150509250929050565b611a3781611903565b82525050565b6000602082019050611a526000830184611a2e565b92915050565b600080600060608486031215611a7157611a70611783565b5b6000611a7f868287016119d9565b9350506020611a90868287016119d9565b9250506040611aa186828701611924565b9150509250925092565b600060208284031215611ac157611ac0611783565b5b6000611acf848285016119d9565b91505092915050565b611ae181611812565b8114611aec57600080fd5b50565b600081359050611afe81611ad8565b92915050565b60008060408385031215611b1b57611b1a611783565b5b6000611b29858286016119d9565b9250506020611b3a85828601611aef565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b8682611897565b810181811067ffffffffffffffff82111715611ba557611ba4611b4e565b5b80604052505050565b6000611bb8611779565b9050611bc48282611b7d565b919050565b600067ffffffffffffffff821115611be457611be3611b4e565b5b611bed82611897565b9050602081019050919050565b82818337600083830152505050565b6000611c1c611c1784611bc9565b611bae565b905082815260208101848484011115611c3857611c37611b49565b5b611c43848285611bfa565b509392505050565b600082601f830112611c6057611c5f611b44565b5b8135611c70848260208601611c09565b91505092915050565b60008060008060808587031215611c9357611c92611783565b5b6000611ca1878288016119d9565b9450506020611cb2878288016119d9565b9350506040611cc387828801611924565b925050606085013567ffffffffffffffff811115611ce457611ce3611788565b5b611cf087828801611c4b565b91505092959194509250565b60008060408385031215611d1357611d12611783565b5b6000611d21858286016119d9565b9250506020611d32858286016119d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d8357607f821691505b60208210811415611d9757611d96611d3c565b5b50919050565b600081905092915050565b6000611db382611848565b611dbd8185611d9d565b9350611dcd818560208601611864565b80840191505092915050565b60008190508160005260206000209050919050565b60008154611dfb81611d6b565b611e058186611d9d565b94506001821660008114611e205760018114611e3157611e64565b60ff19831686528186019350611e64565b611e3a85611dd9565b60005b83811015611e5c57815481890152600182019150602081019050611e3d565b838801955050505b50505092915050565b6000611e798286611da8565b9150611e858285611da8565b9150611e918284611dee565b9150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000611ec582611e9e565b611ecf8185611ea9565b9350611edf818560208601611864565b611ee881611897565b840191505092915050565b6000608082019050611f086000830187611998565b611f156020830186611998565b611f226040830185611a2e565b8181036060830152611f348184611eba565b905095945050505050565b600081519050611f4e816117b9565b92915050565b600060208284031215611f6a57611f69611783565b5b6000611f7884828501611f3f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fbb82611903565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fee57611fed611f81565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061203382611903565b915061203e83611903565b92508261204e5761204d611ff9565b5b828204905092915050565b600061206482611903565b915061206f83611903565b92508282101561208257612081611f81565b5b828203905092915050565b600061209882611903565b91506120a383611903565b9250826120b3576120b2611ff9565b5b828206905092915050565b60006120c982611903565b91506120d483611903565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561210957612108611f81565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ee26ce2ba2811328e70784f0efd89385d8c801408e36156045398542c65e791f64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2E6A736F6E000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x51 SWAP3 SWAP2 SWAP1 PUSH3 0xDA JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x259A CODESIZE SUB DUP1 PUSH3 0x259A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x85 SWAP2 SWAP1 PUSH3 0x327 JUMP JUMPDEST DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x9D SWAP3 SWAP2 SWAP1 PUSH3 0xDA JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xB6 SWAP3 SWAP2 SWAP1 PUSH3 0xDA JUMP JUMPDEST POP PUSH3 0xC7 PUSH3 0xD5 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP PUSH3 0x411 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xE8 SWAP1 PUSH3 0x3DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x10C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x158 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x127 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x158 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x158 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x157 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x13A JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x167 SWAP2 SWAP1 PUSH3 0x16B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x186 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x16C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x1F3 DUP3 PUSH3 0x1A8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x215 JUMPI PUSH3 0x214 PUSH3 0x1B9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x22A PUSH3 0x18A JUMP JUMPDEST SWAP1 POP PUSH3 0x238 DUP3 DUP3 PUSH3 0x1E8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x25B JUMPI PUSH3 0x25A PUSH3 0x1B9 JUMP JUMPDEST JUMPDEST PUSH3 0x266 DUP3 PUSH3 0x1A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x293 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x276 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x2A3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2C0 PUSH3 0x2BA DUP5 PUSH3 0x23D JUMP JUMPDEST PUSH3 0x21E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x2DF JUMPI PUSH3 0x2DE PUSH3 0x1A3 JUMP JUMPDEST JUMPDEST PUSH3 0x2EC DUP5 DUP3 DUP6 PUSH3 0x273 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x30C JUMPI PUSH3 0x30B PUSH3 0x19E JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x31E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x341 JUMPI PUSH3 0x340 PUSH3 0x194 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x362 JUMPI PUSH3 0x361 PUSH3 0x199 JUMP JUMPDEST JUMPDEST PUSH3 0x370 DUP6 DUP3 DUP7 ADD PUSH3 0x2F4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x394 JUMPI PUSH3 0x393 PUSH3 0x199 JUMP JUMPDEST JUMPDEST PUSH3 0x3A2 DUP6 DUP3 DUP7 ADD PUSH3 0x2F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x3F4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x40B JUMPI PUSH3 0x40A PUSH3 0x3AC JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2179 DUP1 PUSH3 0x421 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xC6682862 EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2EE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x268 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1CE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x31E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x132 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13F SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x19A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x19EE JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19C PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1A58 JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x1A58 JUMP JUMPDEST PUSH2 0x63A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x19A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x670 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH2 0x740 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH2 0x7D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x299 SWAP2 SWAP1 PUSH2 0x1C79 JUMP JUMPDEST PUSH2 0x94A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A8 PUSH2 0x9C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B5 SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x308 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x315 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3E9 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x3F9 JUMPI POP PUSH2 0x3F8 DUP3 PUSH2 0xB86 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x40F SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43B SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x488 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x45D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x488 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49D DUP3 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF4700E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 DUP3 PUSH2 0x65A JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x943F7B8C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5A0 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x603 JUMPI PUSH2 0x5CC DUP2 PUSH2 0x5C7 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCFB3B94200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH2 0x60E DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61D PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x635 DUP4 DUP4 DUP4 PUSH2 0xCFD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x655 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x94A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x665 DUP3 PUSH2 0x11B3 JUMP JUMPDEST PUSH1 0x0 ADD MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F4EB60400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x74F SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77B SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7C8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7C8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7DA PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH32 0xB06307DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x84C PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8F9 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x955 DUP5 DUP5 DUP5 PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x974 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143E JUMP JUMPDEST ISZERO PUSH2 0x9BC JUMPI PUSH2 0x985 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1461 JUMP JUMPDEST PUSH2 0x9BB JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x9CF SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9FB SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA48 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA1D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA48 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA2B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA5B DUP3 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0xA91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA14C4B5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA9B PUSH2 0x15B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xABC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAEA JUMP JUMPDEST DUP1 PUSH2 0xAC6 DUP5 PUSH2 0x15C9 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xADA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBFB PUSH2 0xCF8 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC0A JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0xC37 JUMPI POP PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD08 DUP3 PUSH2 0x11B3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA114810000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD94 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xDC3 JUMPI POP PUSH2 0xDC2 DUP6 PUSH2 0xDBD PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xE08 JUMPI POP PUSH2 0xDD1 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDF0 DUP5 PUSH2 0x492 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xE41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59C896BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEA553B3400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB5 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x172A JUMP JUMPDEST PUSH2 0xEC1 PUSH1 0x0 DUP5 DUP8 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP5 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP6 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1141 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x1140 JUMPI DUP8 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11AC DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1730 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11BB PUSH2 0x1736 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP DUP1 PUSH2 0x11C9 PUSH2 0xCF8 JUMP JUMPDEST GT PUSH2 0x1407 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH2 0x1404 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12E8 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x1439 JUMP JUMPDEST JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1403 JUMPI DUP2 DUP1 PUSH1 0x1 SWAP1 SUB SWAP3 POP POP PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13FE JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x1439 JUMP JUMPDEST PUSH2 0x12E9 JUMP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDF2D9B4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1487 PUSH2 0xC3E JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EF3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14E5 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E2 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x155F JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1515 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x151A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1557 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1611 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x1643 JUMPI DUP1 DUP1 PUSH2 0x162C SWAP1 PUSH2 0x1FB0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x163C SWAP2 SWAP1 PUSH2 0x2028 JUMP JUMPDEST SWAP2 POP PUSH2 0x1619 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x165F JUMPI PUSH2 0x165E PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1691 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x171E JUMPI PUSH1 0x1 DUP3 PUSH2 0x16AA SWAP2 SWAP1 PUSH2 0x2059 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x16B9 SWAP2 SWAP1 PUSH2 0x208D JUMP JUMPDEST PUSH1 0x30 PUSH2 0x16C5 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x2114 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x1717 SWAP2 SWAP1 PUSH2 0x2028 JUMP JUMPDEST SWAP5 POP PUSH2 0x1695 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C2 DUP2 PUSH2 0x178D JUMP JUMPDEST DUP2 EQ PUSH2 0x17CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17DF DUP2 PUSH2 0x17B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17FB JUMPI PUSH2 0x17FA PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1809 DUP5 DUP3 DUP6 ADD PUSH2 0x17D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1827 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1842 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x181E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1882 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1867 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1891 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B3 DUP3 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x18BD DUP2 DUP6 PUSH2 0x1853 JUMP JUMPDEST SWAP4 POP PUSH2 0x18CD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH2 0x18D6 DUP2 PUSH2 0x1897 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18FB DUP2 DUP5 PUSH2 0x18A8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1916 DUP2 PUSH2 0x1903 JUMP JUMPDEST DUP2 EQ PUSH2 0x1921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1933 DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x194F JUMPI PUSH2 0x194E PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x195D DUP5 DUP3 DUP6 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1991 DUP3 PUSH2 0x1966 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19A1 DUP2 PUSH2 0x1986 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1998 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19CB DUP2 PUSH2 0x1986 JUMP JUMPDEST DUP2 EQ PUSH2 0x19D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19E8 DUP2 PUSH2 0x19C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A05 JUMPI PUSH2 0x1A04 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A24 DUP6 DUP3 DUP7 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A37 DUP2 PUSH2 0x1903 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A52 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A2E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A71 JUMPI PUSH2 0x1A70 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A7F DUP7 DUP3 DUP8 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1A90 DUP7 DUP3 DUP8 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1AA1 DUP7 DUP3 DUP8 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH2 0x1AC0 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1AE1 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AFE DUP2 PUSH2 0x1AD8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B1B JUMPI PUSH2 0x1B1A PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B29 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B3A DUP6 DUP3 DUP7 ADD PUSH2 0x1AEF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1B86 DUP3 PUSH2 0x1897 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1BA5 JUMPI PUSH2 0x1BA4 PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BB8 PUSH2 0x1779 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC4 DUP3 DUP3 PUSH2 0x1B7D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1BE4 JUMPI PUSH2 0x1BE3 PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST PUSH2 0x1BED DUP3 PUSH2 0x1897 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1C PUSH2 0x1C17 DUP5 PUSH2 0x1BC9 JUMP JUMPDEST PUSH2 0x1BAE JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1C38 JUMPI PUSH2 0x1C37 PUSH2 0x1B49 JUMP JUMPDEST JUMPDEST PUSH2 0x1C43 DUP5 DUP3 DUP6 PUSH2 0x1BFA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C60 JUMPI PUSH2 0x1C5F PUSH2 0x1B44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C70 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1C09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1C93 JUMPI PUSH2 0x1C92 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CA1 DUP8 DUP3 DUP9 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1CB2 DUP8 DUP3 DUP9 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1CC3 DUP8 DUP3 DUP9 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CE4 JUMPI PUSH2 0x1CE3 PUSH2 0x1788 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF0 DUP8 DUP3 DUP9 ADD PUSH2 0x1C4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D13 JUMPI PUSH2 0x1D12 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D21 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D32 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1D83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1D3C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB3 DUP3 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x1DBD DUP2 DUP6 PUSH2 0x1D9D JUMP JUMPDEST SWAP4 POP PUSH2 0x1DCD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x1DFB DUP2 PUSH2 0x1D6B JUMP JUMPDEST PUSH2 0x1E05 DUP2 DUP7 PUSH2 0x1D9D JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1E20 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1E31 JUMPI PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x1E64 JUMP JUMPDEST PUSH2 0x1E3A DUP6 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E5C JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1E3D JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E79 DUP3 DUP7 PUSH2 0x1DA8 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E85 DUP3 DUP6 PUSH2 0x1DA8 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E91 DUP3 DUP5 PUSH2 0x1DEE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EC5 DUP3 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1ECF DUP2 DUP6 PUSH2 0x1EA9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EDF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH2 0x1EE8 DUP2 PUSH2 0x1897 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1F08 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x1F15 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x1F22 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1A2E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1F34 DUP2 DUP5 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1F4E DUP2 PUSH2 0x17B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F6A JUMPI PUSH2 0x1F69 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F78 DUP5 DUP3 DUP6 ADD PUSH2 0x1F3F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1FBB DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x1FEE JUMPI PUSH2 0x1FED PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2033 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x203E DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x204E JUMPI PUSH2 0x204D PUSH2 0x1FF9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2064 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x206F DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2082 JUMPI PUSH2 0x2081 PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2098 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x20A3 DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x20B3 JUMPI PUSH2 0x20B2 PUSH2 0x1FF9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C9 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x20D4 DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2109 JUMPI PUSH2 0x2108 PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x26 0xCE 0x2B LOG2 DUP2 SGT 0x28 0xE7 SMOD DUP5 CREATE 0xEF 0xD8 SWAP4 DUP6 0xD8 0xC8 ADD BLOCKHASH DUP15 CALLDATASIZE ISZERO PUSH1 0x45 CODECOPY DUP6 TIMESTAMP 0xC6 0x5E PUSH26 0x1F64736F6C634300080A00330000000000000000000000000000 ",
							"sourceMap": "891:20490:8:-:0;;;1259:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1874:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1948:5;1940;:13;;;;;;;;;;;;:::i;:::-;;1973:7;1963;:17;;;;;;;;;;;;:::i;:::-;;2006:15;:13;;;:15;;:::i;:::-;1990:13;:31;;;;1874:154;;891:20490;;2120:90;2176:7;2120:90;:::o;891:20490::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:10:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;891:20490:8:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_2116": {
									"entryPoint": 5936,
									"id": 2116,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2035": {
									"entryPoint": 3142,
									"id": 2035,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_1135": {
									"entryPoint": 5554,
									"id": 1135,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_2103": {
									"entryPoint": 5930,
									"id": 2103,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2090": {
									"entryPoint": 5217,
									"id": 2090,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_1352": {
									"entryPoint": 3056,
									"id": 1352,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_467": {
									"entryPoint": 3134,
									"id": 467,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownershipOf_1047": {
									"entryPoint": 4531,
									"id": 1047,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_startTokenId_821": {
									"entryPoint": 3320,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transfer_1818": {
									"entryPoint": 3325,
									"id": 1818,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1181": {
									"entryPoint": 1294,
									"id": 1181,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_909": {
									"entryPoint": 1648,
									"id": 909,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@baseExtension_771": {
									"entryPoint": 2498,
									"id": 771,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getApproved_1203": {
									"entryPoint": 1170,
									"id": 1203,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_1255": {
									"entryPoint": 2802,
									"id": 1255,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_178": {
									"entryPoint": 5182,
									"id": 178,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_1072": {
									"entryPoint": 1024,
									"id": 1072,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1062": {
									"entryPoint": 1626,
									"id": 1062,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_1292": {
									"entryPoint": 1594,
									"id": 1292,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_1328": {
									"entryPoint": 2378,
									"id": 1328,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_1237": {
									"entryPoint": 2002,
									"id": 1237,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_726": {
									"entryPoint": 2950,
									"id": 726,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_881": {
									"entryPoint": 798,
									"id": 881,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1082": {
									"entryPoint": 1856,
									"id": 1082,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_565": {
									"entryPoint": 5577,
									"id": 565,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_1126": {
									"entryPoint": 2640,
									"id": 1126,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_837": {
									"entryPoint": 1555,
									"id": 837,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1273": {
									"entryPoint": 1578,
									"id": 1273,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 7177,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 6617,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 6895,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 6096,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4_fromMemory": {
									"entryPoint": 7999,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 7243,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6436,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6827,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7420,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 6744,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 7289,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 6916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6638,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 6117,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 8020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6457,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6552,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6174,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 7866,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6312,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7592,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7662,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6702,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 7789,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6567,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 7923,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6189,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6369,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6717,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 7086,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 6009,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 7113,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 7641,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 7838,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6216,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 7849,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6227,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7581,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8382,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8232,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8281,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6534,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6162,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 6029,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6502,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6403,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 7162,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_memory_to_memory": {
									"entryPoint": 6244,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 7531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 7037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"increment_t_uint256": {
									"entryPoint": 8112,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 8333,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8065,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 8185,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7484,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 8468,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 6990,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 6980,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 6985,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 6024,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6019,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6295,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 6594,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 6872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 6073,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6413,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:16647:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "378:105:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "388:89:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "403:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "410:66:10",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:78:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "388:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "360:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "370:7:10",
														"type": ""
													}
												],
												"src": "334:149:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "531:78:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "587:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "596:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "589:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "589:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "589:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "554:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "561:16:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "561:23:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "551:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "551:34:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "544:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "544:42:10"
															},
															"nodeType": "YulIf",
															"src": "541:62:10"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "524:5:10",
														"type": ""
													}
												],
												"src": "489:120:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "666:86:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "676:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "698:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "685:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "685:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "676:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "740:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "714:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "714:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "714:32:10"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "652:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "660:5:10",
														"type": ""
													}
												],
												"src": "615:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "823:262:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "869:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "871:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "871:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "871:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "844:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "853:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "840:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "840:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "865:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "836:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:32:10"
															},
															"nodeType": "YulIf",
															"src": "833:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "962:116:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "977:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "991:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "981:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1006:62:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1040:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1051:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1036:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1036:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1060:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "1016:19:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1016:52:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1006:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "793:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "804:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "816:6:10",
														"type": ""
													}
												],
												"src": "758:327:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1133:48:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1143:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1168:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1161:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1161:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1154:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1154:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1143:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1115:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1125:7:10",
														"type": ""
													}
												],
												"src": "1091:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1246:50:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1263:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1283:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "1268:14:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1268:21:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1256:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1256:34:10"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1234:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1241:3:10",
														"type": ""
													}
												],
												"src": "1187:109:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:118:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1404:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1416:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1427:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1412:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1412:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1404:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1478:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1491:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1502:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1487:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1487:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1440:37:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1440:65:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1366:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1378:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1389:4:10",
														"type": ""
													}
												],
												"src": "1302:210:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1577:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1588:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1604:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1598:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1598:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1588:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1560:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1570:6:10",
														"type": ""
													}
												],
												"src": "1518:99:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1719:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1736:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1741:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1729:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1729:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1757:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1776:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1781:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1772:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1772:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "1757:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1691:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1696:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "1707:11:10",
														"type": ""
													}
												],
												"src": "1623:169:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1847:258:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1857:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1866:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1861:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1926:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1951:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1956:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1947:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1947:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1970:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1975:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1966:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1966:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1960:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1960:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1940:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1940:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1940:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1887:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1890:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1898:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1900:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1909:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1912:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1905:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1905:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1900:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1880:3:10",
																"statements": []
															},
															"src": "1876:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2023:76:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2073:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2078:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2069:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2069:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2087:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2062:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2062:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2062:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2004:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2007:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2001:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2001:13:10"
															},
															"nodeType": "YulIf",
															"src": "1998:101:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1829:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1834:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1839:6:10",
														"type": ""
													}
												],
												"src": "1798:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2159:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2169:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2187:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2194:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2183:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2183:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2203:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2199:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2199:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2179:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2179:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2169:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2142:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2152:6:10",
														"type": ""
													}
												],
												"src": "2111:102:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2311:272:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2321:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2368:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2335:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2335:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2325:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2383:78:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2449:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2454:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2390:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2390:71:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2383:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2496:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2503:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2492:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2492:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2510:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2515:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2470:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2470:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2470:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2531:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2542:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2569:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2547:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2547:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2538:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2531:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2292:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2299:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2307:3:10",
														"type": ""
													}
												],
												"src": "2219:364:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2707:195:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2717:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2729:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2740:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2725:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2725:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2717:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2764:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2775:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2760:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2760:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2783:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2789:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2779:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2779:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2753:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2753:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2753:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2809:86:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2881:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2890:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2817:63:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2817:78:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2809:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2679:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2691:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2702:4:10",
														"type": ""
													}
												],
												"src": "2589:313:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2953:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2963:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2974:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2963:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2935:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2945:7:10",
														"type": ""
													}
												],
												"src": "2908:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3034:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3091:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3100:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3103:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3093:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3093:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3093:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3057:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3082:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3064:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3064:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3054:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3054:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3047:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3047:43:10"
															},
															"nodeType": "YulIf",
															"src": "3044:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3027:5:10",
														"type": ""
													}
												],
												"src": "2991:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3171:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3181:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3203:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3190:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3190:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3181:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3246:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3219:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3219:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3219:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3149:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3157:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3165:5:10",
														"type": ""
													}
												],
												"src": "3119:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3330:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3376:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3378:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3378:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3378:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3351:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3360:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3347:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3347:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3372:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3343:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3343:32:10"
															},
															"nodeType": "YulIf",
															"src": "3340:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "3469:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3484:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3498:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3488:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3513:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3548:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3559:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3544:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3544:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3568:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3523:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3523:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3513:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3300:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3311:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3323:6:10",
														"type": ""
													}
												],
												"src": "3264:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3644:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3654:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3669:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3676:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3665:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3665:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3654:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3626:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3636:7:10",
														"type": ""
													}
												],
												"src": "3599:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3776:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3786:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3815:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3797:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3797:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3786:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3758:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3768:7:10",
														"type": ""
													}
												],
												"src": "3731:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3898:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3915:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3938:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3920:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3920:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3908:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3908:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3908:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3886:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3893:3:10",
														"type": ""
													}
												],
												"src": "3833:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4055:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4065:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4077:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4088:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4073:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4073:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4065:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4145:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4158:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4169:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4154:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4154:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4101:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4101:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4101:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4027:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4039:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4050:4:10",
														"type": ""
													}
												],
												"src": "3957:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4228:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4285:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4294:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4297:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4287:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4287:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4287:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4251:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4276:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4258:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4258:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4248:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4248:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4241:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4241:43:10"
															},
															"nodeType": "YulIf",
															"src": "4238:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4221:5:10",
														"type": ""
													}
												],
												"src": "4185:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4365:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4375:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4397:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4384:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4384:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4375:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4440:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4413:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4413:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4413:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4343:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4351:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4359:5:10",
														"type": ""
													}
												],
												"src": "4313:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4541:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4587:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4589:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4589:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4589:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4562:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4571:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4558:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4558:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4583:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4554:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4554:32:10"
															},
															"nodeType": "YulIf",
															"src": "4551:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "4680:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4695:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4709:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4699:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4724:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4759:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4770:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4755:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4755:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4779:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4734:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4734:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4724:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4807:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4822:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4836:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4826:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4852:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4887:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4898:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4883:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4883:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4907:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4862:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4862:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4852:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4503:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4514:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4526:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4534:6:10",
														"type": ""
													}
												],
												"src": "4458:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5003:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5020:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5043:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5025:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5025:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5013:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5013:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5013:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4991:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4998:3:10",
														"type": ""
													}
												],
												"src": "4938:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5160:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5170:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5182:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5193:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5178:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5170:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5250:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5263:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5274:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5259:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5259:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5206:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5206:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5206:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5132:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5144:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5155:4:10",
														"type": ""
													}
												],
												"src": "5062:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5390:519:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5436:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5438:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5438:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5438:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5411:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5420:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5407:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5407:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5432:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5403:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5403:32:10"
															},
															"nodeType": "YulIf",
															"src": "5400:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "5529:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5544:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5558:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5548:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5573:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5608:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5619:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5604:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5604:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5628:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5583:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5583:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5573:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5656:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5671:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5685:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5675:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5701:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5736:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5747:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5732:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5732:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5756:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5711:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5711:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5701:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5784:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5799:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5813:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5803:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5829:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5864:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5875:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5860:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5860:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5884:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5839:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5839:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5829:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5344:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5355:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5367:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5375:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5383:6:10",
														"type": ""
													}
												],
												"src": "5290:619:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5981:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6027:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6029:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6029:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6029:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6002:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6011:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5998:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5998:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6023:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5994:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5994:32:10"
															},
															"nodeType": "YulIf",
															"src": "5991:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "6120:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6135:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6149:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6139:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6164:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6199:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6210:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6195:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6195:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6219:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6174:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6174:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6164:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5951:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5962:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5974:6:10",
														"type": ""
													}
												],
												"src": "5915:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6290:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6344:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6353:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6356:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6346:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6346:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6346:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6313:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6335:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "6320:14:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6320:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6310:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6310:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6303:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6303:40:10"
															},
															"nodeType": "YulIf",
															"src": "6300:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6283:5:10",
														"type": ""
													}
												],
												"src": "6250:116:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6421:84:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6431:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6453:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6440:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6440:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6431:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6493:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "6469:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6469:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6469:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6399:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6407:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6415:5:10",
														"type": ""
													}
												],
												"src": "6372:133:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6591:388:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6637:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6639:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6639:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6639:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6612:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6621:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6608:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6608:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6633:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6604:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6604:32:10"
															},
															"nodeType": "YulIf",
															"src": "6601:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "6730:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6745:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6759:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6749:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6774:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6809:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6820:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6805:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6805:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6829:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6784:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6784:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6774:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6857:115:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6872:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6886:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6876:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6902:60:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6934:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6945:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6930:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6930:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6954:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "6912:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6912:50:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6902:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6553:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6564:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6576:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6584:6:10",
														"type": ""
													}
												],
												"src": "6511:468:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7074:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7091:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7094:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7084:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7084:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7084:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "6985:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7197:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7214:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7217:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7207:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7207:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7207:12:10"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "7108:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7259:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7276:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7279:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7269:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7269:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7269:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7373:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7376:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7366:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7366:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7366:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7397:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7400:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7390:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7390:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7390:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "7231:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7460:238:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7470:58:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7492:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "7522:4:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "7500:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7500:27:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7488:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7488:40:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "7474:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7639:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "7641:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7641:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7641:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7582:10:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7594:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "7579:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7579:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7618:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7630:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7615:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7615:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7576:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7576:62:10"
															},
															"nodeType": "YulIf",
															"src": "7573:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7677:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "7681:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7670:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7670:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7670:22:10"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7446:6:10",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7454:4:10",
														"type": ""
													}
												],
												"src": "7417:281:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7745:88:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7755:30:10",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "7765:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7765:20:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7755:6:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7814:6:10"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "7822:4:10"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "7794:19:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7794:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7794:33:10"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7729:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7738:6:10",
														"type": ""
													}
												],
												"src": "7704:129:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7905:241:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8010:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "8012:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8012:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8012:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7982:6:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7990:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7979:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7979:30:10"
															},
															"nodeType": "YulIf",
															"src": "7976:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8072:6:10"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "8050:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8050:29:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8042:4:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8116:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "8128:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8134:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8124:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8124:15:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8116:4:10"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7889:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7900:4:10",
														"type": ""
													}
												],
												"src": "7839:307:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8203:103:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8226:3:10"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8231:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8236:6:10"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "8213:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8213:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8284:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8289:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8280:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8280:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8298:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8273:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8273:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8273:27:10"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8185:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8190:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8195:6:10",
														"type": ""
													}
												],
												"src": "8152:154:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8395:327:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8405:74:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8471:6:10"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "8430:40:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8430:48:10"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8414:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8414:65:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8405:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8495:5:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8502:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8488:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8488:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8488:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8518:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8533:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8540:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8529:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8529:16:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "8522:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8583:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "8585:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8585:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8585:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "8564:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8569:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8560:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8560:16:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "8578:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8557:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8557:25:10"
															},
															"nodeType": "YulIf",
															"src": "8554:112:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8699:3:10"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8704:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8709:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8675:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8675:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8675:41:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8368:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8373:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8381:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8389:5:10",
														"type": ""
													}
												],
												"src": "8312:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8802:277:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8851:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "8853:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8853:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8853:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8830:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8838:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8826:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8826:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "8845:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "8822:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8822:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8815:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8815:35:10"
															},
															"nodeType": "YulIf",
															"src": "8812:122:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8943:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8970:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8957:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8957:20:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8947:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8986:87:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9046:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9054:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9042:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9042:17:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9061:6:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "9069:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "8995:46:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8995:78:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8986:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8780:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8788:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8796:5:10",
														"type": ""
													}
												],
												"src": "8741:338:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9211:817:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9258:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9260:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9260:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9260:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9232:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9241:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9228:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9228:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9253:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9224:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9224:33:10"
															},
															"nodeType": "YulIf",
															"src": "9221:120:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "9351:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9366:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9380:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9370:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9395:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9430:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9441:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9426:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9426:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9450:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9405:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9405:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9395:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9478:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9493:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9507:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9497:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9523:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9558:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9569:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9554:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9554:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9578:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9533:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9533:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "9523:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9606:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9621:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9635:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9625:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9651:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9686:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9697:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9682:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9682:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9706:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9661:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9661:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "9651:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9734:287:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9749:46:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9780:9:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9791:2:10",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9776:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9776:18:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "9763:12:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9763:32:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9753:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "9842:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "9844:77:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9844:79:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "9844:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9814:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9822:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9811:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9811:30:10"
																	},
																	"nodeType": "YulIf",
																	"src": "9808:117:10"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9939:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9983:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9994:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9979:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9979:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10003:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "9949:29:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9949:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "9939:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9157:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9168:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9180:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9188:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9196:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9204:6:10",
														"type": ""
													}
												],
												"src": "9085:943:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10117:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10163:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "10165:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10165:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10165:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10138:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10147:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10134:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10134:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10159:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10130:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10130:32:10"
															},
															"nodeType": "YulIf",
															"src": "10127:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "10256:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10271:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10285:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10275:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10300:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10335:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10346:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10331:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10331:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10355:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10310:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10310:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "10300:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10383:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10398:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10412:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10402:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10428:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10463:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10474:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10459:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10459:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10483:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10438:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10438:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "10428:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10079:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10090:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10102:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10110:6:10",
														"type": ""
													}
												],
												"src": "10034:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10542:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10559:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10562:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10552:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10552:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10552:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10656:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10659:4:10",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10649:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10649:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10649:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10680:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10683:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10673:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10673:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10673:15:10"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "10514:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10751:269:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10761:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10775:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10781:1:10",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10771:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10771:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10761:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10792:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10822:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10828:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10818:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10818:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "10796:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10869:51:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10883:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "10897:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10905:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "10893:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10893:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10883:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10849:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10842:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10842:26:10"
															},
															"nodeType": "YulIf",
															"src": "10839:81:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10972:42:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "10986:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10986:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10986:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10936:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10959:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10967:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "10956:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10956:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10933:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10933:38:10"
															},
															"nodeType": "YulIf",
															"src": "10930:84:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10735:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10744:6:10",
														"type": ""
													}
												],
												"src": "10700:320:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11140:34:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11150:18:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "11165:3:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "11150:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11112:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11117:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "11128:11:10",
														"type": ""
													}
												],
												"src": "11026:148:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11290:267:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11300:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11347:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "11314:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11314:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11304:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11362:96:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11446:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11451:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11369:76:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11369:89:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11362:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11493:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11500:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11489:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11489:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11507:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11512:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "11467:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11467:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11467:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11528:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11539:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11544:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11535:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11535:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11528:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11271:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11278:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11286:3:10",
														"type": ""
													}
												],
												"src": "11180:377:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11617:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11627:11:10",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "11635:3:10"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "11627:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11655:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "11658:3:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11648:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11648:14:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11648:14:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11671:26:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11689:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11692:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "11679:9:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11679:18:10"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "11671:4:10"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "11604:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "11612:4:10",
														"type": ""
													}
												],
												"src": "11563:141:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11841:738:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11851:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11874:5:10"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nodeType": "YulIdentifier",
																	"src": "11868:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11868:12:10"
															},
															"variables": [
																{
																	"name": "slotValue",
																	"nodeType": "YulTypedName",
																	"src": "11855:9:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11889:50:10",
															"value": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "11929:9:10"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "11903:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11903:36:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11893:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11948:96:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12032:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12037:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11955:76:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11955:89:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11948:3:10"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "12093:130:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "12146:3:10"
																						},
																						{
																							"arguments": [
																								{
																									"name": "slotValue",
																									"nodeType": "YulIdentifier",
																									"src": "12155:9:10"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "12170:4:10",
																											"type": "",
																											"value": "0xff"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "12166:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "12166:9:10"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "12151:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "12151:25:10"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "12139:6:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12139:38:10"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "12139:38:10"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "12190:23:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "12201:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "12206:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "12197:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12197:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "12190:3:10"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "12086:137:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12091:1:10",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "12239:334:10",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "12284:53:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "value",
																							"nodeType": "YulIdentifier",
																							"src": "12331:5:10"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "12299:31:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12299:38:10"
																				},
																				"variables": [
																					{
																						"name": "dataPos",
																						"nodeType": "YulTypedName",
																						"src": "12288:7:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "12350:10:10",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12359:1:10",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "12354:1:10",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "12417:110:10",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "pos",
																												"nodeType": "YulIdentifier",
																												"src": "12446:3:10"
																											},
																											{
																												"name": "i",
																												"nodeType": "YulIdentifier",
																												"src": "12451:1:10"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "12442:3:10"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "12442:11:10"
																									},
																									{
																										"arguments": [
																											{
																												"name": "dataPos",
																												"nodeType": "YulIdentifier",
																												"src": "12461:7:10"
																											}
																										],
																										"functionName": {
																											"name": "sload",
																											"nodeType": "YulIdentifier",
																											"src": "12455:5:10"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "12455:14:10"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "12435:6:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12435:35:10"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "12435:35:10"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "12487:26:10",
																							"value": {
																								"arguments": [
																									{
																										"name": "dataPos",
																										"nodeType": "YulIdentifier",
																										"src": "12502:7:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12511:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "12498:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12498:15:10"
																							},
																							"variableNames": [
																								{
																									"name": "dataPos",
																									"nodeType": "YulIdentifier",
																									"src": "12487:7:10"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "12384:1:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "12387:6:10"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "12381:2:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12381:13:10"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "12395:21:10",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "12397:17:10",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "12406:1:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12409:4:10",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "12402:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12402:12:10"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "12397:1:10"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "12377:3:10",
																					"statements": []
																				},
																				"src": "12373:154:10"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "12540:23:10",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "12551:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "12556:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "12547:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12547:16:10"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "12540:3:10"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "12232:341:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12237:1:10",
																		"type": "",
																		"value": "1"
																	}
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "12064:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12075:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12060:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12060:17:10"
															},
															"nodeType": "YulSwitch",
															"src": "12053:520:10"
														}
													]
												},
												"name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11822:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11829:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11837:3:10",
														"type": ""
													}
												],
												"src": "11734:845:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12814:360:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12825:102:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12914:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12923:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12832:81:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12832:95:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12825:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12937:102:10",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13026:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13035:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12944:81:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12944:95:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12937:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13049:99:10",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13135:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13144:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13056:78:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13056:92:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13049:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13158:10:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "13165:3:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13158:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12777:3:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12783:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12791:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12799:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12810:3:10",
														"type": ""
													}
												],
												"src": "12585:589:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13238:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13249:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13265:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13259:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13259:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "13249:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13221:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13231:6:10",
														"type": ""
													}
												],
												"src": "13180:98:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13379:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13396:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13401:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13389:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13389:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13389:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13417:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13436:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13441:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13432:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13432:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "13417:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13351:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13356:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "13367:11:10",
														"type": ""
													}
												],
												"src": "13284:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13548:270:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13558:52:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13604:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13572:31:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13572:38:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "13562:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13619:77:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13684:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13689:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13626:57:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13626:70:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13619:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13731:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13738:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13727:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13727:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13745:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13750:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "13705:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13705:52:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13705:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13766:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13777:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "13804:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "13782:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13782:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13773:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13773:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13766:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13529:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13536:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13544:3:10",
														"type": ""
													}
												],
												"src": "13458:360:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14024:440:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14034:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14046:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14057:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14042:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14042:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14034:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14115:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14128:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14139:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14124:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14124:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14071:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14071:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14071:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "14196:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14209:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14220:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14205:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14205:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14152:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14152:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14152:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14278:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14291:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14302:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14287:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14287:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14234:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14234:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14234:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14327:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14338:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14323:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14323:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14347:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14353:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14343:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14343:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14316:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14316:48:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14316:48:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14373:84:10",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14443:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14452:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14381:61:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14381:76:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14373:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13972:9:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13984:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13992:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14000:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14008:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14019:4:10",
														"type": ""
													}
												],
												"src": "13824:640:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14532:79:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14542:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "14557:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14551:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14551:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "14542:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14599:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "14573:25:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14573:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14573:32:10"
														}
													]
												},
												"name": "abi_decode_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "14510:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14518:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14526:5:10",
														"type": ""
													}
												],
												"src": "14470:141:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14693:273:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14739:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "14741:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14741:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14741:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "14714:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14723:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14710:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14710:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14735:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "14706:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14706:32:10"
															},
															"nodeType": "YulIf",
															"src": "14703:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "14832:127:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "14847:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14861:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "14851:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "14876:73:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "14921:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "14932:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "14917:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14917:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "14941:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "14886:30:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14886:63:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "14876:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14663:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "14674:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14686:6:10",
														"type": ""
													}
												],
												"src": "14617:349:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15000:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15017:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15020:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15010:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15010:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15010:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15114:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15117:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15107:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15107:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15107:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15138:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15141:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15131:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15131:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15131:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "14972:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15201:190:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15211:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15238:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15220:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15220:24:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "15211:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15334:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "15336:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15336:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15336:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15259:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15266:66:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "15256:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15256:77:10"
															},
															"nodeType": "YulIf",
															"src": "15253:103:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15365:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15376:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15383:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15372:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15372:13:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "15365:3:10"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15187:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "15197:3:10",
														"type": ""
													}
												],
												"src": "15158:233:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15425:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15442:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15445:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15435:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15435:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15435:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15539:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15542:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15532:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15532:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15532:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15563:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15566:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15556:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15556:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15556:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "15397:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15625:143:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15635:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15658:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15640:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15640:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "15635:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15669:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15692:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15674:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15674:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "15669:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15716:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "15718:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15718:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15718:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15713:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15706:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15706:9:10"
															},
															"nodeType": "YulIf",
															"src": "15703:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15748:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15757:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15760:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "15753:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15753:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "15748:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15614:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15617:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "15623:1:10",
														"type": ""
													}
												],
												"src": "15583:185:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15819:146:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15829:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15852:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15834:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15834:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "15829:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15863:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15886:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15868:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15868:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "15863:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15910:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "15912:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15912:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15912:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15904:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15907:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "15901:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15901:8:10"
															},
															"nodeType": "YulIf",
															"src": "15898:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15942:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15954:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15957:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "15950:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15950:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "15942:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15805:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15808:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "15814:4:10",
														"type": ""
													}
												],
												"src": "15774:191:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16005:142:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16015:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16038:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16020:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16020:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "16015:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16049:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16072:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16054:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16054:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "16049:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16096:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "16098:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16098:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16098:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16093:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "16086:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16086:9:10"
															},
															"nodeType": "YulIf",
															"src": "16083:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16127:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16136:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16139:1:10"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "16132:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16132:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "16127:1:10"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15994:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15997:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "16003:1:10",
														"type": ""
													}
												],
												"src": "15971:176:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16197:261:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16207:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16230:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16212:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16212:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "16207:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16241:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16264:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16246:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16246:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "16241:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16404:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16406:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16406:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16406:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16325:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16332:66:10",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "16400:1:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16328:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16328:74:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16322:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16322:81:10"
															},
															"nodeType": "YulIf",
															"src": "16319:107:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16436:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16447:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16450:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16443:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16443:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "16436:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16184:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16187:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "16193:3:10",
														"type": ""
													}
												],
												"src": "16153:305:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16492:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16509:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16512:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16502:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16502:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16502:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16606:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16609:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16599:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16599:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16599:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16630:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16633:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16623:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16623:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16623:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "16464:180:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value2, value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063b88d4fde11610066578063b88d4fde14610284578063c6682862146102a0578063c87b56dd146102be578063e985e9c5146102ee576100f5565b80636352211e146101ea57806370a082311461021a57806395d89b411461024a578063a22cb46514610268576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806318160ddd1461019457806323b872dd146101b257806342842e0e146101ce576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f91906117e5565b61031e565b604051610121919061182d565b60405180910390f35b610132610400565b60405161013f91906118e1565b60405180910390f35b610162600480360381019061015d9190611939565b610492565b60405161016f91906119a7565b60405180910390f35b610192600480360381019061018d91906119ee565b61050e565b005b61019c610613565b6040516101a99190611a3d565b60405180910390f35b6101cc60048036038101906101c79190611a58565b61062a565b005b6101e860048036038101906101e39190611a58565b61063a565b005b61020460048036038101906101ff9190611939565b61065a565b60405161021191906119a7565b60405180910390f35b610234600480360381019061022f9190611aab565b610670565b6040516102419190611a3d565b60405180910390f35b610252610740565b60405161025f91906118e1565b60405180910390f35b610282600480360381019061027d9190611b04565b6107d2565b005b61029e60048036038101906102999190611c79565b61094a565b005b6102a86109c2565b6040516102b591906118e1565b60405180910390f35b6102d860048036038101906102d39190611939565b610a50565b6040516102e591906118e1565b60405180910390f35b61030860048036038101906103039190611cfc565b610af2565b604051610315919061182d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103f957506103f882610b86565b5b9050919050565b60606002805461040f90611d6b565b80601f016020809104026020016040519081016040528092919081815260200182805461043b90611d6b565b80156104885780601f1061045d57610100808354040283529160200191610488565b820191906000526020600020905b81548152906001019060200180831161046b57829003601f168201915b5050505050905090565b600061049d82610bf0565b6104d3576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105198261065a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610581576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105a0610c3e565b73ffffffffffffffffffffffffffffffffffffffff1614610603576105cc816105c7610c3e565b610af2565b610602576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61060e838383610c46565b505050565b600061061d610cf8565b6001546000540303905090565b610635838383610cfd565b505050565b6106558383836040518060200160405280600081525061094a565b505050565b6000610665826111b3565b600001519050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106d8576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60606003805461074f90611d6b565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90611d6b565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b5050505050905090565b6107da610c3e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561083f576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806008600061084c610c3e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108f9610c3e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161093e919061182d565b60405180910390a35050565b610955848484610cfd565b6109748373ffffffffffffffffffffffffffffffffffffffff1661143e565b156109bc5761098584848484611461565b6109bb576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600480546109cf90611d6b565b80601f01602080910402602001604051908101604052809291908181526020018280546109fb90611d6b565b8015610a485780601f10610a1d57610100808354040283529160200191610a48565b820191906000526020600020905b815481529060010190602001808311610a2b57829003601f168201915b505050505081565b6060610a5b82610bf0565b610a91576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a9b6115b2565b9050600081511415610abc5760405180602001604052806000815250610aea565b80610ac6846115c9565b6004604051602001610ada93929190611e6d565b6040516020818303038152906040525b915050919050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081610bfb610cf8565b11158015610c0a575060005482105b8015610c37575060056000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600090565b6000610d08826111b3565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610d73576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16610d94610c3e565b73ffffffffffffffffffffffffffffffffffffffff161480610dc35750610dc285610dbd610c3e565b610af2565b5b80610e085750610dd1610c3e565b73ffffffffffffffffffffffffffffffffffffffff16610df084610492565b73ffffffffffffffffffffffffffffffffffffffff16145b905080610e41576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ea8576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610eb5858585600161172a565b610ec160008487610c46565b6001600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600560008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600560008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561114157600054821461114057878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111ac8585856001611730565b5050505050565b6111bb611736565b6000829050806111c9610cf8565b1161140757600054811015611406576000600560008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050806040015161140457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146112e8578092505050611439565b5b60011561140357818060019003925050600560008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146113fe578092505050611439565b6112e9565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611487610c3e565b8786866040518563ffffffff1660e01b81526004016114a99493929190611ef3565b6020604051808303816000875af19250505080156114e557506040513d601f19601f820116820180604052508101906114e29190611f54565b60015b61155f573d8060008114611515576040519150601f19603f3d011682016040523d82523d6000602084013e61151a565b606091505b50600081511415611557576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052806000815250905090565b60606000821415611611576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611725565b600082905060005b6000821461164357808061162c90611fb0565b915050600a8261163c9190612028565b9150611619565b60008167ffffffffffffffff81111561165f5761165e611b4e565b5b6040519080825280601f01601f1916602001820160405280156116915781602001600182028036833780820191505090505b5090505b6000851461171e576001826116aa9190612059565b9150600a856116b9919061208d565b60306116c591906120be565b60f81b8183815181106116db576116da612114565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117179190612028565b9450611695565b8093505050505b919050565b50505050565b50505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117c28161178d565b81146117cd57600080fd5b50565b6000813590506117df816117b9565b92915050565b6000602082840312156117fb576117fa611783565b5b6000611809848285016117d0565b91505092915050565b60008115159050919050565b61182781611812565b82525050565b6000602082019050611842600083018461181e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611882578082015181840152602081019050611867565b83811115611891576000848401525b50505050565b6000601f19601f8301169050919050565b60006118b382611848565b6118bd8185611853565b93506118cd818560208601611864565b6118d681611897565b840191505092915050565b600060208201905081810360008301526118fb81846118a8565b905092915050565b6000819050919050565b61191681611903565b811461192157600080fd5b50565b6000813590506119338161190d565b92915050565b60006020828403121561194f5761194e611783565b5b600061195d84828501611924565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199182611966565b9050919050565b6119a181611986565b82525050565b60006020820190506119bc6000830184611998565b92915050565b6119cb81611986565b81146119d657600080fd5b50565b6000813590506119e8816119c2565b92915050565b60008060408385031215611a0557611a04611783565b5b6000611a13858286016119d9565b9250506020611a2485828601611924565b9150509250929050565b611a3781611903565b82525050565b6000602082019050611a526000830184611a2e565b92915050565b600080600060608486031215611a7157611a70611783565b5b6000611a7f868287016119d9565b9350506020611a90868287016119d9565b9250506040611aa186828701611924565b9150509250925092565b600060208284031215611ac157611ac0611783565b5b6000611acf848285016119d9565b91505092915050565b611ae181611812565b8114611aec57600080fd5b50565b600081359050611afe81611ad8565b92915050565b60008060408385031215611b1b57611b1a611783565b5b6000611b29858286016119d9565b9250506020611b3a85828601611aef565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b8682611897565b810181811067ffffffffffffffff82111715611ba557611ba4611b4e565b5b80604052505050565b6000611bb8611779565b9050611bc48282611b7d565b919050565b600067ffffffffffffffff821115611be457611be3611b4e565b5b611bed82611897565b9050602081019050919050565b82818337600083830152505050565b6000611c1c611c1784611bc9565b611bae565b905082815260208101848484011115611c3857611c37611b49565b5b611c43848285611bfa565b509392505050565b600082601f830112611c6057611c5f611b44565b5b8135611c70848260208601611c09565b91505092915050565b60008060008060808587031215611c9357611c92611783565b5b6000611ca1878288016119d9565b9450506020611cb2878288016119d9565b9350506040611cc387828801611924565b925050606085013567ffffffffffffffff811115611ce457611ce3611788565b5b611cf087828801611c4b565b91505092959194509250565b60008060408385031215611d1357611d12611783565b5b6000611d21858286016119d9565b9250506020611d32858286016119d9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d8357607f821691505b60208210811415611d9757611d96611d3c565b5b50919050565b600081905092915050565b6000611db382611848565b611dbd8185611d9d565b9350611dcd818560208601611864565b80840191505092915050565b60008190508160005260206000209050919050565b60008154611dfb81611d6b565b611e058186611d9d565b94506001821660008114611e205760018114611e3157611e64565b60ff19831686528186019350611e64565b611e3a85611dd9565b60005b83811015611e5c57815481890152600182019150602081019050611e3d565b838801955050505b50505092915050565b6000611e798286611da8565b9150611e858285611da8565b9150611e918284611dee565b9150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000611ec582611e9e565b611ecf8185611ea9565b9350611edf818560208601611864565b611ee881611897565b840191505092915050565b6000608082019050611f086000830187611998565b611f156020830186611998565b611f226040830185611a2e565b8181036060830152611f348184611eba565b905095945050505050565b600081519050611f4e816117b9565b92915050565b600060208284031215611f6a57611f69611783565b5b6000611f7884828501611f3f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fbb82611903565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fee57611fed611f81565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061203382611903565b915061203e83611903565b92508261204e5761204d611ff9565b5b828204905092915050565b600061206482611903565b915061206f83611903565b92508282101561208257612081611f81565b5b828203905092915050565b600061209882611903565b91506120a383611903565b9250826120b3576120b2611ff9565b5b828206905092915050565b60006120c982611903565b91506120d483611903565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561210957612108611f81565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ee26ce2ba2811328e70784f0efd89385d8c801408e36156045398542c65e791f64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xC6682862 EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2EE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x268 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1CE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x31E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x132 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13F SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x19A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x19EE JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19C PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1A58 JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x1A58 JUMP JUMPDEST PUSH2 0x63A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x19A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x670 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH2 0x740 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH2 0x7D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x299 SWAP2 SWAP1 PUSH2 0x1C79 JUMP JUMPDEST PUSH2 0x94A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A8 PUSH2 0x9C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B5 SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x1939 JUMP JUMPDEST PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x308 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x303 SWAP2 SWAP1 PUSH2 0x1CFC JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x315 SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3E9 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x3F9 JUMPI POP PUSH2 0x3F8 DUP3 PUSH2 0xB86 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x40F SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43B SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x488 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x45D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x488 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49D DUP3 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x4D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF4700E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 DUP3 PUSH2 0x65A JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x943F7B8C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5A0 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x603 JUMPI PUSH2 0x5CC DUP2 PUSH2 0x5C7 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCFB3B94200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH2 0x60E DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61D PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x635 DUP4 DUP4 DUP4 PUSH2 0xCFD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x655 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x94A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x665 DUP3 PUSH2 0x11B3 JUMP JUMPDEST PUSH1 0x0 ADD MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F4EB60400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x74F SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77B SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7C8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7C8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7DA PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH32 0xB06307DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x84C PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8F9 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x182D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x955 DUP5 DUP5 DUP5 PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x974 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143E JUMP JUMPDEST ISZERO PUSH2 0x9BC JUMPI PUSH2 0x985 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1461 JUMP JUMPDEST PUSH2 0x9BB JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x9CF SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9FB SWAP1 PUSH2 0x1D6B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA48 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA1D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA48 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA2B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA5B DUP3 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0xA91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA14C4B5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA9B PUSH2 0x15B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0xABC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAEA JUMP JUMPDEST DUP1 PUSH2 0xAC6 DUP5 PUSH2 0x15C9 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xADA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBFB PUSH2 0xCF8 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC0A JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0xC37 JUMPI POP PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD08 DUP3 PUSH2 0x11B3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD73 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA114810000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD94 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xDC3 JUMPI POP PUSH2 0xDC2 DUP6 PUSH2 0xDBD PUSH2 0xC3E JUMP JUMPDEST PUSH2 0xAF2 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xE08 JUMPI POP PUSH2 0xDD1 PUSH2 0xC3E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDF0 DUP5 PUSH2 0x492 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xE41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x59C896BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEA553B3400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB5 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x172A JUMP JUMPDEST PUSH2 0xEC1 PUSH1 0x0 DUP5 DUP8 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP5 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP6 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1141 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x1140 JUMPI DUP8 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11AC DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1730 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11BB PUSH2 0x1736 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP DUP1 PUSH2 0x11C9 PUSH2 0xCF8 JUMP JUMPDEST GT PUSH2 0x1407 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x1406 JUMPI PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH2 0x1404 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12E8 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x1439 JUMP JUMPDEST JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1403 JUMPI DUP2 DUP1 PUSH1 0x1 SWAP1 SUB SWAP3 POP POP PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13FE JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x1439 JUMP JUMPDEST PUSH2 0x12E9 JUMP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDF2D9B4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1487 PUSH2 0xC3E JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EF3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14E5 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14E2 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x155F JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1515 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x151A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1557 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1611 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x1725 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x1643 JUMPI DUP1 DUP1 PUSH2 0x162C SWAP1 PUSH2 0x1FB0 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x163C SWAP2 SWAP1 PUSH2 0x2028 JUMP JUMPDEST SWAP2 POP PUSH2 0x1619 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x165F JUMPI PUSH2 0x165E PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1691 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x171E JUMPI PUSH1 0x1 DUP3 PUSH2 0x16AA SWAP2 SWAP1 PUSH2 0x2059 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x16B9 SWAP2 SWAP1 PUSH2 0x208D JUMP JUMPDEST PUSH1 0x30 PUSH2 0x16C5 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x2114 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x1717 SWAP2 SWAP1 PUSH2 0x2028 JUMP JUMPDEST SWAP5 POP PUSH2 0x1695 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C2 DUP2 PUSH2 0x178D JUMP JUMPDEST DUP2 EQ PUSH2 0x17CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17DF DUP2 PUSH2 0x17B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17FB JUMPI PUSH2 0x17FA PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1809 DUP5 DUP3 DUP6 ADD PUSH2 0x17D0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1827 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1842 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x181E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1882 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1867 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1891 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B3 DUP3 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x18BD DUP2 DUP6 PUSH2 0x1853 JUMP JUMPDEST SWAP4 POP PUSH2 0x18CD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH2 0x18D6 DUP2 PUSH2 0x1897 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18FB DUP2 DUP5 PUSH2 0x18A8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1916 DUP2 PUSH2 0x1903 JUMP JUMPDEST DUP2 EQ PUSH2 0x1921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1933 DUP2 PUSH2 0x190D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x194F JUMPI PUSH2 0x194E PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x195D DUP5 DUP3 DUP6 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1991 DUP3 PUSH2 0x1966 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19A1 DUP2 PUSH2 0x1986 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x19BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1998 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x19CB DUP2 PUSH2 0x1986 JUMP JUMPDEST DUP2 EQ PUSH2 0x19D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19E8 DUP2 PUSH2 0x19C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A05 JUMPI PUSH2 0x1A04 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A13 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A24 DUP6 DUP3 DUP7 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A37 DUP2 PUSH2 0x1903 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A52 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A2E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A71 JUMPI PUSH2 0x1A70 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A7F DUP7 DUP3 DUP8 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1A90 DUP7 DUP3 DUP8 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1AA1 DUP7 DUP3 DUP8 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH2 0x1AC0 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1AE1 DUP2 PUSH2 0x1812 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AFE DUP2 PUSH2 0x1AD8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B1B JUMPI PUSH2 0x1B1A PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B29 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B3A DUP6 DUP3 DUP7 ADD PUSH2 0x1AEF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1B86 DUP3 PUSH2 0x1897 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1BA5 JUMPI PUSH2 0x1BA4 PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BB8 PUSH2 0x1779 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BC4 DUP3 DUP3 PUSH2 0x1B7D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1BE4 JUMPI PUSH2 0x1BE3 PUSH2 0x1B4E JUMP JUMPDEST JUMPDEST PUSH2 0x1BED DUP3 PUSH2 0x1897 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1C PUSH2 0x1C17 DUP5 PUSH2 0x1BC9 JUMP JUMPDEST PUSH2 0x1BAE JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1C38 JUMPI PUSH2 0x1C37 PUSH2 0x1B49 JUMP JUMPDEST JUMPDEST PUSH2 0x1C43 DUP5 DUP3 DUP6 PUSH2 0x1BFA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C60 JUMPI PUSH2 0x1C5F PUSH2 0x1B44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C70 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1C09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1C93 JUMPI PUSH2 0x1C92 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CA1 DUP8 DUP3 DUP9 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1CB2 DUP8 DUP3 DUP9 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1CC3 DUP8 DUP3 DUP9 ADD PUSH2 0x1924 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CE4 JUMPI PUSH2 0x1CE3 PUSH2 0x1788 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF0 DUP8 DUP3 DUP9 ADD PUSH2 0x1C4B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D13 JUMPI PUSH2 0x1D12 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D21 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D32 DUP6 DUP3 DUP7 ADD PUSH2 0x19D9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1D83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1D3C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB3 DUP3 PUSH2 0x1848 JUMP JUMPDEST PUSH2 0x1DBD DUP2 DUP6 PUSH2 0x1D9D JUMP JUMPDEST SWAP4 POP PUSH2 0x1DCD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x1DFB DUP2 PUSH2 0x1D6B JUMP JUMPDEST PUSH2 0x1E05 DUP2 DUP7 PUSH2 0x1D9D JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1E20 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1E31 JUMPI PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x1E64 JUMP JUMPDEST PUSH2 0x1E3A DUP6 PUSH2 0x1DD9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E5C JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1E3D JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E79 DUP3 DUP7 PUSH2 0x1DA8 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E85 DUP3 DUP6 PUSH2 0x1DA8 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E91 DUP3 DUP5 PUSH2 0x1DEE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EC5 DUP3 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1ECF DUP2 DUP6 PUSH2 0x1EA9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EDF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1864 JUMP JUMPDEST PUSH2 0x1EE8 DUP2 PUSH2 0x1897 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1F08 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x1F15 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x1F22 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1A2E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1F34 DUP2 DUP5 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1F4E DUP2 PUSH2 0x17B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F6A JUMPI PUSH2 0x1F69 PUSH2 0x1783 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F78 DUP5 DUP3 DUP6 ADD PUSH2 0x1F3F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1FBB DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x1FEE JUMPI PUSH2 0x1FED PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2033 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x203E DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x204E JUMPI PUSH2 0x204D PUSH2 0x1FF9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2064 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x206F DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2082 JUMPI PUSH2 0x2081 PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2098 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x20A3 DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x20B3 JUMPI PUSH2 0x20B2 PUSH2 0x1FF9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C9 DUP3 PUSH2 0x1903 JUMP JUMPDEST SWAP2 POP PUSH2 0x20D4 DUP4 PUSH2 0x1903 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2109 JUMPI PUSH2 0x2108 PUSH2 0x1F81 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x26 0xCE 0x2B LOG2 DUP2 SGT 0x28 0xE7 SMOD DUP5 CREATE 0xEF 0xD8 SWAP4 DUP6 0xD8 0xC8 ADD BLOCKHASH DUP15 CALLDATASIZE ISZERO PUSH1 0x45 CODECOPY DUP6 TIMESTAMP 0xC6 0x5E PUSH26 0x1F64736F6C634300080A00330000000000000000000000000000 ",
							"sourceMap": "891:20490:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3077:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6107:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7579:200;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7155:363;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2339:306;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8418:164;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8648:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5922:123;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3436:203;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6269:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7846:282;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8893:360;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1259:37;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6437:328;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8194:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3077:300;3179:4;3229:25;3214:40;;;:11;:40;;;;:104;;;;3285:33;3270:48;;;:11;:48;;;;3214:104;:156;;;;3334:36;3358:11;3334:23;:36::i;:::-;3214:156;3195:175;;3077:300;;;:::o;6107:98::-;6161:13;6193:5;6186:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6107:98;:::o;7579:200::-;7647:7;7671:16;7679:7;7671;:16::i;:::-;7666:64;;7696:34;;;;;;;;;;;;;;7666:64;7748:15;:24;7764:7;7748:24;;;;;;;;;;;;;;;;;;;;;7741:31;;7579:200;;;:::o;7155:363::-;7227:13;7243:24;7259:7;7243:15;:24::i;:::-;7227:40;;7287:5;7281:11;;:2;:11;;;7277:48;;;7301:24;;;;;;;;;;;;;;7277:48;7356:5;7340:21;;:12;:10;:12::i;:::-;:21;;;7336:137;;7367:37;7384:5;7391:12;:10;:12::i;:::-;7367:16;:37::i;:::-;7363:110;;7427:35;;;;;;;;;;;;;;7363:110;7336:137;7483:28;7492:2;7496:7;7505:5;7483:8;:28::i;:::-;7217:301;7155:363;;:::o;2339:306::-;2392:7;2613:15;:13;:15::i;:::-;2598:12;;2582:13;;:28;:46;2575:53;;2339:306;:::o;8418:164::-;8547:28;8557:4;8563:2;8567:7;8547:9;:28::i;:::-;8418:164;;;:::o;8648:179::-;8781:39;8798:4;8804:2;8808:7;8781:39;;;;;;;;;;;;:16;:39::i;:::-;8648:179;;;:::o;5922:123::-;5986:7;6012:21;6025:7;6012:12;:21::i;:::-;:26;;;6005:33;;5922:123;;;:::o;3436:203::-;3500:7;3540:1;3523:19;;:5;:19;;;3519:60;;;3551:28;;;;;;;;;;;;;;3519:60;3604:12;:19;3617:5;3604:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;3596:36;;3589:43;;3436:203;;;:::o;6269:102::-;6325:13;6357:7;6350:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6269:102;:::o;7846:282::-;7956:12;:10;:12::i;:::-;7944:24;;:8;:24;;;7940:54;;;7977:17;;;;;;;;;;;;;;7940:54;8050:8;8005:18;:32;8024:12;:10;:12::i;:::-;8005:32;;;;;;;;;;;;;;;:42;8038:8;8005:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;8102:8;8073:48;;8088:12;:10;:12::i;:::-;8073:48;;;8112:8;8073:48;;;;;;:::i;:::-;;;;;;;;7846:282;;:::o;8893:360::-;9054:28;9064:4;9070:2;9074:7;9054:9;:28::i;:::-;9096:15;:2;:13;;;:15::i;:::-;9092:155;;;9117:56;9148:4;9154:2;9158:7;9167:5;9117:30;:56::i;:::-;9113:134;;9196:40;;;;;;;;;;;;;;9113:134;9092:155;8893:360;;;;:::o;1259:37::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6437:328::-;6510:13;6540:16;6548:7;6540;:16::i;:::-;6535:59;;6565:29;;;;;;;;;;;;;;6535:59;6605:21;6629:10;:8;:10::i;:::-;6605:34;;6681:1;6662:7;6656:21;:26;;:102;;;;;;;;;;;;;;;;;6709:7;6718:18;:7;:16;:18::i;:::-;6738:13;6692:60;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6656:102;6649:109;;;6437:328;;;:::o;8194:162::-;8291:4;8314:18;:25;8333:5;8314:25;;;;;;;;;;;;;;;:35;8340:8;8314:35;;;;;;;;;;;;;;;;;;;;;;;;;8307:42;;8194:162;;;;:::o;829:155:6:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;9499:172:8:-;9556:4;9598:7;9579:15;:13;:15::i;:::-;:26;;:53;;;;;9619:13;;9609:7;:23;9579:53;:85;;;;;9637:11;:20;9649:7;9637:20;;;;;;;;;;;:27;;;;;;;;;;;;9636:28;9579:85;9572:92;;9499:172;;;:::o;640:96:4:-;693:7;719:10;712:17;;640:96;:::o;18480:189:8:-;18617:2;18590:15;:24;18606:7;18590:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;18654:7;18650:2;18634:28;;18643:5;18634:28;;;;;;;;;;;;18480:189;;;:::o;2120:90::-;2176:7;2120:90;:::o;13555:2082::-;13665:35;13703:21;13716:7;13703:12;:21::i;:::-;13665:59;;13761:4;13739:26;;:13;:18;;;:26;;;13735:67;;13774:28;;;;;;;;;;;;;;13735:67;13813:22;13855:4;13839:20;;:12;:10;:12::i;:::-;:20;;;:72;;;;13875:36;13892:4;13898:12;:10;:12::i;:::-;13875:16;:36::i;:::-;13839:72;:124;;;;13951:12;:10;:12::i;:::-;13927:36;;:20;13939:7;13927:11;:20::i;:::-;:36;;;13839:124;13813:151;;13980:17;13975:66;;14006:35;;;;;;;;;;;;;;13975:66;14069:1;14055:16;;:2;:16;;;14051:52;;;14080:23;;;;;;;;;;;;;;14051:52;14114:43;14136:4;14142:2;14146:7;14155:1;14114:21;:43::i;:::-;14219:35;14236:1;14240:7;14249:4;14219:8;:35::i;:::-;14574:1;14544:12;:18;14557:4;14544:18;;;;;;;;;;;;;;;:26;;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14617:1;14589:12;:16;14602:2;14589:16;;;;;;;;;;;;;;;:24;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14633:31;14667:11;:20;14679:7;14667:20;;;;;;;;;;;14633:54;;14717:2;14701:8;:13;;;:18;;;;;;;;;;;;;;;;;;14766:15;14733:8;:23;;;:49;;;;;;;;;;;;;;;;;;15030:19;15062:1;15052:7;:11;15030:33;;15077:31;15111:11;:24;15123:11;15111:24;;;;;;;;;;;15077:58;;15178:1;15153:27;;:8;:13;;;;;;;;;;;;:27;;;15149:377;;;15360:13;;15345:11;:28;15341:171;;15413:4;15397:8;:13;;;:20;;;;;;;;;;;;;;;;;;15465:13;:28;;;15439:8;:23;;;:54;;;;;;;;;;;;;;;;;;15341:171;15149:377;14520:1016;;;15570:7;15566:2;15551:27;;15560:4;15551:27;;;;;;;;;;;;15588:42;15609:4;15615:2;15619:7;15628:1;15588:20;:42::i;:::-;13655:1982;;13555:2082;;;:::o;4779:1086::-;4841:21;;:::i;:::-;4874:12;4889:7;4874:22;;4954:4;4935:15;:13;:15::i;:::-;:23;4931:870;;4971:13;;4964:4;:20;4960:841;;;5004:31;5038:11;:17;5050:4;5038:17;;;;;;;;;;;5004:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5078:9;:16;;;5073:714;;5148:1;5122:28;;:9;:14;;;:28;;;5118:99;;5185:9;5178:16;;;;;;5118:99;5514:255;5521:4;5514:255;;;5553:6;;;;;;;;5597:11;:17;5609:4;5597:17;;;;;;;;;;;5585:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5670:1;5644:28;;:9;:14;;;:28;;;5640:107;;5711:9;5704:16;;;;;;5640:107;5514:255;;;5073:714;4986:815;4960:841;4931:870;5827:31;;;;;;;;;;;;;;4779:1086;;;;:::o;1175:320:3:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;19150:650:8:-;19308:4;19344:2;19328:36;;;19365:12;:10;:12::i;:::-;19379:4;19385:7;19394:5;19328:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;19324:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19576:1;19559:6;:13;:18;19555:229;;;19604:40;;;;;;;;;;;;;;19555:229;19744:6;19738:13;19729:6;19725:2;19721:15;19714:38;19324:470;19456:45;;;19446:55;;;:6;:55;;;;19439:62;;;19150:650;;;;;;:::o;7006:92::-;7057:13;7082:9;;;;;;;;;;;;;;7006:92;:::o;392:703:5:-;448:13;674:1;665:5;:10;661:51;;;691:10;;;;;;;;;;;;;;;;;;;;;661:51;721:12;736:5;721:20;;751:14;775:75;790:1;782:4;:9;775:75;;807:8;;;;;:::i;:::-;;;;837:2;829:10;;;;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;859:39;;908:150;924:1;915:5;:10;908:150;;951:1;941:11;;;;;:::i;:::-;;;1017:2;1009:5;:10;;;;:::i;:::-;996:2;:24;;;;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;;:56;;;;;;;;;;;1045:2;1036:11;;;;;:::i;:::-;;;908:150;;;1081:6;1067:21;;;;;392:703;;;;:::o;20431:154:8:-;;;;;:::o;21226:153::-;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:10:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:118::-;5025:24;5043:5;5025:24;:::i;:::-;5020:3;5013:37;4938:118;;:::o;5062:222::-;5155:4;5193:2;5182:9;5178:18;5170:26;;5206:71;5274:1;5263:9;5259:17;5250:6;5206:71;:::i;:::-;5062:222;;;;:::o;5290:619::-;5367:6;5375;5383;5432:2;5420:9;5411:7;5407:23;5403:32;5400:119;;;5438:79;;:::i;:::-;5400:119;5558:1;5583:53;5628:7;5619:6;5608:9;5604:22;5583:53;:::i;:::-;5573:63;;5529:117;5685:2;5711:53;5756:7;5747:6;5736:9;5732:22;5711:53;:::i;:::-;5701:63;;5656:118;5813:2;5839:53;5884:7;5875:6;5864:9;5860:22;5839:53;:::i;:::-;5829:63;;5784:118;5290:619;;;;;:::o;5915:329::-;5974:6;6023:2;6011:9;6002:7;5998:23;5994:32;5991:119;;;6029:79;;:::i;:::-;5991:119;6149:1;6174:53;6219:7;6210:6;6199:9;6195:22;6174:53;:::i;:::-;6164:63;;6120:117;5915:329;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:148::-;11128:11;11165:3;11150:18;;11026:148;;;;:::o;11180:377::-;11286:3;11314:39;11347:5;11314:39;:::i;:::-;11369:89;11451:6;11446:3;11369:89;:::i;:::-;11362:96;;11467:52;11512:6;11507:3;11500:4;11493:5;11489:16;11467:52;:::i;:::-;11544:6;11539:3;11535:16;11528:23;;11290:267;11180:377;;;;:::o;11563:141::-;11612:4;11635:3;11627:11;;11658:3;11655:1;11648:14;11692:4;11689:1;11679:18;11671:26;;11563:141;;;:::o;11734:845::-;11837:3;11874:5;11868:12;11903:36;11929:9;11903:36;:::i;:::-;11955:89;12037:6;12032:3;11955:89;:::i;:::-;11948:96;;12075:1;12064:9;12060:17;12091:1;12086:137;;;;12237:1;12232:341;;;;12053:520;;12086:137;12170:4;12166:9;12155;12151:25;12146:3;12139:38;12206:6;12201:3;12197:16;12190:23;;12086:137;;12232:341;12299:38;12331:5;12299:38;:::i;:::-;12359:1;12373:154;12387:6;12384:1;12381:13;12373:154;;;12461:7;12455:14;12451:1;12446:3;12442:11;12435:35;12511:1;12502:7;12498:15;12487:26;;12409:4;12406:1;12402:12;12397:17;;12373:154;;;12556:6;12551:3;12547:16;12540:23;;12239:334;;12053:520;;11841:738;;11734:845;;;;:::o;12585:589::-;12810:3;12832:95;12923:3;12914:6;12832:95;:::i;:::-;12825:102;;12944:95;13035:3;13026:6;12944:95;:::i;:::-;12937:102;;13056:92;13144:3;13135:6;13056:92;:::i;:::-;13049:99;;13165:3;13158:10;;12585:589;;;;;;:::o;13180:98::-;13231:6;13265:5;13259:12;13249:22;;13180:98;;;:::o;13284:168::-;13367:11;13401:6;13396:3;13389:19;13441:4;13436:3;13432:14;13417:29;;13284:168;;;;:::o;13458:360::-;13544:3;13572:38;13604:5;13572:38;:::i;:::-;13626:70;13689:6;13684:3;13626:70;:::i;:::-;13619:77;;13705:52;13750:6;13745:3;13738:4;13731:5;13727:16;13705:52;:::i;:::-;13782:29;13804:6;13782:29;:::i;:::-;13777:3;13773:39;13766:46;;13548:270;13458:360;;;;:::o;13824:640::-;14019:4;14057:3;14046:9;14042:19;14034:27;;14071:71;14139:1;14128:9;14124:17;14115:6;14071:71;:::i;:::-;14152:72;14220:2;14209:9;14205:18;14196:6;14152:72;:::i;:::-;14234;14302:2;14291:9;14287:18;14278:6;14234:72;:::i;:::-;14353:9;14347:4;14343:20;14338:2;14327:9;14323:18;14316:48;14381:76;14452:4;14443:6;14381:76;:::i;:::-;14373:84;;13824:640;;;;;;;:::o;14470:141::-;14526:5;14557:6;14551:13;14542:22;;14573:32;14599:5;14573:32;:::i;:::-;14470:141;;;;:::o;14617:349::-;14686:6;14735:2;14723:9;14714:7;14710:23;14706:32;14703:119;;;14741:79;;:::i;:::-;14703:119;14861:1;14886:63;14941:7;14932:6;14921:9;14917:22;14886:63;:::i;:::-;14876:73;;14832:127;14617:349;;;;:::o;14972:180::-;15020:77;15017:1;15010:88;15117:4;15114:1;15107:15;15141:4;15138:1;15131:15;15158:233;15197:3;15220:24;15238:5;15220:24;:::i;:::-;15211:33;;15266:66;15259:5;15256:77;15253:103;;;15336:18;;:::i;:::-;15253:103;15383:1;15376:5;15372:13;15365:20;;15158:233;;;:::o;15397:180::-;15445:77;15442:1;15435:88;15542:4;15539:1;15532:15;15566:4;15563:1;15556:15;15583:185;15623:1;15640:20;15658:1;15640:20;:::i;:::-;15635:25;;15674:20;15692:1;15674:20;:::i;:::-;15669:25;;15713:1;15703:35;;15718:18;;:::i;:::-;15703:35;15760:1;15757;15753:9;15748:14;;15583:185;;;;:::o;15774:191::-;15814:4;15834:20;15852:1;15834:20;:::i;:::-;15829:25;;15868:20;15886:1;15868:20;:::i;:::-;15863:25;;15907:1;15904;15901:8;15898:34;;;15912:18;;:::i;:::-;15898:34;15957:1;15954;15950:9;15942:17;;15774:191;;;;:::o;15971:176::-;16003:1;16020:20;16038:1;16020:20;:::i;:::-;16015:25;;16054:20;16072:1;16054:20;:::i;:::-;16049:25;;16093:1;16083:35;;16098:18;;:::i;:::-;16083:35;16139:1;16136;16132:9;16127:14;;15971:176;;;;:::o;16153:305::-;16193:3;16212:20;16230:1;16212:20;:::i;:::-;16207:25;;16246:20;16264:1;16246:20;:::i;:::-;16241:25;;16400:1;16332:66;16328:74;16325:1;16322:81;16319:107;;;16406:18;;:::i;:::-;16319:107;16450:1;16447;16443:9;16436:16;;16153:305;;;;:::o;16464:180::-;16512:77;16509:1;16502:88;16609:4;16606:1;16599:15;16633:4;16630:1;16623:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1713800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2972",
								"baseExtension()": "infinite",
								"getApproved(uint256)": "7458",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "797",
								"symbol()": "infinite",
								"tokenURI(uint256)": "5628",
								"totalSupply()": "4621",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfers(address,address,uint256,uint256)": "17",
								"_approve(address,uint256,address)": "26292",
								"_baseURI()": "infinite",
								"_beforeTokenTransfers(address,address,uint256,uint256)": "17",
								"_burn(uint256)": "infinite",
								"_burn(uint256,bool)": "infinite",
								"_checkContractOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "4499",
								"_getAux(address)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_numberBurned(address)": "infinite",
								"_numberMinted(address)": "infinite",
								"_ownershipOf(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_setAux(address,uint64)": "infinite",
								"_startTokenId()": "15",
								"_totalMinted()": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "2E6A736F6E000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1259,
									"end": 1296,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "tag",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1948,
									"end": 1953,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1945,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "tag",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1940,
									"end": 1953,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1973,
									"end": 1980,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1970,
									"name": "PUSH",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "tag",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1980,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "10"
								},
								{
									"begin": 2006,
									"end": 2019,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 2006,
									"end": 2019,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2006,
									"end": 2019,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "SHR",
									"source": 8
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "tag",
									"source": 8,
									"value": "10"
								},
								{
									"begin": 2006,
									"end": 2021,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1990,
									"end": 2003,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1990,
									"end": 2021,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1990,
									"end": 2021,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1990,
									"end": 2021,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1990,
									"end": 2021,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1874,
									"end": 2028,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2120,
									"end": 2210,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 2120,
									"end": 2210,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 2176,
									"end": 2183,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2120,
									"end": 2210,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2120,
									"end": 2210,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "KECCAK256",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DIV",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "FF"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "23"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "23"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 40,
									"end": 46,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 73,
									"end": 75,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 67,
									"end": 76,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 57,
									"end": 76,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 57,
									"end": 76,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 82,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 211,
									"end": 328,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 211,
									"end": 328,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 320,
									"end": 321,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 317,
									"end": 318,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 310,
									"end": 322,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 334,
									"end": 451,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 334,
									"end": 451,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 433,
									"end": 445,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 457,
									"end": 574,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 457,
									"end": 574,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 566,
									"end": 567,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 563,
									"end": 564,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 556,
									"end": 568,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 580,
									"end": 682,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 580,
									"end": 682,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 621,
									"end": 627,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 672,
									"end": 674,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 668,
									"end": 675,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 663,
									"end": 665,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 656,
									"end": 661,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 652,
									"end": 666,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 648,
									"end": 676,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 638,
									"end": 676,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 638,
									"end": 676,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 580,
									"end": 682,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 580,
									"end": 682,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 688,
									"end": 868,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 688,
									"end": 868,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 736,
									"end": 813,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 733,
									"end": 734,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 726,
									"end": 814,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 833,
									"end": 837,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 830,
									"end": 831,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 823,
									"end": 838,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 857,
									"end": 861,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 854,
									"end": 855,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 847,
									"end": 862,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "tag",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 979,
									"end": 983,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "tag",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 949,
									"end": 955,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 945,
									"end": 985,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1087,
									"end": 1093,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1075,
									"end": 1085,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1072,
									"end": 1094,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1051,
									"end": 1069,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1039,
									"end": 1049,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1070,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1033,
									"end": 1095,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "50"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "tag",
									"source": 10,
									"value": "50"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "tag",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1138,
									"end": 1148,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1134,
									"end": 1136,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1127,
									"end": 1149,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 917,
									"end": 1155,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1195,
									"end": 1201,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "52"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "tag",
									"source": 10,
									"value": "52"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "53"
								},
								{
									"begin": 1279,
									"end": 1283,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1271,
									"end": 1277,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "tag",
									"source": 10,
									"value": "53"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1358,
									"end": 1362,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1448,
									"end": 1466,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1440,
									"end": 1446,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1437,
									"end": 1467,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "55"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "56"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "tag",
									"source": 10,
									"value": "56"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "tag",
									"source": 10,
									"value": "55"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "57"
								},
								{
									"begin": 1530,
									"end": 1536,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "tag",
									"source": 10,
									"value": "57"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1592,
									"end": 1596,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1586,
									"end": 1590,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1582,
									"end": 1597,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "tag",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1678,
									"end": 1679,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "tag",
									"source": 10,
									"value": "59"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1702,
									"end": 1708,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1699,
									"end": 1700,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1696,
									"end": 1709,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "61"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1787,
									"end": 1788,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1782,
									"end": 1785,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1778,
									"end": 1789,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1772,
									"end": 1790,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1768,
									"end": 1769,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1763,
									"end": 1766,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1759,
									"end": 1770,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1752,
									"end": 1791,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1724,
									"end": 1726,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1721,
									"end": 1722,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1717,
									"end": 1727,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1712,
									"end": 1727,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1712,
									"end": 1727,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "59"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "tag",
									"source": 10,
									"value": "61"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1819,
									"end": 1825,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1816,
									"end": 1817,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1813,
									"end": 1826,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "62"
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1899,
									"end": 1900,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1890,
									"end": 1896,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1885,
									"end": 1888,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1881,
									"end": 1897,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1874,
									"end": 1901,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "tag",
									"source": 10,
									"value": "62"
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1659,
									"end": 1917,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2012,
									"end": 2017,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "64"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "65"
								},
								{
									"begin": 2095,
									"end": 2101,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "tag",
									"source": 10,
									"value": "65"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "tag",
									"source": 10,
									"value": "64"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2028,
									"end": 2103,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2028,
									"end": 2103,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2126,
									"end": 2132,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2119,
									"end": 2124,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2112,
									"end": 2133,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2164,
									"end": 2168,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2157,
									"end": 2162,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2153,
									"end": 2169,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2202,
									"end": 2205,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2193,
									"end": 2199,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2188,
									"end": 2191,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2184,
									"end": 2200,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2181,
									"end": 2206,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "66"
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "tag",
									"source": 10,
									"value": "67"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "tag",
									"source": 10,
									"value": "66"
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2331,
									"end": 2337,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2326,
									"end": 2329,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2321,
									"end": 2324,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "tag",
									"source": 10,
									"value": "68"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2018,
									"end": 2344,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2431,
									"end": 2436,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2480,
									"end": 2483,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2473,
									"end": 2477,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 2465,
									"end": 2471,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2461,
									"end": 2478,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2457,
									"end": 2484,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "70"
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "tag",
									"source": 10,
									"value": "71"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "tag",
									"source": 10,
									"value": "70"
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2598,
									"end": 2604,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 2592,
									"end": 2605,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "72"
								},
								{
									"begin": 2709,
									"end": 2712,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2701,
									"end": 2707,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2694,
									"end": 2698,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2686,
									"end": 2692,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 2682,
									"end": 2699,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "tag",
									"source": 10,
									"value": "72"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2614,
									"end": 2713,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2614,
									"end": 2713,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2437,
									"end": 2719,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "tag",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2824,
									"end": 2830,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2832,
									"end": 2838,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2881,
									"end": 2883,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 2869,
									"end": 2878,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2860,
									"end": 2867,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 2856,
									"end": 2879,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 2852,
									"end": 2884,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "tag",
									"source": 10,
									"value": "75"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "tag",
									"source": 10,
									"value": "74"
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3028,
									"end": 3029,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3017,
									"end": 3026,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3013,
									"end": 3030,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 3007,
									"end": 3031,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 3058,
									"end": 3076,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3050,
									"end": 3056,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3047,
									"end": 3077,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "tag",
									"source": 10,
									"value": "77"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "tag",
									"source": 10,
									"value": "76"
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "78"
								},
								{
									"begin": 3251,
									"end": 3258,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 3242,
									"end": 3248,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3231,
									"end": 3240,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 3227,
									"end": 3249,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "tag",
									"source": 10,
									"value": "78"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3175,
									"end": 3259,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3175,
									"end": 3259,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2978,
									"end": 3269,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3329,
									"end": 3331,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 3318,
									"end": 3327,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3314,
									"end": 3332,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 3308,
									"end": 3333,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 3360,
									"end": 3378,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3352,
									"end": 3358,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3349,
									"end": 3379,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "tag",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "tag",
									"source": 10,
									"value": "79"
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "81"
								},
								{
									"begin": 3553,
									"end": 3560,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 3544,
									"end": 3550,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3533,
									"end": 3542,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 3529,
									"end": 3551,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "tag",
									"source": 10,
									"value": "81"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3477,
									"end": 3561,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3477,
									"end": 3561,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3279,
									"end": 3571,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 3584,
									"end": 3764,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 3584,
									"end": 3764,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3632,
									"end": 3709,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3629,
									"end": 3630,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3622,
									"end": 3710,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3729,
									"end": 3733,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3726,
									"end": 3727,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 3719,
									"end": 3734,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3753,
									"end": 3757,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3750,
									"end": 3751,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3743,
									"end": 3758,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "tag",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3814,
									"end": 3820,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3852,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 3845,
									"end": 3849,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3841,
									"end": 3853,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 3831,
									"end": 3853,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3831,
									"end": 3853,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3898,
									"end": 3899,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 3892,
									"end": 3896,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3888,
									"end": 3900,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 3919,
									"end": 3937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "84"
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3975,
									"end": 3979,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 3967,
									"end": 3973,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3963,
									"end": 3980,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 3953,
									"end": 3980,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3953,
									"end": 3980,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "tag",
									"source": 10,
									"value": "84"
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4037,
									"end": 4039,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 4029,
									"end": 4035,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4026,
									"end": 4040,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 4003,
									"end": 4041,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "85"
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "tag",
									"source": 10,
									"value": "86"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "tag",
									"source": 10,
									"value": "85"
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3821,
									"end": 4090,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "tag",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 891,
									"end": 21381,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ee26ce2ba2811328e70784f0efd89385d8c801408e36156045398542c65e791f64736f6c634300080a0033",
									".code": [
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "6352211E"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "B88D4FDE"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "B88D4FDE"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "C6682862"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "C87B56DD"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "E985E9C5"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "6352211E"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "95D89B41"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "A22CB465"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "18160DDD"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "42842E0E"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "1FFC9A7"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "6FDDE03"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "81812FC"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 891,
											"end": 21381,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "tag",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "tag",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "tag",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "tag",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "tag",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "tag",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "tag",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "tag",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "tag",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3179,
											"end": 3183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3229,
											"end": 3254,
											"name": "PUSH",
											"source": 8,
											"value": "80AC58CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3225,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3254,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3285,
											"end": 3318,
											"name": "PUSH",
											"source": 8,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3281,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3270,
											"end": 3318,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "tag",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 3214,
											"end": 3318,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 3358,
											"end": 3369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3357,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 3334,
											"end": 3370,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3334,
											"end": 3370,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 3334,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 3214,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3195,
											"end": 3370,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3195,
											"end": 3370,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3077,
											"end": 3377,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6161,
											"end": 6174,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6193,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "tag",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "tag",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "tag",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6186,
											"end": 6198,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6107,
											"end": 6205,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7647,
											"end": 7654,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7671,
											"end": 7687,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 7679,
											"end": 7686,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7671,
											"end": 7678,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 7671,
											"end": 7687,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7671,
											"end": 7687,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 7671,
											"end": 7687,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7666,
											"end": 7730,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 7666,
											"end": 7730,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "PUSH",
											"source": 8,
											"value": "CF4700E400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7696,
											"end": 7730,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7666,
											"end": 7730,
											"name": "tag",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 7666,
											"end": 7730,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7763,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7764,
											"end": 7771,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7748,
											"end": 7772,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7741,
											"end": 7772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7741,
											"end": 7772,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7579,
											"end": 7779,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7227,
											"end": 7240,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 7259,
											"end": 7266,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7243,
											"end": 7258,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 7243,
											"end": 7267,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7243,
											"end": 7267,
											"name": "tag",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 7243,
											"end": 7267,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7227,
											"end": 7267,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7227,
											"end": 7267,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7287,
											"end": 7292,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7281,
											"end": 7283,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7277,
											"end": 7325,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7277,
											"end": 7325,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "102"
										},
										{
											"begin": 7277,
											"end": 7325,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "PUSH",
											"source": 8,
											"value": "943F7B8C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7301,
											"end": 7325,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7277,
											"end": 7325,
											"name": "tag",
											"source": 8,
											"value": "102"
										},
										{
											"begin": 7277,
											"end": 7325,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7356,
											"end": 7361,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7340,
											"end": 7361,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7340,
											"end": 7361,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 7340,
											"end": 7350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "tag",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 7340,
											"end": 7352,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7340,
											"end": 7361,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7340,
											"end": 7361,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7340,
											"end": 7361,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7336,
											"end": 7473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 7336,
											"end": 7473,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7367,
											"end": 7404,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 7384,
											"end": 7389,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7403,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 7391,
											"end": 7401,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 7391,
											"end": 7403,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7391,
											"end": 7403,
											"name": "tag",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 7391,
											"end": 7403,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7367,
											"end": 7383,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 7367,
											"end": 7404,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7367,
											"end": 7404,
											"name": "tag",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 7367,
											"end": 7404,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7363,
											"end": 7473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 7363,
											"end": 7473,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "PUSH",
											"source": 8,
											"value": "CFB3B94200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7427,
											"end": 7462,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7363,
											"end": 7473,
											"name": "tag",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 7363,
											"end": 7473,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7336,
											"end": 7473,
											"name": "tag",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 7336,
											"end": 7473,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7483,
											"end": 7511,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 7492,
											"end": 7494,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7496,
											"end": 7503,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7505,
											"end": 7510,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7483,
											"end": 7491,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 7483,
											"end": 7511,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7483,
											"end": 7511,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 7483,
											"end": 7511,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7217,
											"end": 7518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7155,
											"end": 7518,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2392,
											"end": 2399,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2613,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 2613,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 2613,
											"end": 2628,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2613,
											"end": 2628,
											"name": "tag",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 2613,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2598,
											"end": 2610,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2598,
											"end": 2610,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2595,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2582,
											"end": 2595,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2610,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2628,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2628,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2628,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2645,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8547,
											"end": 8575,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 8557,
											"end": 8561,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8563,
											"end": 8565,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8567,
											"end": 8574,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8547,
											"end": 8556,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 8547,
											"end": 8575,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8547,
											"end": 8575,
											"name": "tag",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 8547,
											"end": 8575,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8582,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "tag",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 8798,
											"end": 8802,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8804,
											"end": 8806,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8808,
											"end": 8815,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8781,
											"end": 8797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 8781,
											"end": 8820,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8648,
											"end": 8827,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5986,
											"end": 5993,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6012,
											"end": 6033,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6025,
											"end": 6032,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6012,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 6012,
											"end": 6033,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6012,
											"end": 6033,
											"name": "tag",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6012,
											"end": 6033,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6012,
											"end": 6038,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6012,
											"end": 6038,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6012,
											"end": 6038,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6005,
											"end": 6038,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6005,
											"end": 6038,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 6045,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3500,
											"end": 3507,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3540,
											"end": 3541,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3542,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3523,
											"end": 3542,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3528,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3542,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3523,
											"end": 3542,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3542,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3579,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3519,
											"end": 3579,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "PUSH",
											"source": 8,
											"value": "8F4EB60400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3551,
											"end": 3579,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3579,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3519,
											"end": 3579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3616,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3617,
											"end": 3622,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3604,
											"end": 3623,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3604,
											"end": 3631,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3596,
											"end": 3632,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3596,
											"end": 3632,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3589,
											"end": 3632,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3589,
											"end": 3632,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3436,
											"end": 3639,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6325,
											"end": 6338,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6357,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "tag",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "tag",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "tag",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6364,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6269,
											"end": 6371,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "tag",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7956,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 7956,
											"end": 7966,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 7956,
											"end": 7968,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7956,
											"end": 7968,
											"name": "tag",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 7956,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7944,
											"end": 7952,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7940,
											"end": 7994,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7940,
											"end": 7994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "132"
										},
										{
											"begin": 7940,
											"end": 7994,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "PUSH",
											"source": 8,
											"value": "B06307DB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7977,
											"end": 7994,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7940,
											"end": 7994,
											"name": "tag",
											"source": 8,
											"value": "132"
										},
										{
											"begin": 7940,
											"end": 7994,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8050,
											"end": 8058,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8023,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8024,
											"end": 8036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 8024,
											"end": 8034,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 8024,
											"end": 8036,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8024,
											"end": 8036,
											"name": "tag",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 8024,
											"end": 8036,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8005,
											"end": 8037,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8038,
											"end": 8046,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8005,
											"end": 8058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8102,
											"end": 8110,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8088,
											"end": 8100,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 8088,
											"end": 8098,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 8088,
											"end": 8100,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8088,
											"end": 8100,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 8088,
											"end": 8100,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH",
											"source": 8,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 8112,
											"end": 8120,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "tag",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8073,
											"end": 8121,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7846,
											"end": 8128,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9054,
											"end": 9082,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 9064,
											"end": 9068,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9070,
											"end": 9072,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9074,
											"end": 9081,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9054,
											"end": 9063,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 9054,
											"end": 9082,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9054,
											"end": 9082,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 9054,
											"end": 9082,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9111,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 9096,
											"end": 9098,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9109,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9096,
											"end": 9109,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9109,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 9096,
											"end": 9111,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9096,
											"end": 9111,
											"name": "tag",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 9096,
											"end": 9111,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9092,
											"end": 9247,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9092,
											"end": 9247,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 9092,
											"end": 9247,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9117,
											"end": 9173,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 9148,
											"end": 9152,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9154,
											"end": 9156,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9158,
											"end": 9165,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9167,
											"end": 9172,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9117,
											"end": 9147,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 9117,
											"end": 9173,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9117,
											"end": 9173,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 9117,
											"end": 9173,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9113,
											"end": 9247,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 9113,
											"end": 9247,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "PUSH",
											"source": 8,
											"value": "D1A57ED600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9236,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9113,
											"end": 9247,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 9113,
											"end": 9247,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9092,
											"end": 9247,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 9092,
											"end": 9247,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8893,
											"end": 9253,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1296,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6510,
											"end": 6523,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6540,
											"end": 6556,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 6548,
											"end": 6555,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6540,
											"end": 6547,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 6540,
											"end": 6556,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6540,
											"end": 6556,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 6540,
											"end": 6556,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6535,
											"end": 6594,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 6535,
											"end": 6594,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "PUSH",
											"source": 8,
											"value": "A14C4B5000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6594,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6535,
											"end": 6594,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 6535,
											"end": 6594,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6605,
											"end": 6626,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6629,
											"end": 6639,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 6629,
											"end": 6637,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 6629,
											"end": 6639,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6629,
											"end": 6639,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 6629,
											"end": 6639,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6605,
											"end": 6639,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6605,
											"end": 6639,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6681,
											"end": 6682,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6662,
											"end": 6669,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6677,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6709,
											"end": 6716,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6718,
											"end": 6736,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 6718,
											"end": 6725,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6718,
											"end": 6734,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 6718,
											"end": 6736,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6718,
											"end": 6736,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 6718,
											"end": 6736,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6738,
											"end": 6751,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "159"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6692,
											"end": 6752,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "tag",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 6656,
											"end": 6758,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 6758,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 6758,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6649,
											"end": 6758,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6437,
											"end": 6765,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8291,
											"end": 8295,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8314,
											"end": 8332,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8333,
											"end": 8338,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8314,
											"end": 8339,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8340,
											"end": 8348,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 8314,
											"end": 8349,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8307,
											"end": 8349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8307,
											"end": 8349,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8194,
											"end": 8356,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 914,
											"end": 918,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 937,
											"end": 948,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 930,
											"end": 977,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 930,
											"end": 977,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9556,
											"end": 9560,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9598,
											"end": 9605,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9594,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 9579,
											"end": 9592,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 9579,
											"end": 9594,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9579,
											"end": 9594,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 9579,
											"end": 9594,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9605,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9605,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9619,
											"end": 9632,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9619,
											"end": 9632,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 9609,
											"end": 9616,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9609,
											"end": 9632,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 9579,
											"end": 9632,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9648,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9649,
											"end": 9656,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9637,
											"end": 9657,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "PUSH",
											"source": 8,
											"value": "1C"
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 9637,
											"end": 9664,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9636,
											"end": 9664,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 9579,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9572,
											"end": 9664,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9572,
											"end": 9664,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9499,
											"end": 9671,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "tag",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18617,
											"end": 18619,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18605,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18606,
											"end": 18613,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 18590,
											"end": 18619,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18654,
											"end": 18661,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18650,
											"end": 18652,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 18643,
											"end": 18648,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "PUSH",
											"source": 8,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18634,
											"end": 18662,
											"name": "LOG4",
											"source": 8
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18480,
											"end": 18669,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2120,
											"end": 2210,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 2120,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2176,
											"end": 2183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2120,
											"end": 2210,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2120,
											"end": 2210,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13665,
											"end": 13700,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13703,
											"end": 13724,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 13716,
											"end": 13723,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13703,
											"end": 13715,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 13703,
											"end": 13724,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13703,
											"end": 13724,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 13703,
											"end": 13724,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13665,
											"end": 13724,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13665,
											"end": 13724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13761,
											"end": 13765,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13765,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13739,
											"end": 13765,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13752,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13757,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13739,
											"end": 13757,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13757,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13765,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13739,
											"end": 13765,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13739,
											"end": 13765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 13735,
											"end": 13802,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 13735,
											"end": 13802,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "PUSH",
											"source": 8,
											"value": "A114810000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13774,
											"end": 13802,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 13735,
											"end": 13802,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 13735,
											"end": 13802,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13813,
											"end": 13835,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13855,
											"end": 13859,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13859,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13839,
											"end": 13859,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13851,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 13839,
											"end": 13849,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 13839,
											"end": 13851,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13839,
											"end": 13851,
											"name": "tag",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 13839,
											"end": 13851,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13859,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13839,
											"end": 13859,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13859,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13875,
											"end": 13911,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 13892,
											"end": 13896,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 13898,
											"end": 13910,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 13898,
											"end": 13908,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 13898,
											"end": 13910,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13898,
											"end": 13910,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 13898,
											"end": 13910,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13875,
											"end": 13891,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 13875,
											"end": 13911,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13875,
											"end": 13911,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 13875,
											"end": 13911,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 13839,
											"end": 13911,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13951,
											"end": 13963,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 13951,
											"end": 13961,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 13951,
											"end": 13963,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13951,
											"end": 13963,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 13951,
											"end": 13963,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13927,
											"end": 13963,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13927,
											"end": 13963,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13927,
											"end": 13947,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 13939,
											"end": 13946,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 13927,
											"end": 13938,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 13927,
											"end": 13947,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 13927,
											"end": 13947,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 13927,
											"end": 13947,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13927,
											"end": 13963,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13927,
											"end": 13963,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13927,
											"end": 13963,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 13839,
											"end": 13963,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13813,
											"end": 13964,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13813,
											"end": 13964,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13980,
											"end": 13997,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13975,
											"end": 14041,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 13975,
											"end": 14041,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "PUSH",
											"source": 8,
											"value": "59C896BE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14006,
											"end": 14041,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 13975,
											"end": 14041,
											"name": "tag",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 13975,
											"end": 14041,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14069,
											"end": 14070,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14055,
											"end": 14071,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14055,
											"end": 14071,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14055,
											"end": 14057,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 14055,
											"end": 14071,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14055,
											"end": 14071,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14055,
											"end": 14071,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 14051,
											"end": 14103,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 14051,
											"end": 14103,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 14051,
											"end": 14103,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "PUSH",
											"source": 8,
											"value": "EA553B3400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14080,
											"end": 14103,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 14051,
											"end": 14103,
											"name": "tag",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 14051,
											"end": 14103,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14114,
											"end": 14157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 14136,
											"end": 14140,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 14146,
											"end": 14153,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 14155,
											"end": 14156,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 14114,
											"end": 14135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 14114,
											"end": 14157,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 14114,
											"end": 14157,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 14114,
											"end": 14157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14219,
											"end": 14254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 14236,
											"end": 14237,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14240,
											"end": 14247,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 14249,
											"end": 14253,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 14219,
											"end": 14227,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 14219,
											"end": 14254,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 14219,
											"end": 14254,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 14219,
											"end": 14254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14574,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 14544,
											"end": 14556,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14557,
											"end": 14561,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14544,
											"end": 14562,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14570,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14544,
											"end": 14570,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14570,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 14544,
											"end": 14575,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14617,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 14589,
											"end": 14601,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14602,
											"end": 14604,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14589,
											"end": 14605,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14613,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14589,
											"end": 14613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14613,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14633,
											"end": 14664,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14667,
											"end": 14678,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14679,
											"end": 14686,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14667,
											"end": 14687,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 14633,
											"end": 14687,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14633,
											"end": 14687,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14717,
											"end": 14719,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14709,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14714,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14701,
											"end": 14714,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14714,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 14701,
											"end": 14719,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14766,
											"end": 14781,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14741,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14756,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14733,
											"end": 14756,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14756,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 14733,
											"end": 14782,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15030,
											"end": 15049,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15062,
											"end": 15063,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 15052,
											"end": 15059,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 15052,
											"end": 15063,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15030,
											"end": 15063,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15030,
											"end": 15063,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15111,
											"end": 15122,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15123,
											"end": 15134,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15111,
											"end": 15135,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 15077,
											"end": 15135,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15077,
											"end": 15135,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15178,
											"end": 15179,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15153,
											"end": 15180,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15153,
											"end": 15180,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15161,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15153,
											"end": 15166,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15180,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15153,
											"end": 15180,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15153,
											"end": 15180,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 15149,
											"end": 15526,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 15149,
											"end": 15526,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 15149,
											"end": 15526,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 15360,
											"end": 15373,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15360,
											"end": 15373,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 15345,
											"end": 15356,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15345,
											"end": 15373,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 15341,
											"end": 15512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 15341,
											"end": 15512,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 15413,
											"end": 15417,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15405,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15410,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15397,
											"end": 15410,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15410,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 15397,
											"end": 15417,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15465,
											"end": 15478,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 15465,
											"end": 15493,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15465,
											"end": 15493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15465,
											"end": 15493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15447,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15462,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15439,
											"end": 15462,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15462,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 15439,
											"end": 15493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15341,
											"end": 15512,
											"name": "tag",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 15341,
											"end": 15512,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15149,
											"end": 15526,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 15149,
											"end": 15526,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14520,
											"end": 15536,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14520,
											"end": 15536,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14520,
											"end": 15536,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15570,
											"end": 15577,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15566,
											"end": 15568,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15560,
											"end": 15564,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "PUSH",
											"source": 8,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15551,
											"end": 15578,
											"name": "LOG4",
											"source": 8
										},
										{
											"begin": 15588,
											"end": 15630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 15609,
											"end": 15613,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 15615,
											"end": 15617,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 15619,
											"end": 15626,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 15628,
											"end": 15629,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 15588,
											"end": 15608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 15588,
											"end": 15630,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 15588,
											"end": 15630,
											"name": "tag",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 15588,
											"end": 15630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13655,
											"end": 15637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13655,
											"end": 15637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13555,
											"end": 15637,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "tag",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4841,
											"end": 4862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 4841,
											"end": 4862,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 4841,
											"end": 4862,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4841,
											"end": 4862,
											"name": "tag",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 4841,
											"end": 4862,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4874,
											"end": 4886,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4889,
											"end": 4896,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4874,
											"end": 4896,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4874,
											"end": 4896,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4954,
											"end": 4958,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4935,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 4935,
											"end": 4948,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 4935,
											"end": 4950,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4935,
											"end": 4950,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 4935,
											"end": 4950,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4935,
											"end": 4958,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4931,
											"end": 5801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 4931,
											"end": 5801,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4971,
											"end": 4984,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4971,
											"end": 4984,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4964,
											"end": 4968,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4964,
											"end": 4984,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4960,
											"end": 5801,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4960,
											"end": 5801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 4960,
											"end": 5801,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5035,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5038,
											"end": 5049,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5050,
											"end": 5054,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5038,
											"end": 5055,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "1C"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5055,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5078,
											"end": 5087,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5078,
											"end": 5094,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5078,
											"end": 5094,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5078,
											"end": 5094,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5073,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 5073,
											"end": 5787,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5148,
											"end": 5149,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5150,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5122,
											"end": 5150,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5131,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5136,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5136,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5136,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5150,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5122,
											"end": 5150,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5150,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5118,
											"end": 5217,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 5118,
											"end": 5217,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5185,
											"end": 5194,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 5178,
											"end": 5194,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5118,
											"end": 5217,
											"name": "tag",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 5118,
											"end": 5217,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5521,
											"end": 5525,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5559,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5608,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5609,
											"end": 5613,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5597,
											"end": 5614,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "1C"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5585,
											"end": 5614,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5670,
											"end": 5671,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5644,
											"end": 5672,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5644,
											"end": 5672,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5653,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5658,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5644,
											"end": 5658,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5658,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5672,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5644,
											"end": 5672,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5672,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5640,
											"end": 5747,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 5640,
											"end": 5747,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5711,
											"end": 5720,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 5704,
											"end": 5720,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5640,
											"end": 5747,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 5640,
											"end": 5747,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 5514,
											"end": 5769,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5073,
											"end": 5787,
											"name": "tag",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 5073,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4986,
											"end": 5801,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4960,
											"end": 5801,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 4960,
											"end": 5801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4931,
											"end": 5801,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 4931,
											"end": 5801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "PUSH",
											"source": 8,
											"value": "DF2D9B4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5827,
											"end": 5858,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "tag",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4779,
											"end": 5865,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "tag",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19308,
											"end": 19312,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19344,
											"end": 19346,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19364,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19328,
											"end": 19364,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19364,
											"name": "PUSH",
											"source": 8,
											"value": "150B7A02"
										},
										{
											"begin": 19365,
											"end": 19377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 19365,
											"end": 19375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 19365,
											"end": 19377,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19365,
											"end": 19377,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 19365,
											"end": 19377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19379,
											"end": 19383,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 19385,
											"end": 19392,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 19394,
											"end": 19399,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 19328,
											"end": 19400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19576,
											"end": 19577,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19559,
											"end": 19565,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19559,
											"end": 19572,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19559,
											"end": 19577,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 19555,
											"end": 19784,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 19555,
											"end": 19784,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 19555,
											"end": 19784,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "PUSH",
											"source": 8,
											"value": "D1A57ED600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19604,
											"end": 19644,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 19555,
											"end": 19784,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 19555,
											"end": 19784,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19744,
											"end": 19750,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 19738,
											"end": 19751,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 19729,
											"end": 19735,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19725,
											"end": 19727,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19721,
											"end": 19736,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19714,
											"end": 19752,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 19324,
											"end": 19794,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19456,
											"end": 19501,
											"name": "PUSH",
											"source": 8,
											"value": "150B7A02"
										},
										{
											"begin": 19456,
											"end": 19501,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 19456,
											"end": 19501,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19452,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 19446,
											"end": 19501,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 19439,
											"end": 19501,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19439,
											"end": 19501,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19439,
											"end": 19501,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19150,
											"end": 19800,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7006,
											"end": 7098,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 7006,
											"end": 7098,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7057,
											"end": 7070,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7082,
											"end": 7091,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7006,
											"end": 7098,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7006,
											"end": 7098,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 448,
											"end": 461,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 674,
											"end": 675,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 665,
											"end": 670,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 665,
											"end": 675,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 661,
											"end": 712,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 661,
											"end": 712,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "218"
										},
										{
											"begin": 661,
											"end": 712,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 691,
											"end": 701,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 661,
											"end": 712,
											"name": "tag",
											"source": 5,
											"value": "218"
										},
										{
											"begin": 661,
											"end": 712,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 721,
											"end": 733,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 741,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 721,
											"end": 741,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 721,
											"end": 741,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 751,
											"end": 765,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 850,
											"name": "tag",
											"source": 5,
											"value": "219"
										},
										{
											"begin": 775,
											"end": 850,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 790,
											"end": 791,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 782,
											"end": 786,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 782,
											"end": 791,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 775,
											"end": 850,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "220"
										},
										{
											"begin": 775,
											"end": 850,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "221"
										},
										{
											"begin": 807,
											"end": 815,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "222"
										},
										{
											"begin": 807,
											"end": 815,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 807,
											"end": 815,
											"name": "tag",
											"source": 5,
											"value": "221"
										},
										{
											"begin": 807,
											"end": 815,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 807,
											"end": 815,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 837,
											"end": 839,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 829,
											"end": 839,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 829,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 829,
											"end": 839,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 829,
											"end": 839,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 829,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 829,
											"end": 839,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 829,
											"end": 839,
											"name": "tag",
											"source": 5,
											"value": "223"
										},
										{
											"begin": 829,
											"end": 839,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 829,
											"end": 839,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 829,
											"end": 839,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 775,
											"end": 850,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "219"
										},
										{
											"begin": 775,
											"end": 850,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 775,
											"end": 850,
											"name": "tag",
											"source": 5,
											"value": "220"
										},
										{
											"begin": 775,
											"end": 850,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 859,
											"end": 878,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 891,
											"end": 897,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "tag",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "tag",
											"source": 5,
											"value": "225"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "tag",
											"source": 5,
											"value": "228"
										},
										{
											"begin": 881,
											"end": 898,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 881,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 859,
											"end": 898,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 859,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "tag",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 924,
											"end": 925,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 915,
											"end": 920,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 915,
											"end": 925,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 951,
											"end": 952,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 941,
											"end": 952,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 941,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 941,
											"end": 952,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 941,
											"end": 952,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 941,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 941,
											"end": 952,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 941,
											"end": 952,
											"name": "tag",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 941,
											"end": 952,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 941,
											"end": 952,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 941,
											"end": 952,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1017,
											"end": 1019,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 1009,
											"end": 1014,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "tag",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 1009,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "tag",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 996,
											"end": 1020,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 983,
											"end": 1022,
											"name": "PUSH",
											"source": 5,
											"value": "F8"
										},
										{
											"begin": 983,
											"end": 1022,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 966,
											"end": 972,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 973,
											"end": 979,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "tag",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 966,
											"end": 980,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 966,
											"end": 980,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": 966,
											"end": 1022,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1045,
											"end": 1047,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1047,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 908,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1081,
											"end": 1087,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1067,
											"end": 1088,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1067,
											"end": 1088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1067,
											"end": 1088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1067,
											"end": 1088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1067,
											"end": 1088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "tag",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 392,
											"end": 1095,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "tag",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20431,
											"end": 20585,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21226,
											"end": 21379,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "189"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 334,
											"end": 483,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 370,
											"end": 377,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 476,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 403,
											"end": 408,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 399,
											"end": 477,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 388,
											"end": 477,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 388,
											"end": 477,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 334,
											"end": 483,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "tag",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 578,
											"end": 583,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "tag",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 554,
											"end": 559,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 551,
											"end": 585,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 541,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 599,
											"end": 600,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 597,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 589,
											"end": 601,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 541,
											"end": 603,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 489,
											"end": 609,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 660,
											"end": 665,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 704,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 685,
											"end": 705,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 676,
											"end": 705,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 676,
											"end": 705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 740,
											"end": 745,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 816,
											"end": 822,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 865,
											"end": 867,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 853,
											"end": 862,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 844,
											"end": 851,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 840,
											"end": 863,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 836,
											"end": 868,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 833,
											"end": 952,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 833,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 833,
											"end": 952,
											"name": "tag",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 991,
											"end": 992,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 1060,
											"end": 1067,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1051,
											"end": 1057,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1040,
											"end": 1049,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1036,
											"end": 1058,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 962,
											"end": 1078,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1125,
											"end": 1132,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1161,
											"end": 1174,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1154,
											"end": 1175,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1263,
											"end": 1266,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1256,
											"end": 1290,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "tag",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1389,
											"end": 1393,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1429,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1416,
											"end": 1425,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1430,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 1502,
											"end": 1503,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1491,
											"end": 1500,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1487,
											"end": 1504,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1478,
											"end": 1484,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "tag",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1576,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1604,
											"end": 1609,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1598,
											"end": 1610,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1707,
											"end": 1718,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 1747,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1729,
											"end": 1748,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1785,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1776,
											"end": 1779,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1772,
											"end": 1786,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1866,
											"end": 1867,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1890,
											"end": 1896,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1887,
											"end": 1888,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1884,
											"end": 1897,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1975,
											"end": 1976,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1970,
											"end": 1973,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 1977,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1960,
											"end": 1978,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 1957,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1951,
											"end": 1954,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1947,
											"end": 1958,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1940,
											"end": 1979,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1912,
											"end": 1914,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1909,
											"end": 1910,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1905,
											"end": 1915,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1900,
											"end": 1915,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1900,
											"end": 1915,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2007,
											"end": 2013,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2004,
											"end": 2005,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2001,
											"end": 2014,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2087,
											"end": 2088,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2078,
											"end": 2084,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2073,
											"end": 2076,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2069,
											"end": 2085,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2089,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "tag",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1847,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2152,
											"end": 2158,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2203,
											"end": 2205,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2196,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2187,
											"end": 2192,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2183,
											"end": 2197,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2179,
											"end": 2207,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2169,
											"end": 2207,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2169,
											"end": 2207,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2307,
											"end": 2310,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2368,
											"end": 2373,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 2454,
											"end": 2460,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2449,
											"end": 2452,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "tag",
											"source": 10,
											"value": "315"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2383,
											"end": 2461,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2383,
											"end": 2461,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 2515,
											"end": 2521,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2510,
											"end": 2513,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2503,
											"end": 2507,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2496,
											"end": 2501,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 2569,
											"end": 2575,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2542,
											"end": 2545,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2538,
											"end": 2577,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2531,
											"end": 2577,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2531,
											"end": 2577,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2311,
											"end": 2583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2702,
											"end": 2706,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2729,
											"end": 2738,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2717,
											"end": 2743,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2717,
											"end": 2743,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2789,
											"end": 2798,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2783,
											"end": 2787,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2779,
											"end": 2799,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2764,
											"end": 2773,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2760,
											"end": 2777,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2753,
											"end": 2800,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 2890,
											"end": 2894,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 2887,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2809,
											"end": 2895,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2809,
											"end": 2895,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2974,
											"end": 2979,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2963,
											"end": 2979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2963,
											"end": 2979,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3082,
											"end": 3087,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3057,
											"end": 3062,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3054,
											"end": 3089,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3103,
											"end": 3104,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3100,
											"end": 3101,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3093,
											"end": 3105,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3165,
											"end": 3170,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3203,
											"end": 3209,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3190,
											"end": 3210,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3181,
											"end": 3210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3181,
											"end": 3210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 3246,
											"end": 3251,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "tag",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3323,
											"end": 3329,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3372,
											"end": 3374,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3360,
											"end": 3369,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3351,
											"end": 3358,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3347,
											"end": 3370,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3343,
											"end": 3375,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3498,
											"end": 3499,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3559,
											"end": 3565,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3544,
											"end": 3566,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "tag",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3469,
											"end": 3586,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3636,
											"end": 3643,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3718,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3669,
											"end": 3674,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3665,
											"end": 3719,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3654,
											"end": 3719,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3654,
											"end": 3719,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3768,
											"end": 3775,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 3815,
											"end": 3820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3786,
											"end": 3821,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3786,
											"end": 3821,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 3938,
											"end": 3943,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3908,
											"end": 3945,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4050,
											"end": 4054,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4088,
											"end": 4090,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4077,
											"end": 4086,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4073,
											"end": 4091,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4065,
											"end": 4091,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4065,
											"end": 4091,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 4169,
											"end": 4170,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4158,
											"end": 4167,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4154,
											"end": 4171,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4145,
											"end": 4151,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "tag",
											"source": 10,
											"value": "336"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 4276,
											"end": 4281,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "tag",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4251,
											"end": 4256,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4248,
											"end": 4283,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4297,
											"end": 4298,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "tag",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4364,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4384,
											"end": 4404,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 4375,
											"end": 4404,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4375,
											"end": 4404,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 4440,
											"end": 4445,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4526,
											"end": 4532,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4540,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4583,
											"end": 4585,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4571,
											"end": 4580,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4562,
											"end": 4569,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4558,
											"end": 4581,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4554,
											"end": 4586,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "tag",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4709,
											"end": 4710,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 4779,
											"end": 4786,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4770,
											"end": 4776,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4759,
											"end": 4768,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4755,
											"end": 4777,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "tag",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4680,
											"end": 4797,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4836,
											"end": 4838,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 4907,
											"end": 4914,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4898,
											"end": 4904,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4887,
											"end": 4896,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4883,
											"end": 4905,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "tag",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4852,
											"end": 4915,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4852,
											"end": 4915,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4807,
											"end": 4925,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 5043,
											"end": 5048,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "tag",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5020,
											"end": 5023,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5013,
											"end": 5050,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5155,
											"end": 5159,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5193,
											"end": 5195,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5182,
											"end": 5191,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5178,
											"end": 5196,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5170,
											"end": 5196,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5170,
											"end": 5196,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 5274,
											"end": 5275,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5263,
											"end": 5272,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5259,
											"end": 5276,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5250,
											"end": 5256,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5367,
											"end": 5373,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5375,
											"end": 5381,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5383,
											"end": 5389,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5432,
											"end": 5434,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5420,
											"end": 5429,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5411,
											"end": 5418,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5407,
											"end": 5430,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5403,
											"end": 5435,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "tag",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "tag",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5558,
											"end": 5559,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 5628,
											"end": 5635,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5619,
											"end": 5625,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5608,
											"end": 5617,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5604,
											"end": 5626,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "tag",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5573,
											"end": 5636,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 5573,
											"end": 5636,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5529,
											"end": 5646,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5685,
											"end": 5687,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 5756,
											"end": 5763,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5747,
											"end": 5753,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5736,
											"end": 5745,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5732,
											"end": 5754,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "tag",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5701,
											"end": 5764,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5701,
											"end": 5764,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5774,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5813,
											"end": 5815,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 5884,
											"end": 5891,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5875,
											"end": 5881,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5864,
											"end": 5873,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5860,
											"end": 5882,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "tag",
											"source": 10,
											"value": "356"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5829,
											"end": 5892,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5829,
											"end": 5892,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5784,
											"end": 5902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5974,
											"end": 5980,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6023,
											"end": 6025,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6011,
											"end": 6020,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6002,
											"end": 6009,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5998,
											"end": 6021,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5994,
											"end": 6026,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "tag",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "tag",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6149,
											"end": 6150,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 6219,
											"end": 6226,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6210,
											"end": 6216,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6199,
											"end": 6208,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6195,
											"end": 6217,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "tag",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6164,
											"end": 6227,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6164,
											"end": 6227,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6120,
											"end": 6237,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 6335,
											"end": 6340,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "tag",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6318,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6310,
											"end": 6342,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6356,
											"end": 6357,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6353,
											"end": 6354,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6346,
											"end": 6358,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "tag",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6415,
											"end": 6420,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6453,
											"end": 6459,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6440,
											"end": 6460,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 6431,
											"end": 6460,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6431,
											"end": 6460,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 6493,
											"end": 6498,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6576,
											"end": 6582,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6590,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6633,
											"end": 6635,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6621,
											"end": 6630,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6612,
											"end": 6619,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6608,
											"end": 6631,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 6604,
											"end": 6636,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6759,
											"end": 6760,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 6829,
											"end": 6836,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6820,
											"end": 6826,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6809,
											"end": 6818,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6805,
											"end": 6827,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "tag",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6774,
											"end": 6837,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6774,
											"end": 6837,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6730,
											"end": 6847,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 6888,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 6954,
											"end": 6961,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6945,
											"end": 6951,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6934,
											"end": 6943,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6930,
											"end": 6952,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6902,
											"end": 6962,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6902,
											"end": 6962,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6857,
											"end": 6972,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6985,
											"end": 7102,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 6985,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7094,
											"end": 7095,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7091,
											"end": 7092,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7084,
											"end": 7096,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7108,
											"end": 7225,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 7108,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7217,
											"end": 7218,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7214,
											"end": 7215,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7207,
											"end": 7219,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7231,
											"end": 7411,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 7231,
											"end": 7411,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7279,
											"end": 7356,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7276,
											"end": 7277,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7269,
											"end": 7357,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7376,
											"end": 7380,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 7373,
											"end": 7374,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7366,
											"end": 7381,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7400,
											"end": 7404,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7397,
											"end": 7398,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7390,
											"end": 7405,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 7522,
											"end": 7526,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "tag",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7492,
											"end": 7498,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7488,
											"end": 7528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7630,
											"end": 7636,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7618,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7615,
											"end": 7637,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 7594,
											"end": 7612,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7582,
											"end": 7592,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7579,
											"end": 7613,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7576,
											"end": 7638,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "tag",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "tag",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7681,
											"end": 7691,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7677,
											"end": 7679,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7670,
											"end": 7692,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7460,
											"end": 7698,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7738,
											"end": 7744,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "tag",
											"source": 10,
											"value": "379"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7755,
											"end": 7785,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7755,
											"end": 7785,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 7822,
											"end": 7826,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7814,
											"end": 7820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "tag",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7900,
											"end": 7904,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7990,
											"end": 8008,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7982,
											"end": 7988,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7979,
											"end": 8009,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "tag",
											"source": 10,
											"value": "383"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "tag",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 8072,
											"end": 8078,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "tag",
											"source": 10,
											"value": "384"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8042,
											"end": 8079,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8042,
											"end": 8079,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8134,
											"end": 8138,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8128,
											"end": 8132,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8124,
											"end": 8139,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8116,
											"end": 8139,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8116,
											"end": 8139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8236,
											"end": 8242,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8231,
											"end": 8234,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8226,
											"end": 8229,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8213,
											"end": 8243,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 8298,
											"end": 8299,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8289,
											"end": 8295,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8284,
											"end": 8287,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8273,
											"end": 8300,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8389,
											"end": 8394,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 8471,
											"end": 8477,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "tag",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "tag",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8405,
											"end": 8479,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8405,
											"end": 8479,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8502,
											"end": 8508,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8495,
											"end": 8500,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8488,
											"end": 8509,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8540,
											"end": 8544,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8533,
											"end": 8538,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8529,
											"end": 8545,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8578,
											"end": 8581,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8569,
											"end": 8575,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8567,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8560,
											"end": 8576,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8557,
											"end": 8582,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "tag",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "tag",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 8709,
											"end": 8715,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8704,
											"end": 8707,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8699,
											"end": 8702,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "tag",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8395,
											"end": 8722,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8796,
											"end": 8801,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8845,
											"end": 8848,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8838,
											"end": 8842,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 8830,
											"end": 8836,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8826,
											"end": 8843,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8822,
											"end": 8849,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "tag",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "tag",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8970,
											"end": 8976,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8957,
											"end": 8977,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "395"
										},
										{
											"begin": 9069,
											"end": 9072,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9061,
											"end": 9067,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9054,
											"end": 9058,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9046,
											"end": 9052,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "tag",
											"source": 10,
											"value": "395"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8986,
											"end": 9073,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8986,
											"end": 9073,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8802,
											"end": 9079,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9180,
											"end": 9186,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9188,
											"end": 9194,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9196,
											"end": 9202,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9204,
											"end": 9210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9253,
											"end": 9256,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9241,
											"end": 9250,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9232,
											"end": 9239,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9228,
											"end": 9251,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9224,
											"end": 9257,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "tag",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "tag",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9380,
											"end": 9381,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 9450,
											"end": 9457,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9441,
											"end": 9447,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9430,
											"end": 9439,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 9426,
											"end": 9448,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "tag",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9395,
											"end": 9458,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 9395,
											"end": 9458,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9351,
											"end": 9468,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9507,
											"end": 9509,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 9578,
											"end": 9585,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9569,
											"end": 9575,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9558,
											"end": 9567,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 9554,
											"end": 9576,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "tag",
											"source": 10,
											"value": "400"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9523,
											"end": 9586,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9523,
											"end": 9586,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9478,
											"end": 9596,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9635,
											"end": 9637,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 9706,
											"end": 9713,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9697,
											"end": 9703,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9686,
											"end": 9695,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 9682,
											"end": 9704,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "tag",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9651,
											"end": 9714,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9651,
											"end": 9714,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9606,
											"end": 9724,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9791,
											"end": 9793,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9780,
											"end": 9789,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9776,
											"end": 9794,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9763,
											"end": 9795,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 9822,
											"end": 9840,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9814,
											"end": 9820,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9811,
											"end": 9841,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "402"
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "tag",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "tag",
											"source": 10,
											"value": "402"
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 10003,
											"end": 10010,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9994,
											"end": 10000,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9983,
											"end": 9992,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 9979,
											"end": 10001,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "tag",
											"source": 10,
											"value": "404"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9939,
											"end": 10011,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9939,
											"end": 10011,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9734,
											"end": 10021,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10102,
											"end": 10108,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10110,
											"end": 10116,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10159,
											"end": 10161,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10147,
											"end": 10156,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10138,
											"end": 10145,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10134,
											"end": 10157,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10130,
											"end": 10162,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "406"
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "407"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "tag",
											"source": 10,
											"value": "407"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "tag",
											"source": 10,
											"value": "406"
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10285,
											"end": 10286,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "408"
										},
										{
											"begin": 10355,
											"end": 10362,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10346,
											"end": 10352,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10335,
											"end": 10344,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 10331,
											"end": 10353,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "tag",
											"source": 10,
											"value": "408"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10300,
											"end": 10363,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10300,
											"end": 10363,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10412,
											"end": 10414,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 10483,
											"end": 10490,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10474,
											"end": 10480,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10463,
											"end": 10472,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 10459,
											"end": 10481,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "tag",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10428,
											"end": 10491,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10428,
											"end": 10491,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10383,
											"end": 10501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10514,
											"end": 10694,
											"name": "tag",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 10514,
											"end": 10694,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10562,
											"end": 10639,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10559,
											"end": 10560,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10552,
											"end": 10640,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10659,
											"end": 10663,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 10656,
											"end": 10657,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 10649,
											"end": 10664,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10683,
											"end": 10687,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 10680,
											"end": 10681,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10673,
											"end": 10688,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10744,
											"end": 10750,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10781,
											"end": 10782,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 10775,
											"end": 10779,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10771,
											"end": 10783,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 10761,
											"end": 10783,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10761,
											"end": 10783,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10828,
											"end": 10829,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10822,
											"end": 10826,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10818,
											"end": 10830,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10849,
											"end": 10867,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10905,
											"end": 10909,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 10897,
											"end": 10903,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10893,
											"end": 10910,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10883,
											"end": 10910,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10883,
											"end": 10910,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "tag",
											"source": 10,
											"value": "412"
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10967,
											"end": 10969,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10959,
											"end": 10965,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10956,
											"end": 10970,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 10936,
											"end": 10954,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10933,
											"end": 10971,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "tag",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "tag",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10751,
											"end": 11020,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11128,
											"end": 11139,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11165,
											"end": 11168,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11150,
											"end": 11168,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11150,
											"end": 11168,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11286,
											"end": 11289,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "417"
										},
										{
											"begin": 11347,
											"end": 11352,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "tag",
											"source": 10,
											"value": "417"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 11451,
											"end": 11457,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11446,
											"end": 11449,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "tag",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11362,
											"end": 11458,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 11362,
											"end": 11458,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 11512,
											"end": 11518,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11507,
											"end": 11510,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 11500,
											"end": 11504,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11493,
											"end": 11498,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 11489,
											"end": 11505,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "tag",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11544,
											"end": 11550,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11539,
											"end": 11542,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11535,
											"end": 11551,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11528,
											"end": 11551,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11528,
											"end": 11551,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11290,
											"end": 11557,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "tag",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11612,
											"end": 11616,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11635,
											"end": 11638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11627,
											"end": 11638,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11627,
											"end": 11638,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11658,
											"end": 11661,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11655,
											"end": 11656,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11648,
											"end": 11662,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11692,
											"end": 11696,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11689,
											"end": 11690,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11679,
											"end": 11697,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 11671,
											"end": 11697,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11671,
											"end": 11697,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11704,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "tag",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11837,
											"end": 11840,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11874,
											"end": 11879,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11868,
											"end": 11880,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 11903,
											"end": 11939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 11929,
											"end": 11938,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11903,
											"end": 11939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 11903,
											"end": 11939,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11903,
											"end": 11939,
											"name": "tag",
											"source": 10,
											"value": "422"
										},
										{
											"begin": 11903,
											"end": 11939,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11955,
											"end": 12044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 12037,
											"end": 12043,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12032,
											"end": 12035,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 11955,
											"end": 12044,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 11955,
											"end": 12044,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11955,
											"end": 12044,
											"name": "tag",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 11955,
											"end": 12044,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11948,
											"end": 12044,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11948,
											"end": 12044,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12075,
											"end": 12076,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12064,
											"end": 12073,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12060,
											"end": 12077,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12091,
											"end": 12092,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "425"
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12237,
											"end": 12238,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12053,
											"end": 12573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 12053,
											"end": 12573,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "tag",
											"source": 10,
											"value": "425"
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12170,
											"end": 12174,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 12166,
											"end": 12175,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 12155,
											"end": 12164,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12151,
											"end": 12176,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12146,
											"end": 12149,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12139,
											"end": 12177,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12206,
											"end": 12212,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12201,
											"end": 12204,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12197,
											"end": 12213,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12190,
											"end": 12213,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12190,
											"end": 12213,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 12086,
											"end": 12223,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "tag",
											"source": 10,
											"value": "426"
										},
										{
											"begin": 12232,
											"end": 12573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12299,
											"end": 12337,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 12331,
											"end": 12336,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 12299,
											"end": 12337,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 12299,
											"end": 12337,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12299,
											"end": 12337,
											"name": "tag",
											"source": 10,
											"value": "427"
										},
										{
											"begin": 12299,
											"end": 12337,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12359,
											"end": 12360,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "tag",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12387,
											"end": 12393,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12384,
											"end": 12385,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12381,
											"end": 12394,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12461,
											"end": 12468,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12455,
											"end": 12469,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 12451,
											"end": 12452,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12446,
											"end": 12449,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 12442,
											"end": 12453,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12435,
											"end": 12470,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12511,
											"end": 12512,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12502,
											"end": 12509,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12498,
											"end": 12513,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12487,
											"end": 12513,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12487,
											"end": 12513,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12409,
											"end": 12413,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12406,
											"end": 12407,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12402,
											"end": 12414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12397,
											"end": 12414,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12397,
											"end": 12414,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "428"
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "tag",
											"source": 10,
											"value": "430"
										},
										{
											"begin": 12373,
											"end": 12527,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12556,
											"end": 12562,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12551,
											"end": 12554,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 12547,
											"end": 12563,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12540,
											"end": 12563,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 12540,
											"end": 12563,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12239,
											"end": 12573,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12239,
											"end": 12573,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12053,
											"end": 12573,
											"name": "tag",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 12053,
											"end": 12573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12053,
											"end": 12573,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11841,
											"end": 12579,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11841,
											"end": 12579,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11734,
											"end": 12579,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12810,
											"end": 12813,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12832,
											"end": 12927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "432"
										},
										{
											"begin": 12923,
											"end": 12926,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12914,
											"end": 12920,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12832,
											"end": 12927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 12832,
											"end": 12927,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12832,
											"end": 12927,
											"name": "tag",
											"source": 10,
											"value": "432"
										},
										{
											"begin": 12832,
											"end": 12927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12825,
											"end": 12927,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12825,
											"end": 12927,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12944,
											"end": 13039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 13035,
											"end": 13038,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13026,
											"end": 13032,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 12944,
											"end": 13039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 12944,
											"end": 13039,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12944,
											"end": 13039,
											"name": "tag",
											"source": 10,
											"value": "433"
										},
										{
											"begin": 12944,
											"end": 13039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12937,
											"end": 13039,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12937,
											"end": 13039,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13056,
											"end": 13148,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "434"
										},
										{
											"begin": 13144,
											"end": 13147,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13135,
											"end": 13141,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 13056,
											"end": 13148,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 13056,
											"end": 13148,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13056,
											"end": 13148,
											"name": "tag",
											"source": 10,
											"value": "434"
										},
										{
											"begin": 13056,
											"end": 13148,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13049,
											"end": 13148,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13049,
											"end": 13148,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13165,
											"end": 13168,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13158,
											"end": 13168,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13158,
											"end": 13168,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12585,
											"end": 13174,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13231,
											"end": 13237,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13265,
											"end": 13270,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13259,
											"end": 13271,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 13249,
											"end": 13271,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13249,
											"end": 13271,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13180,
											"end": 13278,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13367,
											"end": 13378,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13401,
											"end": 13407,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13396,
											"end": 13399,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13389,
											"end": 13408,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13441,
											"end": 13445,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13436,
											"end": 13439,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13432,
											"end": 13446,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13417,
											"end": 13446,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13417,
											"end": 13446,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13284,
											"end": 13452,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "tag",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13544,
											"end": 13547,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13572,
											"end": 13610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "438"
										},
										{
											"begin": 13604,
											"end": 13609,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13572,
											"end": 13610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 13572,
											"end": 13610,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13572,
											"end": 13610,
											"name": "tag",
											"source": 10,
											"value": "438"
										},
										{
											"begin": 13572,
											"end": 13610,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13626,
											"end": 13696,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "439"
										},
										{
											"begin": 13689,
											"end": 13695,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13684,
											"end": 13687,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 13626,
											"end": 13696,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 13626,
											"end": 13696,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13626,
											"end": 13696,
											"name": "tag",
											"source": 10,
											"value": "439"
										},
										{
											"begin": 13626,
											"end": 13696,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13619,
											"end": 13696,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 13619,
											"end": 13696,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13705,
											"end": 13757,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "440"
										},
										{
											"begin": 13750,
											"end": 13756,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13745,
											"end": 13748,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 13738,
											"end": 13742,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13731,
											"end": 13736,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 13727,
											"end": 13743,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13705,
											"end": 13757,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 13705,
											"end": 13757,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13705,
											"end": 13757,
											"name": "tag",
											"source": 10,
											"value": "440"
										},
										{
											"begin": 13705,
											"end": 13757,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13782,
											"end": 13811,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 13804,
											"end": 13810,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13782,
											"end": 13811,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 13782,
											"end": 13811,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13782,
											"end": 13811,
											"name": "tag",
											"source": 10,
											"value": "441"
										},
										{
											"begin": 13782,
											"end": 13811,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13777,
											"end": 13780,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 13773,
											"end": 13812,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13766,
											"end": 13812,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13766,
											"end": 13812,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13548,
											"end": 13818,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13458,
											"end": 13818,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14019,
											"end": 14023,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14057,
											"end": 14060,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 14046,
											"end": 14055,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14042,
											"end": 14061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14034,
											"end": 14061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14034,
											"end": 14061,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14071,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 14139,
											"end": 14140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14128,
											"end": 14137,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14124,
											"end": 14141,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14115,
											"end": 14121,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 14071,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 14071,
											"end": 14142,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14071,
											"end": 14142,
											"name": "tag",
											"source": 10,
											"value": "443"
										},
										{
											"begin": 14071,
											"end": 14142,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14152,
											"end": 14224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "444"
										},
										{
											"begin": 14220,
											"end": 14222,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14209,
											"end": 14218,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14205,
											"end": 14223,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14196,
											"end": 14202,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 14152,
											"end": 14224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 14152,
											"end": 14224,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14152,
											"end": 14224,
											"name": "tag",
											"source": 10,
											"value": "444"
										},
										{
											"begin": 14152,
											"end": 14224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14234,
											"end": 14306,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 14291,
											"end": 14300,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14287,
											"end": 14305,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14278,
											"end": 14284,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 14234,
											"end": 14306,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 14234,
											"end": 14306,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14234,
											"end": 14306,
											"name": "tag",
											"source": 10,
											"value": "445"
										},
										{
											"begin": 14234,
											"end": 14306,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14353,
											"end": 14362,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14347,
											"end": 14351,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14343,
											"end": 14363,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14338,
											"end": 14340,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 14327,
											"end": 14336,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14323,
											"end": 14341,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14316,
											"end": 14364,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14381,
											"end": 14457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "446"
										},
										{
											"begin": 14452,
											"end": 14456,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14443,
											"end": 14449,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 14381,
											"end": 14457,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 14381,
											"end": 14457,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14381,
											"end": 14457,
											"name": "tag",
											"source": 10,
											"value": "446"
										},
										{
											"begin": 14381,
											"end": 14457,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14373,
											"end": 14457,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14373,
											"end": 14457,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13824,
											"end": 14464,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "tag",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14526,
											"end": 14531,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14557,
											"end": 14563,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14551,
											"end": 14564,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 14542,
											"end": 14564,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14542,
											"end": 14564,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14573,
											"end": 14605,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "448"
										},
										{
											"begin": 14599,
											"end": 14604,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14573,
											"end": 14605,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 14573,
											"end": 14605,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14573,
											"end": 14605,
											"name": "tag",
											"source": 10,
											"value": "448"
										},
										{
											"begin": 14573,
											"end": 14605,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14470,
											"end": 14611,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14686,
											"end": 14692,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14735,
											"end": 14737,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14723,
											"end": 14732,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14714,
											"end": 14721,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 14710,
											"end": 14733,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14706,
											"end": 14738,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 14703,
											"end": 14822,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 14703,
											"end": 14822,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "450"
										},
										{
											"begin": 14703,
											"end": 14822,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 14741,
											"end": 14820,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "451"
										},
										{
											"begin": 14741,
											"end": 14820,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 14741,
											"end": 14820,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14741,
											"end": 14820,
											"name": "tag",
											"source": 10,
											"value": "451"
										},
										{
											"begin": 14741,
											"end": 14820,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14703,
											"end": 14822,
											"name": "tag",
											"source": 10,
											"value": "450"
										},
										{
											"begin": 14703,
											"end": 14822,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14861,
											"end": 14862,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14886,
											"end": 14949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "452"
										},
										{
											"begin": 14941,
											"end": 14948,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 14932,
											"end": 14938,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14921,
											"end": 14930,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 14917,
											"end": 14939,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14886,
											"end": 14949,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 14886,
											"end": 14949,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14886,
											"end": 14949,
											"name": "tag",
											"source": 10,
											"value": "452"
										},
										{
											"begin": 14886,
											"end": 14949,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14876,
											"end": 14949,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14876,
											"end": 14949,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14832,
											"end": 14959,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14617,
											"end": 14966,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14972,
											"end": 15152,
											"name": "tag",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 14972,
											"end": 15152,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15020,
											"end": 15097,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15017,
											"end": 15018,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15010,
											"end": 15098,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15117,
											"end": 15121,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 15114,
											"end": 15115,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 15107,
											"end": 15122,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15141,
											"end": 15145,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 15138,
											"end": 15139,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15131,
											"end": 15146,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15197,
											"end": 15200,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15220,
											"end": 15244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "455"
										},
										{
											"begin": 15238,
											"end": 15243,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15220,
											"end": 15244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 15220,
											"end": 15244,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15220,
											"end": 15244,
											"name": "tag",
											"source": 10,
											"value": "455"
										},
										{
											"begin": 15220,
											"end": 15244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15211,
											"end": 15244,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15211,
											"end": 15244,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15266,
											"end": 15332,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15259,
											"end": 15264,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15256,
											"end": 15333,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 15253,
											"end": 15356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 15253,
											"end": 15356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "456"
										},
										{
											"begin": 15253,
											"end": 15356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 15336,
											"end": 15354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 15336,
											"end": 15354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 15336,
											"end": 15354,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15336,
											"end": 15354,
											"name": "tag",
											"source": 10,
											"value": "457"
										},
										{
											"begin": 15336,
											"end": 15354,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15253,
											"end": 15356,
											"name": "tag",
											"source": 10,
											"value": "456"
										},
										{
											"begin": 15253,
											"end": 15356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15383,
											"end": 15384,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 15376,
											"end": 15381,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15372,
											"end": 15385,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15365,
											"end": 15385,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15365,
											"end": 15385,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15158,
											"end": 15391,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15397,
											"end": 15577,
											"name": "tag",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 15397,
											"end": 15577,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15445,
											"end": 15522,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15442,
											"end": 15443,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15435,
											"end": 15523,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15542,
											"end": 15546,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 15539,
											"end": 15540,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 15532,
											"end": 15547,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15566,
											"end": 15570,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 15563,
											"end": 15564,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15556,
											"end": 15571,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15623,
											"end": 15624,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15640,
											"end": 15660,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "460"
										},
										{
											"begin": 15658,
											"end": 15659,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15640,
											"end": 15660,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 15640,
											"end": 15660,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15640,
											"end": 15660,
											"name": "tag",
											"source": 10,
											"value": "460"
										},
										{
											"begin": 15640,
											"end": 15660,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15635,
											"end": 15660,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15635,
											"end": 15660,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15674,
											"end": 15694,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "461"
										},
										{
											"begin": 15692,
											"end": 15693,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15674,
											"end": 15694,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 15674,
											"end": 15694,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15674,
											"end": 15694,
											"name": "tag",
											"source": 10,
											"value": "461"
										},
										{
											"begin": 15674,
											"end": 15694,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15669,
											"end": 15694,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15669,
											"end": 15694,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15713,
											"end": 15714,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15703,
											"end": 15738,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "462"
										},
										{
											"begin": 15703,
											"end": 15738,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 15718,
											"end": 15736,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "463"
										},
										{
											"begin": 15718,
											"end": 15736,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 15718,
											"end": 15736,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15718,
											"end": 15736,
											"name": "tag",
											"source": 10,
											"value": "463"
										},
										{
											"begin": 15718,
											"end": 15736,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15703,
											"end": 15738,
											"name": "tag",
											"source": 10,
											"value": "462"
										},
										{
											"begin": 15703,
											"end": 15738,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15760,
											"end": 15761,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15757,
											"end": 15758,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15753,
											"end": 15762,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 15748,
											"end": 15762,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15748,
											"end": 15762,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15583,
											"end": 15768,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15814,
											"end": 15818,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15834,
											"end": 15854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "465"
										},
										{
											"begin": 15852,
											"end": 15853,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15834,
											"end": 15854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 15834,
											"end": 15854,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15834,
											"end": 15854,
											"name": "tag",
											"source": 10,
											"value": "465"
										},
										{
											"begin": 15834,
											"end": 15854,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15829,
											"end": 15854,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15829,
											"end": 15854,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15868,
											"end": 15888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 15886,
											"end": 15887,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15868,
											"end": 15888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 15868,
											"end": 15888,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15868,
											"end": 15888,
											"name": "tag",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 15868,
											"end": 15888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15863,
											"end": 15888,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15863,
											"end": 15888,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15907,
											"end": 15908,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15904,
											"end": 15905,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15901,
											"end": 15909,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 15898,
											"end": 15932,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 15898,
											"end": 15932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "467"
										},
										{
											"begin": 15898,
											"end": 15932,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 15912,
											"end": 15930,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "468"
										},
										{
											"begin": 15912,
											"end": 15930,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 15912,
											"end": 15930,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15912,
											"end": 15930,
											"name": "tag",
											"source": 10,
											"value": "468"
										},
										{
											"begin": 15912,
											"end": 15930,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15898,
											"end": 15932,
											"name": "tag",
											"source": 10,
											"value": "467"
										},
										{
											"begin": 15898,
											"end": 15932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15957,
											"end": 15958,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15954,
											"end": 15955,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15950,
											"end": 15959,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 15942,
											"end": 15959,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15942,
											"end": 15959,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15965,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16003,
											"end": 16004,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16020,
											"end": 16040,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "470"
										},
										{
											"begin": 16038,
											"end": 16039,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16020,
											"end": 16040,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 16020,
											"end": 16040,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16020,
											"end": 16040,
											"name": "tag",
											"source": 10,
											"value": "470"
										},
										{
											"begin": 16020,
											"end": 16040,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16015,
											"end": 16040,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16015,
											"end": 16040,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16054,
											"end": 16074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "471"
										},
										{
											"begin": 16072,
											"end": 16073,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 16054,
											"end": 16074,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 16054,
											"end": 16074,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16054,
											"end": 16074,
											"name": "tag",
											"source": 10,
											"value": "471"
										},
										{
											"begin": 16054,
											"end": 16074,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16049,
											"end": 16074,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16049,
											"end": 16074,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16093,
											"end": 16094,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16083,
											"end": 16118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "472"
										},
										{
											"begin": 16083,
											"end": 16118,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "473"
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "tag",
											"source": 10,
											"value": "473"
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16083,
											"end": 16118,
											"name": "tag",
											"source": 10,
											"value": "472"
										},
										{
											"begin": 16083,
											"end": 16118,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16139,
											"end": 16140,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16136,
											"end": 16137,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16132,
											"end": 16141,
											"name": "MOD",
											"source": 10
										},
										{
											"begin": 16127,
											"end": 16141,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16127,
											"end": 16141,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15971,
											"end": 16147,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16193,
											"end": 16196,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16212,
											"end": 16232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "475"
										},
										{
											"begin": 16230,
											"end": 16231,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16212,
											"end": 16232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 16212,
											"end": 16232,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16212,
											"end": 16232,
											"name": "tag",
											"source": 10,
											"value": "475"
										},
										{
											"begin": 16212,
											"end": 16232,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16207,
											"end": 16232,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16207,
											"end": 16232,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16246,
											"end": 16266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "476"
										},
										{
											"begin": 16264,
											"end": 16265,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 16246,
											"end": 16266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 16246,
											"end": 16266,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16246,
											"end": 16266,
											"name": "tag",
											"source": 10,
											"value": "476"
										},
										{
											"begin": 16246,
											"end": 16266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16241,
											"end": 16266,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16241,
											"end": 16266,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16400,
											"end": 16401,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16332,
											"end": 16398,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16328,
											"end": 16402,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 16325,
											"end": 16326,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16322,
											"end": 16403,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 16319,
											"end": 16426,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 16319,
											"end": 16426,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 16319,
											"end": 16426,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 16406,
											"end": 16424,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "478"
										},
										{
											"begin": 16406,
											"end": 16424,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 16406,
											"end": 16424,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16406,
											"end": 16424,
											"name": "tag",
											"source": 10,
											"value": "478"
										},
										{
											"begin": 16406,
											"end": 16424,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16319,
											"end": 16426,
											"name": "tag",
											"source": 10,
											"value": "477"
										},
										{
											"begin": 16319,
											"end": 16426,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16450,
											"end": 16451,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16447,
											"end": 16448,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16443,
											"end": 16452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16436,
											"end": 16452,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16436,
											"end": 16452,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16458,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16464,
											"end": 16644,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 16464,
											"end": 16644,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16512,
											"end": 16589,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16509,
											"end": 16510,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16502,
											"end": 16590,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16609,
											"end": 16613,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 16606,
											"end": 16607,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 16599,
											"end": 16614,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16633,
											"end": 16637,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 16630,
											"end": 16631,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16623,
											"end": 16638,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"baseExtension()": "c6682862",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/ERC721A.sol\":{\"keccak256\":\"0xb23574e8ef625ea35b53c3413e6a2db429bf8ca6f88499a83e8d9d14b31e38ae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://965ec6951d5b70e5a19b3f9f1da2a320c961b78335216a76f5d5afd38c6b8b3d\",\"dweb:/ipfs/QmVeXMbpY2d7aXZa3JU9EHJ51i1qYj45thbjAkQNbPASJu\"]},\"contracts/IERC721A.sol\":{\"keccak256\":\"0x8808a3ac836e5f044a493620662e91b5ae04fba40a4437b8211d7042fedabe20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb1401aaa3bcd4196a65688d9026c56cb3e8bd358db791454e0761c2abdc1330\",\"dweb:/ipfs/QmdVHWeQm2sdommcEuEVz2ZgmqvQsYefyPsfGjhQDB4cv8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 762,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_currentIndex",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 764,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_burnCounter",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 766,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_name",
								"offset": 0,
								"slot": "2",
								"type": "t_string_storage"
							},
							{
								"astId": 768,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_symbol",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 771,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "baseExtension",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 776,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_ownerships",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_uint256,t_struct(TokenOwnership)2172_storage)"
							},
							{
								"astId": 781,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_addressData",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_struct(AddressData)2181_storage)"
							},
							{
								"astId": 785,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 791,
								"contract": "contracts/ERC721A.sol:ERC721A",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_struct(AddressData)2181_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct IERC721A.AddressData)",
								"numberOfBytes": "32",
								"value": "t_struct(AddressData)2181_storage"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_struct(TokenOwnership)2172_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct IERC721A.TokenOwnership)",
								"numberOfBytes": "32",
								"value": "t_struct(TokenOwnership)2172_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(AddressData)2181_storage": {
								"encoding": "inplace",
								"label": "struct IERC721A.AddressData",
								"members": [
									{
										"astId": 2174,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2176,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "numberMinted",
										"offset": 8,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2178,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "numberBurned",
										"offset": 16,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2180,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "aux",
										"offset": 24,
										"slot": "0",
										"type": "t_uint64"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(TokenOwnership)2172_storage": {
								"encoding": "inplace",
								"label": "struct IERC721A.TokenOwnership",
								"members": [
									{
										"astId": 2167,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "addr",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 2169,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "startTimestamp",
										"offset": 20,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2171,
										"contract": "contracts/ERC721A.sol:ERC721A",
										"label": "burned",
										"offset": 28,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApprovalToCurrentOwner()": [
								{
									"notice": "The caller cannot approve to the current owner."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IERC721A.sol": {
				"IERC721A": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721A compliant contract.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/IERC721A.sol\":{\"keccak256\":\"0x8808a3ac836e5f044a493620662e91b5ae04fba40a4437b8211d7042fedabe20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb1401aaa3bcd4196a65688d9026c56cb3e8bd358db791454e0761c2abdc1330\",\"dweb:/ipfs/QmdVHWeQm2sdommcEuEVz2ZgmqvQsYefyPsfGjhQDB4cv8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApprovalToCurrentOwner()": [
								{
									"notice": "The caller cannot approve to the current owner."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							739
						],
						"IERC721": [
							115
						]
					},
					"id": 116,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 116,
							"sourceUnit": 740,
							"src": "133:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 739,
										"src": "271:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:0"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:0",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 115,
							"linearizedBaseContracts": [
								115,
								739
							],
							"name": "IERC721",
							"nameLocation": "260:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 14,
									"name": "Transfer",
									"nameLocation": "384:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "393:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "415:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "435:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:0"
									},
									"src": "378:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 23,
									"name": "Approval",
									"nameLocation": "571:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "580:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "603:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "629:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:0"
									},
									"src": "565:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 32,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "803:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "826:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "852:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:0"
									},
									"src": "782:85:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "973:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:0"
									},
									"scope": 115,
									"src": "954:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1187:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1227:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:0"
									},
									"scope": 115,
									"src": "1170:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1844:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1866:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1886:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1911:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 56,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:0"
									},
									"scope": 115,
									"src": "1809:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2679:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2701:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2721:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:0"
									},
									"scope": 115,
									"src": "2644:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "2758:504:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3276:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3306:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3298:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3328:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3320:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3348:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3340:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3288:73:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:0:0"
									},
									"scope": 115,
									"src": "3267:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3377:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3843:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3859:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3851:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3851:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3871:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3863:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3888:0:0"
									},
									"scope": 115,
									"src": "3834:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "3895:309:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4218:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4244:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4236:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4259:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4254:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 92,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4254:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:34:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4278:0:0"
									},
									"scope": 115,
									"src": "4209:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "4285:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4438:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4458:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4450:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:17:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4498:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4490:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4490:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4489:18:0"
									},
									"scope": 115,
									"src": "4429:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4514:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4666:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4691:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4683:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4706:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4698:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4698:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4682:33:0"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4739:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4739:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4738:6:0"
									},
									"scope": 115,
									"src": "4657:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 116,
							"src": "250:4497:0",
							"usedErrors": []
						}
					],
					"src": "108:4640:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							133
						]
					},
					"id": 134,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 117,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:1",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 133,
							"linearizedBaseContracts": [
								133
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:1",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "859:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "885:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "907:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "932:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "976:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 129,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:1"
									},
									"scope": 133,
									"src": "824:160:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 134,
							"src": "294:692:1",
							"usedErrors": []
						}
					],
					"src": "116:871:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							739
						],
						"IERC721": [
							115
						],
						"IERC721Metadata": [
							160
						]
					},
					"id": 161,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 135,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 136,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 161,
							"sourceUnit": 116,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 138,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "326:7:2"
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 137,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 160,
							"linearizedBaseContracts": [
								160,
								115,
								739
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 160,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 148,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 160,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 160,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 161,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							455
						]
					},
					"id": 456,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 162,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 163,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 455,
							"linearizedBaseContracts": [
								455
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 177,
										"nodeType": "Block",
										"src": "1241:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 171,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "1465:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 170,
												"id": 176,
												"nodeType": "Return",
												"src": "1458:30:3"
											}
										]
									},
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:3"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1235:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:3"
									},
									"scope": 455,
									"src": "1175:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "2483:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 189,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		],
																		"id": 188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 187,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 192,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2526:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 194,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 196,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:3"
											},
											{
												"assignments": [
													198,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "2578:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 197,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 205,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 199,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 181,
																"src": "2596:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 201,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2618:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 207,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "2647:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 206,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:3"
											}
										]
									},
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2431:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2458:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:3"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:3"
									},
									"scope": 455,
									"src": "2412:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "3555:84:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3585:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 224,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "3593:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 222,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															229,
															249
														],
														"referencedDeclaration": 249,
														"src": "3572:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 221,
												"id": 227,
												"nodeType": "Return",
												"src": "3565:67:3"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3488:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3504:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:3"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3541:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:3"
									},
									"scope": 455,
									"src": "3466:173:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "4008:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 242,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "4047:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 243,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "4055:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 244,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 245,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "4064:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 241,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															269,
															319
														],
														"referencedDeclaration": 319,
														"src": "4025:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 240,
												"id": 247,
												"nodeType": "Return",
												"src": "4018:59:3"
											}
										]
									},
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 249,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3916:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3943:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 235,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:3"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3994:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:3"
									},
									"scope": 455,
									"src": "3861:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "4589:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 262,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 252,
															"src": "4628:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 263,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 254,
															"src": "4636:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 264,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "4642:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 261,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															269,
															319
														],
														"referencedDeclaration": 319,
														"src": "4606:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 260,
												"id": 267,
												"nodeType": "Return",
												"src": "4599:94:3"
											}
										]
									},
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4486:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4510:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 253,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4537:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:3"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4575:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 258,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:3"
									},
									"scope": 455,
									"src": "4446:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "5127:320:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 286,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		],
																		"id": 285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 284,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 289,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "5170:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 283,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 296,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "5247:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 295,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "5236:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 294,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:3"
											},
											{
												"assignments": [
													302,
													304
												],
												"declarations": [
													{
														"constant": false,
														"id": 302,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 318,
														"src": "5300:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 301,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 304,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 318,
														"src": "5314:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 303,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 311,
												"initialValue": {
													"arguments": [
														{
															"id": 309,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "5367:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 305,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "5341:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 307,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "5360:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 313,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "5406:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 314,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "5415:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 315,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "5427:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 312,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "5389:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 282,
												"id": 317,
												"nodeType": "Return",
												"src": "5382:58:3"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4988:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5012:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5062:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 277,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:3"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5113:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 280,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:3"
									},
									"scope": 455,
									"src": "4948:499:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "5724:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 330,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "5760:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "5768:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 329,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															336,
															371
														],
														"referencedDeclaration": 371,
														"src": "5741:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 328,
												"id": 334,
												"nodeType": "Return",
												"src": "5734:80:3"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5652:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5668:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:3"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5710:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 326,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:3"
									},
									"scope": 455,
									"src": "5624:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "6163:228:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 350,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "6192:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 349,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "6181:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 352,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 348,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:3"
											},
											{
												"assignments": [
													356,
													358
												],
												"declarations": [
													{
														"constant": false,
														"id": 356,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "6252:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 355,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 358,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "6266:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 357,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 363,
												"initialValue": {
													"arguments": [
														{
															"id": 361,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "6311:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 359,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "6293:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 360,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 365,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "6350:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 366,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "6359:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 367,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "6371:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 364,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "6333:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 347,
												"id": 369,
												"nodeType": "Return",
												"src": "6326:58:3"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6042:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6066:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 340,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6093:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 342,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:3"
									},
									"returnParameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6149:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 345,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:3"
									},
									"scope": 455,
									"src": "6005:386:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "6667:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 382,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "6705:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 383,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "6713:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 381,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															388,
															423
														],
														"referencedDeclaration": 423,
														"src": "6684:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 380,
												"id": 386,
												"nodeType": "Return",
												"src": "6677:84:3"
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6600:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6616:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 375,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:3"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6653:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:3"
									},
									"scope": 455,
									"src": "6570:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "7109:232:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 402,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 391,
																	"src": "7138:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 401,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "7127:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 400,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 406,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:3"
											},
											{
												"assignments": [
													408,
													410
												],
												"declarations": [
													{
														"constant": false,
														"id": 408,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 422,
														"src": "7200:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 407,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 410,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 422,
														"src": "7214:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 409,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 415,
												"initialValue": {
													"arguments": [
														{
															"id": 413,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 393,
															"src": "7261:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 411,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "7241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 417,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "7300:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 418,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "7309:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 419,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 395,
															"src": "7321:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 416,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "7283:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 399,
												"id": 421,
												"nodeType": "Return",
												"src": "7276:58:3"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 423,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "6993:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7017:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 392,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7044:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 394,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:3"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7095:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 397,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:3"
									},
									"scope": 455,
									"src": "6954:387:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 453,
										"nodeType": "Block",
										"src": "7721:582:3",
										"statements": [
											{
												"condition": {
													"id": 435,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 426,
													"src": "7735:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 451,
													"nodeType": "Block",
													"src": "7792:505:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 439,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "7876:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 449,
																"nodeType": "Block",
																"src": "8234:53:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 446,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 430,
																					"src": "8259:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 445,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8252:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8252:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 448,
																		"nodeType": "ExpressionStatement",
																		"src": "8252:20:3"
																	}
																]
															},
															"id": 450,
															"nodeType": "IfStatement",
															"src": "7872:415:3",
															"trueBody": {
																"id": 444,
																"nodeType": "Block",
																"src": "7899:329:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8069:145:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8091:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8120:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8114:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8114:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8095:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8163:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8167:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8159:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8159:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8180:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8152:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8152:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8152:44:3"
																				}
																			]
																		},
																		"documentation": "@solidity memory-safe-assembly",
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 428,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8120:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 428,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8167:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 443,
																		"nodeType": "InlineAssembly",
																		"src": "8060:154:3"
																	}
																]
															}
														}
													]
												},
												"id": 452,
												"nodeType": "IfStatement",
												"src": "7731:566:3",
												"trueBody": {
													"id": 438,
													"nodeType": "Block",
													"src": "7744:42:3",
													"statements": [
														{
															"expression": {
																"id": 436,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 428,
																"src": "7765:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 434,
															"id": 437,
															"nodeType": "Return",
															"src": "7758:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:3",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7596:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 425,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7618:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 427,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7651:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 429,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:3"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7707:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 432,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:3"
									},
									"scope": 455,
									"src": "7561:742:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 456,
							"src": "194:8111:3",
							"usedErrors": []
						}
					],
					"src": "101:8205:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							477
						]
					},
					"id": 478,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 457,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 458,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 477,
							"linearizedBaseContracts": [
								477
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 463,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 462,
												"id": 465,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 477,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 472,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 471,
												"id": 474,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 469,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 477,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 478,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							703
						]
					},
					"id": 704,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 479,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 480,
								"nodeType": "StructuredDocumentation",
								"src": "126:34:5",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 703,
							"linearizedBaseContracts": [
								703
							],
							"name": "Strings",
							"nameLocation": "169:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 483,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "208:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 703,
									"src": "183:58:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 481,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "183:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 482,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "223:18:5",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 486,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "270:15:5",
									"nodeType": "VariableDeclaration",
									"scope": 703,
									"src": "247:43:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 484,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "247:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 485,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "288:2:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 564,
										"nodeType": "Block",
										"src": "463:632:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 494,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 489,
														"src": "665:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "674:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "665:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 500,
												"nodeType": "IfStatement",
												"src": "661:51:5",
												"trueBody": {
													"id": 499,
													"nodeType": "Block",
													"src": "677:35:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "698:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 493,
															"id": 498,
															"nodeType": "Return",
															"src": "691:10:5"
														}
													]
												}
											},
											{
												"assignments": [
													502
												],
												"declarations": [
													{
														"constant": false,
														"id": 502,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "729:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 564,
														"src": "721:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 501,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "721:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"initialValue": {
													"id": 503,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 489,
													"src": "736:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "721:20:5"
											},
											{
												"assignments": [
													506
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "759:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 564,
														"src": "751:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 505,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "751:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 507,
												"nodeType": "VariableDeclarationStatement",
												"src": "751:14:5"
											},
											{
												"body": {
													"id": 518,
													"nodeType": "Block",
													"src": "793:57:5",
													"statements": [
														{
															"expression": {
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "807:8:5",
																"subExpression": {
																	"id": 511,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "807:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 513,
															"nodeType": "ExpressionStatement",
															"src": "807:8:5"
														},
														{
															"expression": {
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 514,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 502,
																	"src": "829:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "837:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "829:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 517,
															"nodeType": "ExpressionStatement",
															"src": "829:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 508,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 502,
														"src": "782:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 509,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "790:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "782:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 519,
												"nodeType": "WhileStatement",
												"src": "775:75:5"
											},
											{
												"assignments": [
													521
												],
												"declarations": [
													{
														"constant": false,
														"id": 521,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "872:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 564,
														"src": "859:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 520,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "859:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 526,
												"initialValue": {
													"arguments": [
														{
															"id": 524,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "891:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 523,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "881:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 522,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "885:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "881:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:39:5"
											},
											{
												"body": {
													"id": 557,
													"nodeType": "Block",
													"src": "927:131:5",
													"statements": [
														{
															"expression": {
																"id": 532,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 530,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "941:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 531,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "951:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "941:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 533,
															"nodeType": "ExpressionStatement",
															"src": "941:11:5"
														},
														{
															"expression": {
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 534,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 521,
																		"src": "966:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 536,
																	"indexExpression": {
																		"id": 535,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 506,
																		"src": "973:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "966:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 548,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 541,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "996:2:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 546,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 544,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 489,
																									"src": "1009:5:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 545,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "1017:2:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "1009:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 543,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1001:7:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 542,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "1001:7:5",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 547,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1001:19:5",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "996:24:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 540,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "990:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 539,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "990:5:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 549,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "990:31:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 538,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "983:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 537,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "983:6:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 550,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "983:39:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "966:56:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 552,
															"nodeType": "ExpressionStatement",
															"src": "966:56:5"
														},
														{
															"expression": {
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 553,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 489,
																	"src": "1036:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1045:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "1036:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 556,
															"nodeType": "ExpressionStatement",
															"src": "1036:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 527,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 489,
														"src": "915:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 528,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "924:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "915:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 558,
												"nodeType": "WhileStatement",
												"src": "908:150:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 561,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "1081:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 560,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1074:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 559,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1074:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1074:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 493,
												"id": 563,
												"nodeType": "Return",
												"src": "1067:21:5"
											}
										]
									},
									"documentation": {
										"id": 487,
										"nodeType": "StructuredDocumentation",
										"src": "297:90:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 565,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "401:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "418:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "410:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:15:5"
									},
									"returnParameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "448:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 491,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "448:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:15:5"
									},
									"scope": 703,
									"src": "392:703:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "1274:255:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 573,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 568,
														"src": "1288:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1297:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1288:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 579,
												"nodeType": "IfStatement",
												"src": "1284:54:5",
												"trueBody": {
													"id": 578,
													"nodeType": "Block",
													"src": "1300:38:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 576,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1321:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 572,
															"id": 577,
															"nodeType": "Return",
															"src": "1314:13:5"
														}
													]
												}
											},
											{
												"assignments": [
													581
												],
												"declarations": [
													{
														"constant": false,
														"id": 581,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1355:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 605,
														"src": "1347:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 580,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1347:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 583,
												"initialValue": {
													"id": 582,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 568,
													"src": "1362:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1347:20:5"
											},
											{
												"assignments": [
													585
												],
												"declarations": [
													{
														"constant": false,
														"id": 585,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1385:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 605,
														"src": "1377:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 584,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1377:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 587,
												"initialValue": {
													"hexValue": "30",
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1394:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1377:18:5"
											},
											{
												"body": {
													"id": 598,
													"nodeType": "Block",
													"src": "1423:57:5",
													"statements": [
														{
															"expression": {
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1437:8:5",
																"subExpression": {
																	"id": 591,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 585,
																	"src": "1437:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 593,
															"nodeType": "ExpressionStatement",
															"src": "1437:8:5"
														},
														{
															"expression": {
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 594,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 581,
																	"src": "1459:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1468:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1459:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 597,
															"nodeType": "ExpressionStatement",
															"src": "1459:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 588,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "1412:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 589,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1420:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1412:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 599,
												"nodeType": "WhileStatement",
												"src": "1405:75:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 601,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 568,
															"src": "1508:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 602,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "1515:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 600,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															606,
															682,
															702
														],
														"referencedDeclaration": 682,
														"src": "1496:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1496:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 572,
												"id": 604,
												"nodeType": "Return",
												"src": "1489:33:5"
											}
										]
									},
									"documentation": {
										"id": 566,
										"nodeType": "StructuredDocumentation",
										"src": "1101:94:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1209:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1229:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "1221:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:15:5"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "1259:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 570,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1259:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1258:15:5"
									},
									"scope": 703,
									"src": "1200:329:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 681,
										"nodeType": "Block",
										"src": "1742:351:5",
										"statements": [
											{
												"assignments": [
													617
												],
												"declarations": [
													{
														"constant": false,
														"id": 617,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1765:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 681,
														"src": "1752:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 616,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1752:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 626,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1784:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 621,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 611,
																	"src": "1788:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1784:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 623,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1797:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1784:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1774:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 618,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1778:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1774:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1752:47:5"
											},
											{
												"expression": {
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 627,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "1809:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 629,
														"indexExpression": {
															"hexValue": "30",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1816:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1809:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1821:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1809:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 632,
												"nodeType": "ExpressionStatement",
												"src": "1809:15:5"
											},
											{
												"expression": {
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 633,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "1834:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 635,
														"indexExpression": {
															"hexValue": "31",
															"id": 634,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1841:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1834:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 636,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1846:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1834:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "1834:15:5"
											},
											{
												"body": {
													"id": 667,
													"nodeType": "Block",
													"src": "1904:87:5",
													"statements": [
														{
															"expression": {
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 653,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 617,
																		"src": "1918:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 655,
																	"indexExpression": {
																		"id": 654,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 640,
																		"src": "1925:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1918:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 656,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 483,
																		"src": "1930:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 660,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 657,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 609,
																			"src": "1943:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 658,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1951:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1943:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1930:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1918:37:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 662,
															"nodeType": "ExpressionStatement",
															"src": "1918:37:5"
														},
														{
															"expression": {
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 663,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "1969:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1979:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1969:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 666,
															"nodeType": "ExpressionStatement",
															"src": "1969:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 640,
														"src": "1892:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1896:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1892:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 668,
												"initializationExpression": {
													"assignments": [
														640
													],
													"declarations": [
														{
															"constant": false,
															"id": 640,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1872:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 668,
															"src": "1864:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 639,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1864:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 646,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 645,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 641,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1876:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 642,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 611,
																"src": "1880:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1876:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1889:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1876:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1864:26:5"
												},
												"loopExpression": {
													"expression": {
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1899:3:5",
														"subExpression": {
															"id": 650,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 640,
															"src": "1901:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 652,
													"nodeType": "ExpressionStatement",
													"src": "1899:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1859:132:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 670,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 609,
																"src": "2008:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2017:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2008:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2020:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 669,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2000:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2000:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 675,
												"nodeType": "ExpressionStatement",
												"src": "2000:55:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 678,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "2079:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2072:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 676,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2072:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2072:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 615,
												"id": 680,
												"nodeType": "Return",
												"src": "2065:21:5"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "1535:112:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 682,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1661:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1681:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "1673:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1673:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1696:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "1688:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1688:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1672:31:5"
									},
									"returnParameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "1727:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 613,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1727:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1726:15:5"
									},
									"scope": 703,
									"src": "1652:441:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 701,
										"nodeType": "Block",
										"src": "2318:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 695,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 685,
																			"src": "2363:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2355:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 693,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2355:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2355:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2347:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 691,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2347:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2347:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 698,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "2371:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 690,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															606,
															682,
															702
														],
														"referencedDeclaration": 682,
														"src": "2335:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2335:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 689,
												"id": 700,
												"nodeType": "Return",
												"src": "2328:59:5"
											}
										]
									},
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "2099:141:5",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2254:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2274:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "2266:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2266:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2265:14:5"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "2303:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 687,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2303:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2302:15:5"
									},
									"scope": 703,
									"src": "2245:149:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 704,
							"src": "161:2235:5",
							"usedErrors": []
						}
					],
					"src": "101:2296:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							727
						],
						"IERC165": [
							739
						]
					},
					"id": 728,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 705,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 706,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 728,
							"sourceUnit": 740,
							"src": "124:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 708,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 739,
										"src": "754:7:6"
									},
									"id": 709,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:6"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 707,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:6",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 727,
							"linearizedBaseContracts": [
								727,
								739
							],
							"name": "ERC165",
							"nameLocation": "744:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										738
									],
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "920:64:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 718,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "937:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 720,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 739,
																	"src": "957:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$739_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$739_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 719,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$739",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 717,
												"id": 724,
												"nodeType": "Return",
												"src": "930:47:6"
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:6",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 714,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:6"
									},
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "856:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 711,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:6"
									},
									"returnParameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "914:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 715,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:6"
									},
									"scope": 727,
									"src": "829:155:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 728,
							"src": "726:260:6",
							"usedErrors": []
						}
					],
					"src": "99:888:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							739
						]
					},
					"id": 740,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 729,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 730,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:7",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 739,
							"linearizedBaseContracts": [
								739
							],
							"name": "IERC165",
							"nameLocation": "415:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 731,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 738,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "801:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 732,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:7"
									},
									"returnParameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "844:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 735,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:7"
									},
									"scope": 739,
									"src": "774:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 740,
							"src": "405:447:7",
							"usedErrors": []
						}
					],
					"src": "100:753:7"
				},
				"id": 7
			},
			"contracts/ERC721A.sol": {
				"ast": {
					"absolutePath": "contracts/ERC721A.sol",
					"exportedSymbols": {
						"Address": [
							455
						],
						"Context": [
							477
						],
						"ERC165": [
							727
						],
						"ERC721A": [
							2117
						],
						"IERC165": [
							739
						],
						"IERC721": [
							115
						],
						"IERC721A": [
							2188
						],
						"IERC721Metadata": [
							160
						],
						"IERC721Receiver": [
							133
						],
						"Strings": [
							703
						]
					},
					"id": 2118,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 741,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "61:23:8"
						},
						{
							"absolutePath": "contracts/IERC721A.sol",
							"file": "./IERC721A.sol",
							"id": 742,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 2189,
							"src": "86:24:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 743,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 134,
							"src": "111:66:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 744,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 456,
							"src": "178:51:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 745,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 478,
							"src": "230:51:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 746,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 704,
							"src": "282:51:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 747,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2118,
							"sourceUnit": 728,
							"src": "334:64:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 749,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 477,
										"src": "911:7:8"
									},
									"id": 750,
									"nodeType": "InheritanceSpecifier",
									"src": "911:7:8"
								},
								{
									"baseName": {
										"id": 751,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 727,
										"src": "920:6:8"
									},
									"id": 752,
									"nodeType": "InheritanceSpecifier",
									"src": "920:6:8"
								},
								{
									"baseName": {
										"id": 753,
										"name": "IERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2188,
										"src": "928:8:8"
									},
									"id": 754,
									"nodeType": "InheritanceSpecifier",
									"src": "928:8:8"
								}
							],
							"canonicalName": "ERC721A",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 748,
								"nodeType": "StructuredDocumentation",
								"src": "400:490:8",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension. Built to optimize for lower gas during batch mints.\n Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256)."
							},
							"fullyImplemented": true,
							"id": 2117,
							"linearizedBaseContracts": [
								2117,
								2188,
								160,
								115,
								727,
								739,
								477
							],
							"name": "ERC721A",
							"nameLocation": "900:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 757,
									"libraryName": {
										"id": 755,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 455,
										"src": "949:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "943:26:8",
									"typeName": {
										"id": 756,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 760,
									"libraryName": {
										"id": 758,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 703,
										"src": "980:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "974:26:8",
									"typeName": {
										"id": 759,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "992:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 762,
									"mutability": "mutable",
									"name": "_currentIndex",
									"nameLocation": "1074:13:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1057:30:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 761,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1057:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 764,
									"mutability": "mutable",
									"name": "_burnCounter",
									"nameLocation": "1147:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1130:29:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 763,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1130:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 766,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1199:5:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1184:20:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 765,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1184:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 768,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1246:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1231:22:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 767,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1231:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "c6682862",
									"id": 771,
									"mutability": "mutable",
									"name": "baseExtension",
									"nameLocation": "1273:13:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1259:37:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 769,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1259:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "2e6a736f6e",
										"id": 770,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1289:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
											"typeString": "literal_string \".json\""
										},
										"value": ".json"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 776,
									"mutability": "mutable",
									"name": "_ownerships",
									"nameLocation": "1519:11:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1475:55:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
										"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership)"
									},
									"typeName": {
										"id": 775,
										"keyType": {
											"id": 772,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1483:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1475:34:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
											"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership)"
										},
										"valueType": {
											"id": 774,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 773,
												"name": "TokenOwnership",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2172,
												"src": "1494:14:8"
											},
											"referencedDeclaration": 2172,
											"src": "1494:14:8",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
												"typeString": "struct IERC721A.TokenOwnership"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 781,
									"mutability": "mutable",
									"name": "_addressData",
									"nameLocation": "1622:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1582:52:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
										"typeString": "mapping(address => struct IERC721A.AddressData)"
									},
									"typeName": {
										"id": 780,
										"keyType": {
											"id": 777,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1590:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1582:31:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
											"typeString": "mapping(address => struct IERC721A.AddressData)"
										},
										"valueType": {
											"id": 779,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 778,
												"name": "AddressData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2181,
												"src": "1601:11:8"
											},
											"referencedDeclaration": 2181,
											"src": "1601:11:8",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressData_$2181_storage_ptr",
												"typeString": "struct IERC721A.AddressData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 785,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1726:15:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1690:51:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 784,
										"keyType": {
											"id": 782,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1698:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1690:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 783,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1709:7:8",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 791,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1849:18:8",
									"nodeType": "VariableDeclaration",
									"scope": 2117,
									"src": "1796:71:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 790,
										"keyType": {
											"id": 786,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1804:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1796:44:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 789,
											"keyType": {
												"id": 787,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1823:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1815:24:8",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 788,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1834:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 811,
										"nodeType": "Block",
										"src": "1930:98:8",
										"statements": [
											{
												"expression": {
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 798,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 766,
														"src": "1940:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 799,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 793,
														"src": "1948:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1940:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 801,
												"nodeType": "ExpressionStatement",
												"src": "1940:13:8"
											},
											{
												"expression": {
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 802,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 768,
														"src": "1963:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 803,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 795,
														"src": "1973:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1963:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 805,
												"nodeType": "ExpressionStatement",
												"src": "1963:17:8"
											},
											{
												"expression": {
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 806,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 762,
														"src": "1990:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 807,
															"name": "_startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 821,
															"src": "2006:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 808,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2006:15:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1990:31:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 810,
												"nodeType": "ExpressionStatement",
												"src": "1990:31:8"
											}
										]
									},
									"id": 812,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1900:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "1886:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 792,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1886:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1921:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "1907:21:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 794,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1907:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1885:44:8"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1930:0:8"
									},
									"scope": 2117,
									"src": "1874:154:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "2185:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2202:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 817,
												"id": 819,
												"nodeType": "Return",
												"src": "2195:8:8"
											}
										]
									},
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "2034:81:8",
										"text": " To change the starting tokenId, please override this function."
									},
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startTokenId",
									"nameLocation": "2129:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2142:2:8"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "2176:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2175:9:8"
									},
									"scope": 2117,
									"src": "2120:90:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2187
									],
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "2401:244:8",
										"statements": [
											{
												"id": 835,
												"nodeType": "UncheckedBlock",
												"src": "2551:88:8",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 830,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 828,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 762,
																	"src": "2582:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 829,
																	"name": "_burnCounter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 764,
																	"src": "2598:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2582:28:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 831,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "2613:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2613:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2582:46:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 827,
														"id": 834,
														"nodeType": "Return",
														"src": "2575:53:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 822,
										"nodeType": "StructuredDocumentation",
										"src": "2216:118:8",
										"text": " @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2348:11:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 824,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2374:8:8"
									},
									"parameters": {
										"id": 823,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2359:2:8"
									},
									"returnParameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "2392:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2392:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2391:9:8"
									},
									"scope": 2117,
									"src": "2339:306:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 849,
										"nodeType": "Block",
										"src": "2789:221:8",
										"statements": [
											{
												"id": 848,
												"nodeType": "UncheckedBlock",
												"src": "2931:73:8",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 843,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 762,
																"src": "2962:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 844,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "2978:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 845,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2978:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2962:31:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 842,
														"id": 847,
														"nodeType": "Return",
														"src": "2955:38:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "2651:77:8",
										"text": " Returns the total amount of tokens minted in the contract."
									},
									"id": 850,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalMinted",
									"nameLocation": "2742:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2754:2:8"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "2780:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2780:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:9:8"
									},
									"scope": 2117,
									"src": "2733:277:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										726,
										738
									],
									"body": {
										"id": 880,
										"nodeType": "Block",
										"src": "3185:192:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 861,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "3214:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 863,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 115,
																			"src": "3234:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 862,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3229:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3229:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$115",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 865,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "3229:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "3214:40:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 867,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "3270:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 869,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 160,
																			"src": "3290:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 868,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3285:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3285:21:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$160",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 871,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "3285:33:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "3270:48:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "3214:104:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 876,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "3358:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 874,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "3334:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721A_$2117_$",
																	"typeString": "type(contract super ERC721A)"
																}
															},
															"id": 875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 726,
															"src": "3334:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3334:36:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3214:156:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 860,
												"id": 879,
												"nodeType": "Return",
												"src": "3195:175:8"
											}
										]
									},
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "3016:56:8",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 881,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "3086:17:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 857,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 855,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 727,
												"src": "3153:6:8"
											},
											{
												"id": 856,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 739,
												"src": "3161:7:8"
											}
										],
										"src": "3144:25:8"
									},
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "3111:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "3104:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 852,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "3104:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3103:20:8"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "3179:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 858,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3179:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3178:6:8"
									},
									"scope": 2117,
									"src": "3077:300:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										40
									],
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "3509:130:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 890,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 884,
														"src": "3523:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 893,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3540:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 892,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3532:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 891,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3532:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 894,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3532:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3523:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 899,
												"nodeType": "IfStatement",
												"src": "3519:60:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 896,
															"name": "BalanceQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2141,
															"src": "3551:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3551:28:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 898,
													"nodeType": "RevertStatement",
													"src": "3544:35:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 902,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "3604:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 904,
																"indexExpression": {
																	"id": 903,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 884,
																	"src": "3617:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3604:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 905,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2174,
															"src": "3604:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 901,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3596:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 900,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3596:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3596:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 889,
												"id": 907,
												"nodeType": "Return",
												"src": "3589:43:8"
											}
										]
									},
									"documentation": {
										"id": 882,
										"nodeType": "StructuredDocumentation",
										"src": "3383:48:8",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3445:9:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 886,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3482:8:8"
									},
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3463:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "3455:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 883,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:15:8"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "3500:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3500:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3499:9:8"
									},
									"scope": 2117,
									"src": "3436:203:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 925,
										"nodeType": "Block",
										"src": "3786:65:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 919,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "3811:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 921,
																"indexExpression": {
																	"id": 920,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 912,
																	"src": "3824:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3811:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 922,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberMinted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2176,
															"src": "3811:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 918,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3803:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 917,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3803:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3803:41:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 916,
												"id": 924,
												"nodeType": "Return",
												"src": "3796:48:8"
											}
										]
									},
									"documentation": {
										"id": 910,
										"nodeType": "StructuredDocumentation",
										"src": "3645:66:8",
										"text": " Returns the number of tokens minted by `owner`."
									},
									"id": 926,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberMinted",
									"nameLocation": "3725:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3747:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "3739:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:15:8"
									},
									"returnParameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "3777:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3777:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3776:9:8"
									},
									"scope": 2117,
									"src": "3716:135:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 942,
										"nodeType": "Block",
										"src": "4014:65:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 936,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "4039:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 938,
																"indexExpression": {
																	"id": 937,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 929,
																	"src": "4052:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4039:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 939,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberBurned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2178,
															"src": "4039:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 935,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4031:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 934,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4031:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4031:41:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 933,
												"id": 941,
												"nodeType": "Return",
												"src": "4024:48:8"
											}
										]
									},
									"documentation": {
										"id": 927,
										"nodeType": "StructuredDocumentation",
										"src": "3857:82:8",
										"text": " Returns the number of tokens burned by or on behalf of `owner`."
									},
									"id": 943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberBurned",
									"nameLocation": "3953:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3975:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "3967:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3967:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3966:15:8"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "4005:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4005:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:9:8"
									},
									"scope": 2117,
									"src": "3944:135:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 956,
										"nodeType": "Block",
										"src": "4255:47:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 951,
															"name": "_addressData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "4272:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
															}
														},
														"id": 953,
														"indexExpression": {
															"id": 952,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 946,
															"src": "4285:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4272:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressData_$2181_storage",
															"typeString": "struct IERC721A.AddressData storage ref"
														}
													},
													"id": 954,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "aux",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2180,
													"src": "4272:23:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 950,
												"id": 955,
												"nodeType": "Return",
												"src": "4265:30:8"
											}
										]
									},
									"documentation": {
										"id": 944,
										"nodeType": "StructuredDocumentation",
										"src": "4085:102:8",
										"text": " Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used)."
									},
									"id": 957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAux",
									"nameLocation": "4201:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4217:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "4209:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4209:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4208:15:8"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "4247:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 948,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4247:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4246:8:8"
									},
									"scope": 2117,
									"src": "4192:110:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "4537:46:8",
										"statements": [
											{
												"expression": {
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 965,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "4547:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																	"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																}
															},
															"id": 967,
															"indexExpression": {
																"id": 966,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 960,
																"src": "4560:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4547:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																"typeString": "struct IERC721A.AddressData storage ref"
															}
														},
														"id": 968,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "aux",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2180,
														"src": "4547:23:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 969,
														"name": "aux",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "4573:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "4547:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 971,
												"nodeType": "ExpressionStatement",
												"src": "4547:29:8"
											}
										]
									},
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "4308:171:8",
										"text": " Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."
									},
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAux",
									"nameLocation": "4493:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4509:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4501:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4501:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "aux",
												"nameLocation": "4523:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "4516:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 961,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4516:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4500:27:8"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4537:0:8"
									},
									"scope": 2117,
									"src": "4484:99:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1046,
										"nodeType": "Block",
										"src": "4864:1001:8",
										"statements": [
											{
												"assignments": [
													983
												],
												"declarations": [
													{
														"constant": false,
														"id": 983,
														"mutability": "mutable",
														"name": "curr",
														"nameLocation": "4882:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 1046,
														"src": "4874:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 982,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4874:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 985,
												"initialValue": {
													"id": 984,
													"name": "tokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 976,
													"src": "4889:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4874:22:8"
											},
											{
												"id": 1042,
												"nodeType": "UncheckedBlock",
												"src": "4907:904:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 989,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 986,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "4935:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 987,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4935:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 988,
																"name": "curr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 983,
																"src": "4954:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4935:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1041,
														"nodeType": "IfStatement",
														"src": "4931:870:8",
														"trueBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 990,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "4964:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 991,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 762,
																	"src": "4971:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4964:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1040,
															"nodeType": "IfStatement",
															"src": "4960:841:8",
															"trueBody": {
																"id": 1039,
																"nodeType": "Block",
																"src": "4986:815:8",
																"statements": [
																	{
																		"assignments": [
																			995
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 995,
																				"mutability": "mutable",
																				"name": "ownership",
																				"nameLocation": "5026:9:8",
																				"nodeType": "VariableDeclaration",
																				"scope": 1039,
																				"src": "5004:31:8",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																					"typeString": "struct IERC721A.TokenOwnership"
																				},
																				"typeName": {
																					"id": 994,
																					"nodeType": "UserDefinedTypeName",
																					"pathNode": {
																						"id": 993,
																						"name": "TokenOwnership",
																						"nodeType": "IdentifierPath",
																						"referencedDeclaration": 2172,
																						"src": "5004:14:8"
																					},
																					"referencedDeclaration": 2172,
																					"src": "5004:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																						"typeString": "struct IERC721A.TokenOwnership"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 999,
																		"initialValue": {
																			"baseExpression": {
																				"id": 996,
																				"name": "_ownerships",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 776,
																				"src": "5038:11:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																					"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																				}
																			},
																			"id": 998,
																			"indexExpression": {
																				"id": 997,
																				"name": "curr",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 983,
																				"src": "5050:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5038:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																				"typeString": "struct IERC721A.TokenOwnership storage ref"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "5004:51:8"
																	},
																	{
																		"condition": {
																			"id": 1002,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5077:17:8",
																			"subExpression": {
																				"expression": {
																					"id": 1000,
																					"name": "ownership",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 995,
																					"src": "5078:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																						"typeString": "struct IERC721A.TokenOwnership memory"
																					}
																				},
																				"id": 1001,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "burned",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2171,
																				"src": "5078:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1038,
																		"nodeType": "IfStatement",
																		"src": "5073:714:8",
																		"trueBody": {
																			"id": 1037,
																			"nodeType": "Block",
																			"src": "5096:691:8",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"id": 1009,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1003,
																								"name": "ownership",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 995,
																								"src": "5122:9:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																									"typeString": "struct IERC721A.TokenOwnership memory"
																								}
																							},
																							"id": 1004,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "addr",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2167,
																							"src": "5122:14:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "!=",
																						"rightExpression": {
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1007,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "5148:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1006,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "5140:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1005,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "5140:7:8",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1008,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "5140:10:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"src": "5122:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 1013,
																					"nodeType": "IfStatement",
																					"src": "5118:99:8",
																					"trueBody": {
																						"id": 1012,
																						"nodeType": "Block",
																						"src": "5152:65:8",
																						"statements": [
																							{
																								"expression": {
																									"id": 1010,
																									"name": "ownership",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 995,
																									"src": "5185:9:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																										"typeString": "struct IERC721A.TokenOwnership memory"
																									}
																								},
																								"functionReturnParameters": 981,
																								"id": 1011,
																								"nodeType": "Return",
																								"src": "5178:16:8"
																							}
																						]
																					}
																				},
																				{
																					"body": {
																						"id": 1035,
																						"nodeType": "Block",
																						"src": "5527:242:8",
																						"statements": [
																							{
																								"expression": {
																									"id": 1016,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "--",
																									"prefix": false,
																									"src": "5553:6:8",
																									"subExpression": {
																										"id": 1015,
																										"name": "curr",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 983,
																										"src": "5553:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 1017,
																								"nodeType": "ExpressionStatement",
																								"src": "5553:6:8"
																							},
																							{
																								"expression": {
																									"id": 1022,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftHandSide": {
																										"id": 1018,
																										"name": "ownership",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 995,
																										"src": "5585:9:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																											"typeString": "struct IERC721A.TokenOwnership memory"
																										}
																									},
																									"nodeType": "Assignment",
																									"operator": "=",
																									"rightHandSide": {
																										"baseExpression": {
																											"id": 1019,
																											"name": "_ownerships",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 776,
																											"src": "5597:11:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																												"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																											}
																										},
																										"id": 1021,
																										"indexExpression": {
																											"id": 1020,
																											"name": "curr",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 983,
																											"src": "5609:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "5597:17:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																											"typeString": "struct IERC721A.TokenOwnership storage ref"
																										}
																									},
																									"src": "5585:29:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																										"typeString": "struct IERC721A.TokenOwnership memory"
																									}
																								},
																								"id": 1023,
																								"nodeType": "ExpressionStatement",
																								"src": "5585:29:8"
																							},
																							{
																								"condition": {
																									"commonType": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									},
																									"id": 1030,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"expression": {
																											"id": 1024,
																											"name": "ownership",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 995,
																											"src": "5644:9:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																												"typeString": "struct IERC721A.TokenOwnership memory"
																											}
																										},
																										"id": 1025,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "addr",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2167,
																										"src": "5644:14:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "!=",
																									"rightExpression": {
																										"arguments": [
																											{
																												"hexValue": "30",
																												"id": 1028,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "5670:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_0_by_1",
																													"typeString": "int_const 0"
																												},
																												"value": "0"
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_rational_0_by_1",
																													"typeString": "int_const 0"
																												}
																											],
																											"id": 1027,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"lValueRequested": false,
																											"nodeType": "ElementaryTypeNameExpression",
																											"src": "5662:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_address_$",
																												"typeString": "type(address)"
																											},
																											"typeName": {
																												"id": 1026,
																												"name": "address",
																												"nodeType": "ElementaryTypeName",
																												"src": "5662:7:8",
																												"typeDescriptions": {}
																											}
																										},
																										"id": 1029,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "typeConversion",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "5662:10:8",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"src": "5644:28:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bool",
																										"typeString": "bool"
																									}
																								},
																								"id": 1034,
																								"nodeType": "IfStatement",
																								"src": "5640:107:8",
																								"trueBody": {
																									"id": 1033,
																									"nodeType": "Block",
																									"src": "5674:73:8",
																									"statements": [
																										{
																											"expression": {
																												"id": 1031,
																												"name": "ownership",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 995,
																												"src": "5711:9:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																													"typeString": "struct IERC721A.TokenOwnership memory"
																												}
																											},
																											"functionReturnParameters": 981,
																											"id": 1032,
																											"nodeType": "Return",
																											"src": "5704:16:8"
																										}
																									]
																								}
																							}
																						]
																					},
																					"condition": {
																						"hexValue": "74727565",
																						"id": 1014,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "bool",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5521:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						},
																						"value": "true"
																					},
																					"id": 1036,
																					"nodeType": "WhileStatement",
																					"src": "5514:255:8"
																				}
																			]
																		}
																	}
																]
															}
														}
													}
												]
											},
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1043,
														"name": "OwnerQueryForNonexistentToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2150,
														"src": "5827:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5827:31:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1045,
												"nodeType": "RevertStatement",
												"src": "5820:38:8"
											}
										]
									},
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "4589:185:8",
										"text": " Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around in the collection over time."
									},
									"id": 1047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownershipOf",
									"nameLocation": "4788:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4809:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "4801:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 975,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4801:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4800:17:8"
									},
									"returnParameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "4841:21:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
													"typeString": "struct IERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 979,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 978,
														"name": "TokenOwnership",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2172,
														"src": "4841:14:8"
													},
													"referencedDeclaration": 2172,
													"src": "4841:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
														"typeString": "struct IERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4840:23:8"
									},
									"scope": 2117,
									"src": "4779:1086:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										48
									],
									"body": {
										"id": 1061,
										"nodeType": "Block",
										"src": "5995:50:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1057,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "6025:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1056,
															"name": "_ownershipOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1047,
															"src": "6012:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2172_memory_ptr_$",
																"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
															}
														},
														"id": 1058,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6012:21:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership memory"
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2167,
													"src": "6012:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1055,
												"id": 1060,
												"nodeType": "Return",
												"src": "6005:33:8"
											}
										]
									},
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "5871:46:8",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 1062,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "5931:7:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1052,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5968:8:8"
									},
									"parameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5947:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5939:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5939:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5938:17:8"
									},
									"returnParameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "5986:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5986:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5985:9:8"
									},
									"scope": 2117,
									"src": "5922:123:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										145
									],
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "6176:29:8",
										"statements": [
											{
												"expression": {
													"id": 1069,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 766,
													"src": "6193:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1068,
												"id": 1070,
												"nodeType": "Return",
												"src": "6186:12:8"
											}
										]
									},
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "6051:51:8",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "6116:4:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1065,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6143:8:8"
									},
									"parameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6120:2:8"
									},
									"returnParameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6161:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1066,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6161:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6160:15:8"
									},
									"scope": 2117,
									"src": "6107:98:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										151
									],
									"body": {
										"id": 1081,
										"nodeType": "Block",
										"src": "6340:31:8",
										"statements": [
											{
												"expression": {
													"id": 1079,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 768,
													"src": "6357:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1078,
												"id": 1080,
												"nodeType": "Return",
												"src": "6350:14:8"
											}
										]
									},
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "6211:53:8",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 1082,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "6278:6:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1075,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6307:8:8"
									},
									"parameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6284:2:8"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "6325:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1076,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6325:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6324:15:8"
									},
									"scope": 2117,
									"src": "6269:102:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										159
									],
									"body": {
										"id": 1125,
										"nodeType": "Block",
										"src": "6525:240:8",
										"statements": [
											{
												"condition": {
													"id": 1094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "6539:17:8",
													"subExpression": {
														"arguments": [
															{
																"id": 1092,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1085,
																"src": "6548:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1091,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1352,
															"src": "6540:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1093,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6540:16:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1098,
												"nodeType": "IfStatement",
												"src": "6535:59:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1095,
															"name": "URIQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2165,
															"src": "6565:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6565:29:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1097,
													"nodeType": "RevertStatement",
													"src": "6558:36:8"
												}
											},
											{
												"assignments": [
													1100
												],
												"declarations": [
													{
														"constant": false,
														"id": 1100,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "6619:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1125,
														"src": "6605:21:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1099,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "6605:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1103,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1101,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "6629:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6629:10:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6605:34:8"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1106,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1100,
																		"src": "6662:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6656:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1104,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "6656:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1107,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6656:14:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "6656:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6681:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6656:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1122,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6756:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "6656:102:8",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1115,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1100,
																		"src": "6709:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1116,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1085,
																				"src": "6718:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 565,
																			"src": "6718:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6718:18:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"id": 1119,
																		"name": "baseExtension",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 771,
																		"src": "6738:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	],
																	"expression": {
																		"id": 1113,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "6692:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1114,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "6692:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6692:60:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6685:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1111,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "6685:6:8",
																"typeDescriptions": {}
															}
														},
														"id": 1121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6685:68:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1090,
												"id": 1124,
												"nodeType": "Return",
												"src": "6649:109:8"
											}
										]
									},
									"documentation": {
										"id": 1083,
										"nodeType": "StructuredDocumentation",
										"src": "6377:55:8",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 1126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "6446:8:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1087,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6492:8:8"
									},
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6463:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "6455:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6455:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6454:17:8"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "6510:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1088,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6510:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6509:15:8"
									},
									"scope": 2117,
									"src": "6437:328:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "7072:26:8",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7089:2:8",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 1131,
												"id": 1133,
												"nodeType": "Return",
												"src": "7082:9:8"
											}
										]
									},
									"documentation": {
										"id": 1127,
										"nodeType": "StructuredDocumentation",
										"src": "6771:230:8",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
									},
									"id": 1135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "7015:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7023:2:8"
									},
									"returnParameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "7057:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1129,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7057:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7056:15:8"
									},
									"scope": 2117,
									"src": "7006:92:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										88
									],
									"body": {
										"id": 1180,
										"nodeType": "Block",
										"src": "7217:301:8",
										"statements": [
											{
												"assignments": [
													1145
												],
												"declarations": [
													{
														"constant": false,
														"id": 1145,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7235:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1180,
														"src": "7227:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1144,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7227:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1150,
												"initialValue": {
													"arguments": [
														{
															"id": 1148,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "7259:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1146,
															"name": "ERC721A",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2117,
															"src": "7243:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721A_$2117_$",
																"typeString": "type(contract ERC721A)"
															}
														},
														"id": 1147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1062,
														"src": "7243:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7243:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7227:40:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1151,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1138,
														"src": "7281:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1152,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "7287:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7281:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1157,
												"nodeType": "IfStatement",
												"src": "7277:48:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1154,
															"name": "ApprovalToCurrentOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2138,
															"src": "7301:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7301:24:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1156,
													"nodeType": "RevertStatement",
													"src": "7294:31:8"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1158,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "7340:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1159,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7340:12:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1160,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "7356:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7340:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1173,
												"nodeType": "IfStatement",
												"src": "7336:137:8",
												"trueBody": {
													"condition": {
														"id": 1167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7366:38:8",
														"subExpression": {
															"arguments": [
																{
																	"id": 1163,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1145,
																	"src": "7384:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1164,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 467,
																		"src": "7391:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1165,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7391:12:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1162,
																"name": "isApprovedForAll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1255,
																"src": "7367:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address,address) view returns (bool)"
																}
															},
															"id": 1166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7367:37:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1172,
													"nodeType": "IfStatement",
													"src": "7363:110:8",
													"trueBody": {
														"id": 1171,
														"nodeType": "Block",
														"src": "7406:67:8",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1168,
																		"name": "ApprovalCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2129,
																		"src": "7427:33:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1169,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7427:35:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1170,
																"nodeType": "RevertStatement",
																"src": "7420:42:8"
															}
														]
													}
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1175,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "7492:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1176,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "7496:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1177,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "7505:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1174,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2035,
														"src": "7483:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7483:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1179,
												"nodeType": "ExpressionStatement",
												"src": "7483:28:8"
											}
										]
									},
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "7104:46:8",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 1181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "7164:7:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1142,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7208:8:8"
									},
									"parameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7180:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1181,
												"src": "7172:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7172:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7192:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1181,
												"src": "7184:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7184:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7171:29:8"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7217:0:8"
									},
									"scope": 2117,
									"src": "7155:363:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										104
									],
									"body": {
										"id": 1202,
										"nodeType": "Block",
										"src": "7656:123:8",
										"statements": [
											{
												"condition": {
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7670:17:8",
													"subExpression": {
														"arguments": [
															{
																"id": 1191,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1184,
																"src": "7679:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1190,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1352,
															"src": "7671:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1192,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7671:16:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1197,
												"nodeType": "IfStatement",
												"src": "7666:64:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1194,
															"name": "ApprovalQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2132,
															"src": "7696:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7696:34:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1196,
													"nodeType": "RevertStatement",
													"src": "7689:41:8"
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1198,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "7748:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1200,
													"indexExpression": {
														"id": 1199,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1184,
														"src": "7764:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7748:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1189,
												"id": 1201,
												"nodeType": "Return",
												"src": "7741:31:8"
											}
										]
									},
									"documentation": {
										"id": 1182,
										"nodeType": "StructuredDocumentation",
										"src": "7524:50:8",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 1203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "7588:11:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1186,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7629:8:8"
									},
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7608:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "7600:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7599:17:8"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "7647:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7647:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7646:9:8"
									},
									"scope": 2117,
									"src": "7579:200:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										96
									],
									"body": {
										"id": 1236,
										"nodeType": "Block",
										"src": "7930:198:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1212,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1206,
														"src": "7944:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1213,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "7956:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7956:12:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7944:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1219,
												"nodeType": "IfStatement",
												"src": "7940:54:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1216,
															"name": "ApproveToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2135,
															"src": "7977:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1217,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7977:17:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1218,
													"nodeType": "RevertStatement",
													"src": "7970:24:8"
												}
											},
											{
												"expression": {
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1220,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 791,
																"src": "8005:18:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1224,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1221,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 467,
																	"src": "8024:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8024:12:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8005:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1225,
														"indexExpression": {
															"id": 1223,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1206,
															"src": "8038:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8005:42:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1226,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1208,
														"src": "8050:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8005:53:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "8005:53:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1230,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "8088:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8088:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1232,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1206,
															"src": "8102:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1233,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "8112:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1229,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "8073:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8073:48:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1235,
												"nodeType": "EmitStatement",
												"src": "8068:53:8"
											}
										]
									},
									"documentation": {
										"id": 1204,
										"nodeType": "StructuredDocumentation",
										"src": "7785:56:8",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 1237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "7855:17:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1210,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7921:8:8"
									},
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "7881:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "7873:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7873:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "7896:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "7891:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1207,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7891:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7872:33:8"
									},
									"returnParameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7930:0:8"
									},
									"scope": 2117,
									"src": "7846:282:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										114
									],
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "8297:59:8",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1248,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "8314:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 1250,
														"indexExpression": {
															"id": 1249,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "8333:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8314:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1252,
													"indexExpression": {
														"id": 1251,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1242,
														"src": "8340:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8314:35:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1247,
												"id": 1253,
												"nodeType": "Return",
												"src": "8307:42:8"
											}
										]
									},
									"documentation": {
										"id": 1238,
										"nodeType": "StructuredDocumentation",
										"src": "8134:55:8",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "8203:16:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1244,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8273:8:8"
									},
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8228:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "8220:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8220:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "8243:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "8235:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8235:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8219:33:8"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "8291:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8291:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8290:6:8"
									},
									"scope": 2117,
									"src": "8194:162:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										80
									],
									"body": {
										"id": 1272,
										"nodeType": "Block",
										"src": "8537:45:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1267,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "8557:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1268,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "8563:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1269,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1262,
															"src": "8567:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1266,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1818,
														"src": "8547:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8547:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1271,
												"nodeType": "ExpressionStatement",
												"src": "8547:28:8"
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "8362:51:8",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 1273,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "8427:12:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1264,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8528:8:8"
									},
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8457:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1273,
												"src": "8449:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8449:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8479:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1273,
												"src": "8471:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8471:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8499:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1273,
												"src": "8491:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8491:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8439:73:8"
									},
									"returnParameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8537:0:8"
									},
									"scope": 2117,
									"src": "8418:164:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										70
									],
									"body": {
										"id": 1291,
										"nodeType": "Block",
										"src": "8771:56:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1285,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1276,
															"src": "8798:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1286,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1278,
															"src": "8804:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1287,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "8808:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8817:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1284,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1292,
															1328
														],
														"referencedDeclaration": 1328,
														"src": "8781:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8781:39:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1290,
												"nodeType": "ExpressionStatement",
												"src": "8781:39:8"
											}
										]
									},
									"documentation": {
										"id": 1274,
										"nodeType": "StructuredDocumentation",
										"src": "8588:55:8",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 1292,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "8657:16:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1282,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8762:8:8"
									},
									"parameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8691:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "8683:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8683:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8713:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "8705:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8705:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8733:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "8725:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8725:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8673:73:8"
									},
									"returnParameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8771:0:8"
									},
									"scope": 2117,
									"src": "8648:179:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 1327,
										"nodeType": "Block",
										"src": "9044:209:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1306,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "9064:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1307,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1297,
															"src": "9070:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1308,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1299,
															"src": "9074:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1305,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1818,
														"src": "9054:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9054:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1310,
												"nodeType": "ExpressionStatement",
												"src": "9054:28:8"
											},
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1311,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1297,
															"src": "9096:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 178,
														"src": "9096:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9096:15:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1326,
												"nodeType": "IfStatement",
												"src": "9092:155:8",
												"trueBody": {
													"condition": {
														"id": 1320,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "9116:57:8",
														"subExpression": {
															"arguments": [
																{
																	"id": 1315,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1295,
																	"src": "9148:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1316,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1297,
																	"src": "9154:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1317,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9158:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1318,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1301,
																	"src": "9167:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1314,
																"name": "_checkContractOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2090,
																"src": "9117:30:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9117:56:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1325,
													"nodeType": "IfStatement",
													"src": "9113:134:8",
													"trueBody": {
														"id": 1324,
														"nodeType": "Block",
														"src": "9175:72:8",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1321,
																		"name": "TransferToNonERC721ReceiverImplementer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2159,
																		"src": "9196:38:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1322,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9196:40:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1323,
																"nodeType": "RevertStatement",
																"src": "9189:47:8"
															}
														]
													}
												}
											}
										]
									},
									"documentation": {
										"id": 1293,
										"nodeType": "StructuredDocumentation",
										"src": "8833:55:8",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 1328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "8902:16:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1303,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9035:8:8"
									},
									"parameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8936:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "8928:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8928:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8958:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "8950:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8950:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8978:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "8970:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8970:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "9008:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "8995:18:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1300,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8995:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8918:101:8"
									},
									"returnParameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9044:0:8"
									},
									"scope": 2117,
									"src": "8893:360:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1351,
										"nodeType": "Block",
										"src": "9562:109:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1336,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "9579:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9579:15:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1338,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1331,
																"src": "9598:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9579:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1340,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1331,
																"src": "9609:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1341,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 762,
																"src": "9619:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9609:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "9579:53:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "9636:28:8",
														"subExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1344,
																	"name": "_ownerships",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 776,
																	"src": "9637:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																		"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																	}
																},
																"id": 1346,
																"indexExpression": {
																	"id": 1345,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1331,
																	"src": "9649:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9637:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																	"typeString": "struct IERC721A.TokenOwnership storage ref"
																}
															},
															"id": 1347,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "burned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2171,
															"src": "9637:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9579:85:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1335,
												"id": 1350,
												"nodeType": "Return",
												"src": "9572:92:8"
											}
										]
									},
									"documentation": {
										"id": 1329,
										"nodeType": "StructuredDocumentation",
										"src": "9259:235:8",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),"
									},
									"id": 1352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "9508:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9524:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "9516:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9516:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9515:17:8"
									},
									"returnParameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "9556:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1333,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9556:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9555:6:8"
									},
									"scope": 2117,
									"src": "9499:172:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "9808:44:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1361,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "9828:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1362,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "9832:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9842:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1360,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1367,
															1530
														],
														"referencedDeclaration": 1530,
														"src": "9818:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9818:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1365,
												"nodeType": "ExpressionStatement",
												"src": "9818:27:8"
											}
										]
									},
									"documentation": {
										"id": 1353,
										"nodeType": "StructuredDocumentation",
										"src": "9677:68:8",
										"text": " @dev Equivalent to `_safeMint(to, quantity, '')`."
									},
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "9759:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9777:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "9769:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9769:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "9789:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "9781:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9781:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9768:30:8"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9808:0:8"
									},
									"scope": 2117,
									"src": "9750:102:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1529,
										"nodeType": "Block",
										"src": "10320:1600:8",
										"statements": [
											{
												"assignments": [
													1378
												],
												"declarations": [
													{
														"constant": false,
														"id": 1378,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "10338:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1529,
														"src": "10330:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1377,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10330:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1380,
												"initialValue": {
													"id": 1379,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 762,
													"src": "10353:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10330:36:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1381,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "10380:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1384,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10394:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10386:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1382,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10386:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1385,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10386:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10380:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1390,
												"nodeType": "IfStatement",
												"src": "10376:48:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1387,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "10405:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1388,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10405:19:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1389,
													"nodeType": "RevertStatement",
													"src": "10398:26:8"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1391,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1372,
														"src": "10438:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10450:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10438:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1397,
												"nodeType": "IfStatement",
												"src": "10434:44:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1394,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2147,
															"src": "10460:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10460:18:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1396,
													"nodeType": "RevertStatement",
													"src": "10453:25:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10519:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10511:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1399,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10511:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1402,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10511:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1403,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "10523:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1404,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "10527:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1405,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "10541:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1398,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2103,
														"src": "10489:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10489:61:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1407,
												"nodeType": "ExpressionStatement",
												"src": "10489:61:8"
											},
											{
												"id": 1518,
												"nodeType": "UncheckedBlock",
												"src": "10797:1047:8",
												"statements": [
													{
														"expression": {
															"id": 1416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1408,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "10821:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1410,
																	"indexExpression": {
																		"id": 1409,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1370,
																		"src": "10834:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10821:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1411,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "10821:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1414,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1372,
																		"src": "10856:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10849:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1412,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "10849:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10849:16:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "10821:44:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1417,
														"nodeType": "ExpressionStatement",
														"src": "10821:44:8"
													},
													{
														"expression": {
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1418,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "10879:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1420,
																	"indexExpression": {
																		"id": 1419,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1370,
																		"src": "10892:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10879:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1421,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2176,
																"src": "10879:29:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1424,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1372,
																		"src": "10919:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10912:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1422,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "10912:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10912:16:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "10879:49:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1427,
														"nodeType": "ExpressionStatement",
														"src": "10879:49:8"
													},
													{
														"expression": {
															"id": 1433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1428,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 776,
																		"src": "10943:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1430,
																	"indexExpression": {
																		"id": 1429,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1378,
																		"src": "10955:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10943:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1431,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "10943:30:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1432,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1370,
																"src": "10976:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10943:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1434,
														"nodeType": "ExpressionStatement",
														"src": "10943:35:8"
													},
													{
														"expression": {
															"id": 1444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1435,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 776,
																		"src": "10992:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1437,
																	"indexExpression": {
																		"id": 1436,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1378,
																		"src": "11004:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10992:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1438,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2169,
																"src": "10992:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1441,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "11042:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "11042:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11035:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1439,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "11035:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1443,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11035:23:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "10992:66:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1445,
														"nodeType": "ExpressionStatement",
														"src": "10992:66:8"
													},
													{
														"assignments": [
															1447
														],
														"declarations": [
															{
																"constant": false,
																"id": 1447,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "11081:12:8",
																"nodeType": "VariableDeclaration",
																"scope": 1518,
																"src": "11073:20:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1446,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11073:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1449,
														"initialValue": {
															"id": 1448,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "11096:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11073:35:8"
													},
													{
														"assignments": [
															1451
														],
														"declarations": [
															{
																"constant": false,
																"id": 1451,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "11130:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1518,
																"src": "11122:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1450,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11122:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1455,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1452,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1447,
																"src": "11136:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1453,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1372,
																"src": "11151:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11136:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11122:37:8"
													},
													{
														"condition": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 1456,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "11178:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 178,
																"src": "11178:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11178:15:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 1512,
															"nodeType": "Block",
															"src": "11643:149:8",
															"statements": [
																{
																	"body": {
																		"id": 1507,
																		"nodeType": "Block",
																		"src": "11664:86:8",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1500,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "11708:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1499,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "11700:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1498,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "11700:7:8",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1501,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "11700:10:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1502,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1370,
																							"src": "11712:2:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1504,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "++",
																							"prefix": false,
																							"src": "11716:14:8",
																							"subExpression": {
																								"id": 1503,
																								"name": "updatedIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1447,
																								"src": "11716:12:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1497,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 14,
																						"src": "11691:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1505,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "11691:40:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1506,
																				"nodeType": "EmitStatement",
																				"src": "11686:45:8"
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1508,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1447,
																			"src": "11758:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1509,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1451,
																			"src": "11773:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11758:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1511,
																	"nodeType": "DoWhileStatement",
																	"src": "11661:117:8"
																}
															]
														},
														"id": 1513,
														"nodeType": "IfStatement",
														"src": "11174:618:8",
														"trueBody": {
															"id": 1496,
															"nodeType": "Block",
															"src": "11195:442:8",
															"statements": [
																{
																	"body": {
																		"id": 1484,
																		"nodeType": "Block",
																		"src": "11216:277:8",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1462,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "11260:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1461,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "11252:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1460,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "11252:7:8",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1463,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "11252:10:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1464,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1370,
																							"src": "11264:2:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1465,
																							"name": "updatedIndex",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1447,
																							"src": "11268:12:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1459,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 14,
																						"src": "11243:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1466,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "11243:38:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1467,
																				"nodeType": "EmitStatement",
																				"src": "11238:43:8"
																			},
																			{
																				"condition": {
																					"id": 1478,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "!",
																					"prefix": true,
																					"src": "11307:70:8",
																					"subExpression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30",
																										"id": 1471,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "11347:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										},
																										"value": "0"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										}
																									],
																									"id": 1470,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "11339:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 1469,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "11339:7:8",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1472,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "11339:10:8",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1473,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1370,
																								"src": "11351:2:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1475,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "++",
																								"prefix": false,
																								"src": "11355:14:8",
																								"subExpression": {
																									"id": 1474,
																									"name": "updatedIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1447,
																									"src": "11355:12:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 1476,
																								"name": "_data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1374,
																								"src": "11371:5:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 1468,
																							"name": "_checkContractOnERC721Received",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2090,
																							"src": "11308:30:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																								"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																							}
																						},
																						"id": 1477,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "11308:69:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1483,
																				"nodeType": "IfStatement",
																				"src": "11303:172:8",
																				"trueBody": {
																					"id": 1482,
																					"nodeType": "Block",
																					"src": "11379:96:8",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [],
																								"expression": {
																									"argumentTypes": [],
																									"id": 1479,
																									"name": "TransferToNonERC721ReceiverImplementer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2159,
																									"src": "11412:38:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$__$returns$__$",
																										"typeString": "function () pure"
																									}
																								},
																								"id": 1480,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "11412:40:8",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1481,
																							"nodeType": "RevertStatement",
																							"src": "11405:47:8"
																						}
																					]
																				}
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1487,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1485,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1447,
																			"src": "11501:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1486,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1451,
																			"src": "11516:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11501:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1488,
																	"nodeType": "DoWhileStatement",
																	"src": "11213:308:8"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1491,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1489,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 762,
																			"src": "11583:13:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1490,
																			"name": "startTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1378,
																			"src": "11600:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11583:29:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1495,
																	"nodeType": "IfStatement",
																	"src": "11579:43:8",
																	"trueBody": {
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1492,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "11614:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1493,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11614:8:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1494,
																		"nodeType": "ExpressionStatement",
																		"src": "11614:8:8"
																	}
																}
															]
														}
													},
													{
														"expression": {
															"id": 1516,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1514,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 762,
																"src": "11805:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1515,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1447,
																"src": "11821:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11805:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1517,
														"nodeType": "ExpressionStatement",
														"src": "11805:28:8"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11882:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11874:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1520,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11874:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11874:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "11886:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1525,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "11890:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1526,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "11904:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1519,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2116,
														"src": "11853:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11853:60:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1528,
												"nodeType": "ExpressionStatement",
												"src": "11853:60:8"
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "9858:349:8",
										"text": " @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 1530,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "10221:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10248:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "10240:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10240:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "10268:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "10260:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10260:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10299:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1530,
												"src": "10286:18:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1373,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10286:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10230:80:8"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10320:0:8"
									},
									"scope": 2117,
									"src": "10212:1708:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1647,
										"nodeType": "Block",
										"src": "12221:1092:8",
										"statements": [
											{
												"assignments": [
													1539
												],
												"declarations": [
													{
														"constant": false,
														"id": 1539,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "12239:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1647,
														"src": "12231:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1538,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12231:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1541,
												"initialValue": {
													"id": 1540,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 762,
													"src": "12254:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12231:36:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1542,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1533,
														"src": "12281:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1545,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12295:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12287:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1543,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12287:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1546,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12287:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12281:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1551,
												"nodeType": "IfStatement",
												"src": "12277:48:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1548,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "12306:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12306:19:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1550,
													"nodeType": "RevertStatement",
													"src": "12299:26:8"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1552,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1535,
														"src": "12339:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1553,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12351:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "12339:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1558,
												"nodeType": "IfStatement",
												"src": "12335:44:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1555,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2147,
															"src": "12361:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1556,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12361:18:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1557,
													"nodeType": "RevertStatement",
													"src": "12354:25:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12420:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12412:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1560,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12412:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12412:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1564,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "12424:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1565,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "12428:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1566,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1535,
															"src": "12442:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1559,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2103,
														"src": "12390:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12390:61:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1568,
												"nodeType": "ExpressionStatement",
												"src": "12390:61:8"
											},
											{
												"id": 1636,
												"nodeType": "UncheckedBlock",
												"src": "12698:539:8",
												"statements": [
													{
														"expression": {
															"id": 1577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1569,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "12722:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1571,
																	"indexExpression": {
																		"id": 1570,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1533,
																		"src": "12735:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12722:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1572,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "12722:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1575,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1535,
																		"src": "12757:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12750:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1573,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12750:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1576,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12750:16:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12722:44:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1578,
														"nodeType": "ExpressionStatement",
														"src": "12722:44:8"
													},
													{
														"expression": {
															"id": 1587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1579,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "12780:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1581,
																	"indexExpression": {
																		"id": 1580,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1533,
																		"src": "12793:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12780:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1582,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2176,
																"src": "12780:29:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1585,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1535,
																		"src": "12820:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1584,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12813:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1583,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12813:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12813:16:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12780:49:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1588,
														"nodeType": "ExpressionStatement",
														"src": "12780:49:8"
													},
													{
														"expression": {
															"id": 1594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1589,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 776,
																		"src": "12844:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1591,
																	"indexExpression": {
																		"id": 1590,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1539,
																		"src": "12856:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12844:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1592,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "12844:30:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1593,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1533,
																"src": "12877:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12844:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1595,
														"nodeType": "ExpressionStatement",
														"src": "12844:35:8"
													},
													{
														"expression": {
															"id": 1605,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1596,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 776,
																		"src": "12893:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1598,
																	"indexExpression": {
																		"id": 1597,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1539,
																		"src": "12905:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12893:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1599,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2169,
																"src": "12893:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1602,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "12943:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "12943:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12936:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1600,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12936:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1604,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12936:23:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12893:66:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1606,
														"nodeType": "ExpressionStatement",
														"src": "12893:66:8"
													},
													{
														"assignments": [
															1608
														],
														"declarations": [
															{
																"constant": false,
																"id": 1608,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "12982:12:8",
																"nodeType": "VariableDeclaration",
																"scope": 1636,
																"src": "12974:20:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1607,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12974:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1610,
														"initialValue": {
															"id": 1609,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "12997:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12974:35:8"
													},
													{
														"assignments": [
															1612
														],
														"declarations": [
															{
																"constant": false,
																"id": 1612,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "13031:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1636,
																"src": "13023:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1611,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13023:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1616,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1613,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "13037:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1614,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1535,
																"src": "13052:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13037:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13023:37:8"
													},
													{
														"body": {
															"id": 1627,
															"nodeType": "Block",
															"src": "13078:78:8",
															"statements": [
																{
																	"eventCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "30",
																						"id": 1620,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13118:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						}
																					],
																					"id": 1619,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "13110:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1618,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "13110:7:8",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1621,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13110:10:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1622,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1533,
																				"src": "13122:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1624,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "UnaryOperation",
																				"operator": "++",
																				"prefix": false,
																				"src": "13126:14:8",
																				"subExpression": {
																					"id": 1623,
																					"name": "updatedIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1608,
																					"src": "13126:12:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1617,
																			"name": "Transfer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 14,
																			"src": "13101:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "13101:40:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1626,
																	"nodeType": "EmitStatement",
																	"src": "13096:45:8"
																}
															]
														},
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1628,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "13164:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1629,
																"name": "end",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1612,
																"src": "13179:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13164:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1631,
														"nodeType": "DoWhileStatement",
														"src": "13075:109:8"
													},
													{
														"expression": {
															"id": 1634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1632,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 762,
																"src": "13198:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1633,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "13214:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13198:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1635,
														"nodeType": "ExpressionStatement",
														"src": "13198:28:8"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13275:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13267:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1638,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13267:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13267:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1642,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "13279:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1643,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "13283:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1644,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1535,
															"src": "13297:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1637,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2116,
														"src": "13246:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13246:60:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1646,
												"nodeType": "ExpressionStatement",
												"src": "13246:60:8"
											}
										]
									},
									"documentation": {
										"id": 1531,
										"nodeType": "StructuredDocumentation",
										"src": "11926:236:8",
										"text": " @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 1648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "12176:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12190:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "12182:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12182:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "12202:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "12194:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1534,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12194:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12181:30:8"
									},
									"returnParameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12221:0:8"
									},
									"scope": 2117,
									"src": "12167:1146:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1817,
										"nodeType": "Block",
										"src": "13655:1982:8",
										"statements": [
											{
												"assignments": [
													1660
												],
												"declarations": [
													{
														"constant": false,
														"id": 1660,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "13687:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 1817,
														"src": "13665:35:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 1659,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1658,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2172,
																"src": "13665:14:8"
															},
															"referencedDeclaration": 2172,
															"src": "13665:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																"typeString": "struct IERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1664,
												"initialValue": {
													"arguments": [
														{
															"id": 1662,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "13716:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1661,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "13703:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2172_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13703:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
														"typeString": "struct IERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13665:59:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1665,
															"name": "prevOwnership",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1660,
															"src": "13739:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																"typeString": "struct IERC721A.TokenOwnership memory"
															}
														},
														"id": 1666,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2167,
														"src": "13739:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1667,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1651,
														"src": "13761:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13739:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1672,
												"nodeType": "IfStatement",
												"src": "13735:67:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1669,
															"name": "TransferFromIncorrectOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2156,
															"src": "13774:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1670,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13774:28:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1671,
													"nodeType": "RevertStatement",
													"src": "13767:35:8"
												}
											},
											{
												"assignments": [
													1674
												],
												"declarations": [
													{
														"constant": false,
														"id": 1674,
														"mutability": "mutable",
														"name": "isApprovedOrOwner",
														"nameLocation": "13818:17:8",
														"nodeType": "VariableDeclaration",
														"scope": 1817,
														"src": "13813:22:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1673,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "13813:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1693,
												"initialValue": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1691,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1675,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 467,
																			"src": "13839:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "13839:12:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 1677,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1651,
																		"src": "13855:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "13839:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1680,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1651,
																			"src": "13892:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1681,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 467,
																				"src": "13898:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 1682,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "13898:12:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1679,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1255,
																		"src": "13875:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 1683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13875:36:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "13839:72:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1690,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1686,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1655,
																			"src": "13939:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1685,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1203,
																		"src": "13927:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 1687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13927:20:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1688,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 467,
																		"src": "13951:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13951:12:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "13927:36:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13839:124:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1692,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "13838:126:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13813:151:8"
											},
											{
												"condition": {
													"id": 1695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "13979:18:8",
													"subExpression": {
														"id": 1694,
														"name": "isApprovedOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1674,
														"src": "13980:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1699,
												"nodeType": "IfStatement",
												"src": "13975:66:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1696,
															"name": "TransferCallerNotOwnerNorApproved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "14006:33:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1697,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14006:35:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1698,
													"nodeType": "RevertStatement",
													"src": "13999:42:8"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1700,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1653,
														"src": "14055:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14069:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "14061:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1701,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "14061:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1704,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14061:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14055:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1709,
												"nodeType": "IfStatement",
												"src": "14051:52:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1706,
															"name": "TransferToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2162,
															"src": "14080:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14080:23:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1708,
													"nodeType": "RevertStatement",
													"src": "14073:30:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1711,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "14136:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1712,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1653,
															"src": "14142:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1713,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "14146:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 1714,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14155:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1710,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2103,
														"src": "14114:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14114:43:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1716,
												"nodeType": "ExpressionStatement",
												"src": "14114:43:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14236:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1719,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14228:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1718,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14228:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14228:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1722,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "14240:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1723,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "14249:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1717,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2035,
														"src": "14219:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14219:35:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1725,
												"nodeType": "ExpressionStatement",
												"src": "14219:35:8"
											},
											{
												"id": 1803,
												"nodeType": "UncheckedBlock",
												"src": "14520:1016:8",
												"statements": [
													{
														"expression": {
															"id": 1731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1726,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "14544:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1728,
																	"indexExpression": {
																		"id": 1727,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1651,
																		"src": "14557:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14544:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1729,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "14544:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14574:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "14544:31:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1732,
														"nodeType": "ExpressionStatement",
														"src": "14544:31:8"
													},
													{
														"expression": {
															"id": 1738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1733,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "14589:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1735,
																	"indexExpression": {
																		"id": 1734,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1653,
																		"src": "14602:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14589:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1736,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "14589:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14617:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "14589:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1739,
														"nodeType": "ExpressionStatement",
														"src": "14589:29:8"
													},
													{
														"assignments": [
															1742
														],
														"declarations": [
															{
																"constant": false,
																"id": 1742,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "14656:8:8",
																"nodeType": "VariableDeclaration",
																"scope": 1803,
																"src": "14633:31:8",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1741,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1740,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2172,
																		"src": "14633:14:8"
																	},
																	"referencedDeclaration": 2172,
																	"src": "14633:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1746,
														"initialValue": {
															"baseExpression": {
																"id": 1743,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 776,
																"src": "14667:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1745,
															"indexExpression": {
																"id": 1744,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1655,
																"src": "14679:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "14667:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14633:54:8"
													},
													{
														"expression": {
															"id": 1751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1747,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1742,
																	"src": "14701:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1749,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "14701:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1750,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1653,
																"src": "14717:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14701:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1752,
														"nodeType": "ExpressionStatement",
														"src": "14701:18:8"
													},
													{
														"expression": {
															"id": 1761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1753,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1742,
																	"src": "14733:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1755,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2169,
																"src": "14733:23:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1758,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "14766:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1759,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "14766:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1757,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14759:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1756,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "14759:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1760,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14759:23:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "14733:49:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1762,
														"nodeType": "ExpressionStatement",
														"src": "14733:49:8"
													},
													{
														"assignments": [
															1764
														],
														"declarations": [
															{
																"constant": false,
																"id": 1764,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "15038:11:8",
																"nodeType": "VariableDeclaration",
																"scope": 1803,
																"src": "15030:19:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1763,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15030:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1768,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1767,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1765,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1655,
																"src": "15052:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1766,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15062:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15052:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15030:33:8"
													},
													{
														"assignments": [
															1771
														],
														"declarations": [
															{
																"constant": false,
																"id": 1771,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "15100:8:8",
																"nodeType": "VariableDeclaration",
																"scope": 1803,
																"src": "15077:31:8",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1770,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1769,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2172,
																		"src": "15077:14:8"
																	},
																	"referencedDeclaration": 2172,
																	"src": "15077:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1775,
														"initialValue": {
															"baseExpression": {
																"id": 1772,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 776,
																"src": "15111:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1774,
															"indexExpression": {
																"id": 1773,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1764,
																"src": "15123:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15111:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15077:58:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1782,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1776,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1771,
																	"src": "15153:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "15153:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15178:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1779,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15170:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1778,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15170:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1781,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15170:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15153:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1802,
														"nodeType": "IfStatement",
														"src": "15149:377:8",
														"trueBody": {
															"id": 1801,
															"nodeType": "Block",
															"src": "15182:344:8",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1783,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1764,
																			"src": "15345:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1784,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 762,
																			"src": "15360:13:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "15345:28:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1800,
																	"nodeType": "IfStatement",
																	"src": "15341:171:8",
																	"trueBody": {
																		"id": 1799,
																		"nodeType": "Block",
																		"src": "15375:137:8",
																		"statements": [
																			{
																				"expression": {
																					"id": 1790,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 1786,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1771,
																							"src": "15397:8:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 1788,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2167,
																						"src": "15397:13:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 1789,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1651,
																						"src": "15413:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "15397:20:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 1791,
																				"nodeType": "ExpressionStatement",
																				"src": "15397:20:8"
																			},
																			{
																				"expression": {
																					"id": 1797,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 1792,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1771,
																							"src": "15439:8:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 1794,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2169,
																						"src": "15439:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 1795,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1660,
																							"src": "15465:13:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																								"typeString": "struct IERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 1796,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2169,
																						"src": "15465:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "15439:54:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 1798,
																				"nodeType": "ExpressionStatement",
																				"src": "15439:54:8"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1805,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "15560:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1806,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1653,
															"src": "15566:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1807,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "15570:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1804,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "15551:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15551:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1809,
												"nodeType": "EmitStatement",
												"src": "15546:32:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1811,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "15609:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1812,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1653,
															"src": "15615:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1813,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "15619:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 1814,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15628:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1810,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2116,
														"src": "15588:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15588:42:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1816,
												"nodeType": "ExpressionStatement",
												"src": "15588:42:8"
											}
										]
									},
									"documentation": {
										"id": 1649,
										"nodeType": "StructuredDocumentation",
										"src": "13319:231:8",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 1818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "13564:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13591:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "13583:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1650,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13583:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1653,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13613:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "13605:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13605:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13633:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "13625:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13625:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13573:73:8"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13655:0:8"
									},
									"scope": 2117,
									"src": "13555:2082:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1829,
										"nodeType": "Block",
										"src": "15759:38:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1825,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "15775:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15784:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1824,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1830,
															2012
														],
														"referencedDeclaration": 2012,
														"src": "15769:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (uint256,bool)"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15769:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1828,
												"nodeType": "ExpressionStatement",
												"src": "15769:21:8"
											}
										]
									},
									"documentation": {
										"id": 1819,
										"nodeType": "StructuredDocumentation",
										"src": "15643:62:8",
										"text": " @dev Equivalent to `_burn(tokenId, false)`."
									},
									"id": 1830,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "15719:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "15733:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "15725:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15725:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15724:17:8"
									},
									"returnParameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15759:0:8"
									},
									"scope": 2117,
									"src": "15710:87:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2011,
										"nodeType": "Block",
										"src": "16083:2286:8",
										"statements": [
											{
												"assignments": [
													1840
												],
												"declarations": [
													{
														"constant": false,
														"id": 1840,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "16115:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 2011,
														"src": "16093:35:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 1839,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1838,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2172,
																"src": "16093:14:8"
															},
															"referencedDeclaration": 2172,
															"src": "16093:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																"typeString": "struct IERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1844,
												"initialValue": {
													"arguments": [
														{
															"id": 1842,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "16144:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1841,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "16131:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2172_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
														}
													},
													"id": 1843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16131:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
														"typeString": "struct IERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16093:59:8"
											},
											{
												"assignments": [
													1846
												],
												"declarations": [
													{
														"constant": false,
														"id": 1846,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "16171:4:8",
														"nodeType": "VariableDeclaration",
														"scope": 2011,
														"src": "16163:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1845,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16163:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1849,
												"initialValue": {
													"expression": {
														"id": 1847,
														"name": "prevOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1840,
														"src": "16178:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership memory"
														}
													},
													"id": 1848,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2167,
													"src": "16178:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16163:33:8"
											},
											{
												"condition": {
													"id": 1850,
													"name": "approvalCheck",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1835,
													"src": "16211:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1879,
												"nodeType": "IfStatement",
												"src": "16207:284:8",
												"trueBody": {
													"id": 1878,
													"nodeType": "Block",
													"src": "16226:265:8",
													"statements": [
														{
															"assignments": [
																1852
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1852,
																	"mutability": "mutable",
																	"name": "isApprovedOrOwner",
																	"nameLocation": "16245:17:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1878,
																	"src": "16240:22:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1851,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "16240:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1871,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1869,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"id": 1856,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 1853,
																						"name": "_msgSender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 467,
																						"src": "16266:10:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																							"typeString": "function () view returns (address)"
																						}
																					},
																					"id": 1854,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "16266:12:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"id": 1855,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1846,
																					"src": "16282:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"src": "16266:20:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"arguments": [
																					{
																						"id": 1858,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1846,
																						"src": "16323:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [],
																						"expression": {
																							"argumentTypes": [],
																							"id": 1859,
																							"name": "_msgSender",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 467,
																							"src": "16329:10:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																								"typeString": "function () view returns (address)"
																							}
																						},
																						"id": 1860,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "16329:12:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1857,
																					"name": "isApprovedForAll",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1255,
																					"src": "16306:16:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address,address) view returns (bool)"
																					}
																				},
																				"id": 1861,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16306:36:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "16266:76:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"id": 1868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 1864,
																						"name": "tokenId",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1833,
																						"src": "16374:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"id": 1863,
																					"name": "getApproved",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1203,
																					"src": "16362:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																						"typeString": "function (uint256) view returns (address)"
																					}
																				},
																				"id": 1865,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16362:20:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 1866,
																					"name": "_msgSender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 467,
																					"src": "16386:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 1867,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16386:12:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "16362:36:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "16266:132:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1870,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "16265:134:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16240:159:8"
														},
														{
															"condition": {
																"id": 1873,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "16418:18:8",
																"subExpression": {
																	"id": 1872,
																	"name": "isApprovedOrOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1852,
																	"src": "16419:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1877,
															"nodeType": "IfStatement",
															"src": "16414:66:8",
															"trueBody": {
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1874,
																		"name": "TransferCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2153,
																		"src": "16445:33:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16445:35:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1876,
																"nodeType": "RevertStatement",
																"src": "16438:42:8"
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1881,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "16523:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16537:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1883,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16529:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1882,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16529:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16529:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1886,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "16541:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 1887,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16550:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1880,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2103,
														"src": "16501:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16501:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1889,
												"nodeType": "ExpressionStatement",
												"src": "16501:51:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16631:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16623:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1891,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16623:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1894,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16623:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1895,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "16635:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1896,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "16644:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1890,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2035,
														"src": "16614:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16614:35:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1898,
												"nodeType": "ExpressionStatement",
												"src": "16614:35:8"
											},
											{
												"id": 1987,
												"nodeType": "UncheckedBlock",
												"src": "16915:1190:8",
												"statements": [
													{
														"assignments": [
															1901
														],
														"declarations": [
															{
																"constant": false,
																"id": 1901,
																"mutability": "mutable",
																"name": "addressData",
																"nameLocation": "16959:11:8",
																"nodeType": "VariableDeclaration",
																"scope": 1987,
																"src": "16939:31:8",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2181_storage_ptr",
																	"typeString": "struct IERC721A.AddressData"
																},
																"typeName": {
																	"id": 1900,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1899,
																		"name": "AddressData",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2181,
																		"src": "16939:11:8"
																	},
																	"referencedDeclaration": 2181,
																	"src": "16939:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage_ptr",
																		"typeString": "struct IERC721A.AddressData"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1905,
														"initialValue": {
															"baseExpression": {
																"id": 1902,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "16973:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2181_storage_$",
																	"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																}
															},
															"id": 1904,
															"indexExpression": {
																"id": 1903,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "16986:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "16973:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2181_storage",
																"typeString": "struct IERC721A.AddressData storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "16939:52:8"
													},
													{
														"expression": {
															"id": 1910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1906,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1901,
																	"src": "17005:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage_ptr",
																		"typeString": "struct IERC721A.AddressData storage pointer"
																	}
																},
																"id": 1908,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "17005:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1909,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17028:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17005:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1911,
														"nodeType": "ExpressionStatement",
														"src": "17005:24:8"
													},
													{
														"expression": {
															"id": 1916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1912,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1901,
																	"src": "17043:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2181_storage_ptr",
																		"typeString": "struct IERC721A.AddressData storage pointer"
																	}
																},
																"id": 1914,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberBurned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2178,
																"src": "17043:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1915,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17071:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17043:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1917,
														"nodeType": "ExpressionStatement",
														"src": "17043:29:8"
													},
													{
														"assignments": [
															1920
														],
														"declarations": [
															{
																"constant": false,
																"id": 1920,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "17191:8:8",
																"nodeType": "VariableDeclaration",
																"scope": 1987,
																"src": "17168:31:8",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1919,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1918,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2172,
																		"src": "17168:14:8"
																	},
																	"referencedDeclaration": 2172,
																	"src": "17168:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1924,
														"initialValue": {
															"baseExpression": {
																"id": 1921,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 776,
																"src": "17202:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1923,
															"indexExpression": {
																"id": 1922,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "17214:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17202:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17168:54:8"
													},
													{
														"expression": {
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1925,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1920,
																	"src": "17236:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1927,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "17236:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1928,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "17252:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "17236:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1930,
														"nodeType": "ExpressionStatement",
														"src": "17236:20:8"
													},
													{
														"expression": {
															"id": 1939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1931,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1920,
																	"src": "17270:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1933,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2169,
																"src": "17270:23:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1936,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "17303:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1937,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "17303:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17296:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1934,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "17296:6:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1938,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17296:23:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "17270:49:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1940,
														"nodeType": "ExpressionStatement",
														"src": "17270:49:8"
													},
													{
														"expression": {
															"id": 1945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1941,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1920,
																	"src": "17333:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1943,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "burned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2171,
																"src": "17333:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"hexValue": "74727565",
																"id": 1944,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17351:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "17333:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1946,
														"nodeType": "ExpressionStatement",
														"src": "17333:22:8"
													},
													{
														"assignments": [
															1948
														],
														"declarations": [
															{
																"constant": false,
																"id": 1948,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "17607:11:8",
																"nodeType": "VariableDeclaration",
																"scope": 1987,
																"src": "17599:19:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1947,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "17599:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1952,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1951,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1949,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "17621:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1950,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17631:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17621:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17599:33:8"
													},
													{
														"assignments": [
															1955
														],
														"declarations": [
															{
																"constant": false,
																"id": 1955,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "17669:8:8",
																"nodeType": "VariableDeclaration",
																"scope": 1987,
																"src": "17646:31:8",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 1954,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 1953,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2172,
																		"src": "17646:14:8"
																	},
																	"referencedDeclaration": 2172,
																	"src": "17646:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1959,
														"initialValue": {
															"baseExpression": {
																"id": 1956,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 776,
																"src": "17680:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2172_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 1958,
															"indexExpression": {
																"id": 1957,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1948,
																"src": "17692:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17680:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17646:58:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1966,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1960,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1955,
																	"src": "17722:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 1961,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2167,
																"src": "17722:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1964,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "17747:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17739:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1962,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "17739:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1965,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17739:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "17722:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1986,
														"nodeType": "IfStatement",
														"src": "17718:377:8",
														"trueBody": {
															"id": 1985,
															"nodeType": "Block",
															"src": "17751:344:8",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1967,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1948,
																			"src": "17914:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1968,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 762,
																			"src": "17929:13:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "17914:28:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1984,
																	"nodeType": "IfStatement",
																	"src": "17910:171:8",
																	"trueBody": {
																		"id": 1983,
																		"nodeType": "Block",
																		"src": "17944:137:8",
																		"statements": [
																			{
																				"expression": {
																					"id": 1974,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 1970,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1955,
																							"src": "17966:8:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 1972,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2167,
																						"src": "17966:13:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 1973,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1846,
																						"src": "17982:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "17966:20:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 1975,
																				"nodeType": "ExpressionStatement",
																				"src": "17966:20:8"
																			},
																			{
																				"expression": {
																					"id": 1981,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 1976,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1955,
																							"src": "18008:8:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 1978,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2169,
																						"src": "18008:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 1979,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1840,
																							"src": "18034:13:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2172_memory_ptr",
																								"typeString": "struct IERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 1980,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2169,
																						"src": "18034:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "18008:54:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 1982,
																				"nodeType": "ExpressionStatement",
																				"src": "18008:54:8"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1989,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "18129:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18143:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1991,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18135:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1990,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18135:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18135:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1994,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "18147:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1988,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "18120:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18120:35:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1996,
												"nodeType": "EmitStatement",
												"src": "18115:40:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1998,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "18186:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18200:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18192:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1999,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18192:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18192:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2003,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "18204:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2004,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18213:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 1997,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2116,
														"src": "18165:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18165:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2006,
												"nodeType": "ExpressionStatement",
												"src": "18165:50:8"
											},
											{
												"id": 2010,
												"nodeType": "UncheckedBlock",
												"src": "18314:49:8",
												"statements": [
													{
														"expression": {
															"id": 2008,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "18338:14:8",
															"subExpression": {
																"id": 2007,
																"name": "_burnCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 764,
																"src": "18338:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2009,
														"nodeType": "ExpressionStatement",
														"src": "18338:14:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1831,
										"nodeType": "StructuredDocumentation",
										"src": "15803:206:8",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 2012,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16023:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1833,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16037:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2012,
												"src": "16029:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16029:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "approvalCheck",
												"nameLocation": "16051:13:8",
												"nodeType": "VariableDeclaration",
												"scope": 2012,
												"src": "16046:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1834,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16046:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16028:37:8"
									},
									"returnParameters": {
										"id": 1837,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16083:0:8"
									},
									"scope": 2117,
									"src": "16014:2355:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2034,
										"nodeType": "Block",
										"src": "18580:89:8",
										"statements": [
											{
												"expression": {
													"id": 2026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2022,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "18590:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2024,
														"indexExpression": {
															"id": 2023,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2017,
															"src": "18606:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18590:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2025,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2015,
														"src": "18617:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "18590:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2027,
												"nodeType": "ExpressionStatement",
												"src": "18590:29:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2029,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2019,
															"src": "18643:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2030,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2015,
															"src": "18650:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2031,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2017,
															"src": "18654:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2028,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "18634:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18634:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2033,
												"nodeType": "EmitStatement",
												"src": "18629:33:8"
											}
										]
									},
									"documentation": {
										"id": 2013,
										"nodeType": "StructuredDocumentation",
										"src": "18375:100:8",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
									},
									"id": 2035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "18489:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18515:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2035,
												"src": "18507:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2014,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18507:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2017,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "18535:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2035,
												"src": "18527:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18527:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "18560:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2035,
												"src": "18552:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18552:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18497:74:8"
									},
									"returnParameters": {
										"id": 2021,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18580:0:8"
									},
									"scope": 2117,
									"src": "18480:189:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2089,
										"nodeType": "Block",
										"src": "19314:486:8",
										"statements": [
											{
												"clauses": [
													{
														"block": {
															"id": 2070,
															"nodeType": "Block",
															"src": "19425:87:8",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		},
																		"id": 2068,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2062,
																			"name": "retval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2060,
																			"src": "19446:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 2064,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2040,
																							"src": "19472:2:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2063,
																						"name": "IERC721Receiver",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 133,
																						"src": "19456:15:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																							"typeString": "type(contract IERC721Receiver)"
																						}
																					},
																					"id": 2065,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "19456:19:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC721Receiver_$133",
																						"typeString": "contract IERC721Receiver"
																					}
																				},
																				"id": 2066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "onERC721Received",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 132,
																				"src": "19456:36:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																					"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																				}
																			},
																			"id": 2067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "19456:45:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"src": "19446:55:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"functionReturnParameters": 2048,
																	"id": 2069,
																	"nodeType": "Return",
																	"src": "19439:62:8"
																}
															]
														},
														"errorName": "",
														"id": 2071,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2061,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2060,
																	"mutability": "mutable",
																	"name": "retval",
																	"nameLocation": "19417:6:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 2071,
																	"src": "19410:13:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	"typeName": {
																		"id": 2059,
																		"name": "bytes4",
																		"nodeType": "ElementaryTypeName",
																		"src": "19410:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19409:15:8"
														},
														"src": "19401:111:8"
													},
													{
														"block": {
															"id": 2086,
															"nodeType": "Block",
															"src": "19541:253:8",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2075,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2073,
																				"src": "19559:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2076,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "19559:13:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "19576:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "19559:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"id": 2084,
																		"nodeType": "Block",
																		"src": "19665:119:8",
																		"statements": [
																			{
																				"AST": {
																					"nodeType": "YulBlock",
																					"src": "19692:78:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"kind": "number",
																												"nodeType": "YulLiteral",
																												"src": "19725:2:8",
																												"type": "",
																												"value": "32"
																											},
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "19729:6:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "19721:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "19721:15:8"
																									},
																									{
																										"arguments": [
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "19744:6:8"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "19738:5:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "19738:13:8"
																									}
																								],
																								"functionName": {
																									"name": "revert",
																									"nodeType": "YulIdentifier",
																									"src": "19714:6:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "19714:38:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "19714:38:8"
																						}
																					]
																				},
																				"evmVersion": "london",
																				"externalReferences": [
																					{
																						"declaration": 2073,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "19729:6:8",
																						"valueSize": 1
																					},
																					{
																						"declaration": 2073,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "19744:6:8",
																						"valueSize": 1
																					}
																				],
																				"id": 2083,
																				"nodeType": "InlineAssembly",
																				"src": "19683:87:8"
																			}
																		]
																	},
																	"id": 2085,
																	"nodeType": "IfStatement",
																	"src": "19555:229:8",
																	"trueBody": {
																		"id": 2082,
																		"nodeType": "Block",
																		"src": "19579:80:8",
																		"statements": [
																			{
																				"errorCall": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2079,
																						"name": "TransferToNonERC721ReceiverImplementer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2159,
																						"src": "19604:38:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_error_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2080,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "19604:40:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2081,
																				"nodeType": "RevertStatement",
																				"src": "19597:47:8"
																			}
																		]
																	}
																}
															]
														},
														"errorName": "",
														"id": 2087,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2074,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2073,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "19533:6:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 2087,
																	"src": "19520:19:8",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2072,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "19520:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19519:21:8"
														},
														"src": "19513:281:8"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2053,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "19365:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19365:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2055,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2038,
															"src": "19379:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2056,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2042,
															"src": "19385:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2057,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2044,
															"src": "19394:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2050,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2040,
																	"src": "19344:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2049,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "19328:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 2051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19328:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$133",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 2052,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 132,
														"src": "19328:36:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 2058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19328:72:8",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"id": 2088,
												"nodeType": "TryStatement",
												"src": "19324:470:8"
											}
										]
									},
									"documentation": {
										"id": 2036,
										"nodeType": "StructuredDocumentation",
										"src": "18675:470:8",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 2090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkContractOnERC721Received",
									"nameLocation": "19159:30:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "19207:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2090,
												"src": "19199:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19199:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "19229:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2090,
												"src": "19221:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2039,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19221:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19249:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2090,
												"src": "19241:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19241:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19279:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2090,
												"src": "19266:18:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2043,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19266:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19189:101:8"
									},
									"returnParameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2090,
												"src": "19308:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2046,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19308:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19307:6:8"
									},
									"scope": 2117,
									"src": "19150:650:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2102,
										"nodeType": "Block",
										"src": "20583:2:8",
										"statements": []
									},
									"documentation": {
										"id": 2091,
										"nodeType": "StructuredDocumentation",
										"src": "19806:620:8",
										"text": " @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n And also called before burning one token.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfers",
									"nameLocation": "20440:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2093,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "20479:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "20471:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2092,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20471:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2095,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "20501:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "20493:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20493:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "20521:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "20513:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20513:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "20551:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "20543:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20543:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20461:104:8"
									},
									"returnParameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20583:0:8"
									},
									"scope": 2117,
									"src": "20431:154:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2115,
										"nodeType": "Block",
										"src": "21377:2:8",
										"statements": []
									},
									"documentation": {
										"id": 2104,
										"nodeType": "StructuredDocumentation",
										"src": "20591:630:8",
										"text": " @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n minting.\n And also called after one token has been burned.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfers",
									"nameLocation": "21235:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "21273:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "21265:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21265:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "21295:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "21287:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21287:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2110,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21315:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "21307:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21307:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "21345:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "21337:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21337:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21255:104:8"
									},
									"returnParameters": {
										"id": 2114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21377:0:8"
									},
									"scope": 2117,
									"src": "21226:153:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2118,
							"src": "891:20490:8",
							"usedErrors": [
								2129,
								2132,
								2135,
								2138,
								2141,
								2144,
								2147,
								2150,
								2153,
								2156,
								2159,
								2162,
								2165
							]
						}
					],
					"src": "61:21320:8"
				},
				"id": 8
			},
			"contracts/IERC721A.sol": {
				"ast": {
					"absolutePath": "contracts/IERC721A.sol",
					"exportedSymbols": {
						"IERC165": [
							739
						],
						"IERC721": [
							115
						],
						"IERC721A": [
							2188
						],
						"IERC721Metadata": [
							160
						]
					},
					"id": 2189,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2119,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "84:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 2120,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2189,
							"sourceUnit": 116,
							"src": "109:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 2121,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2189,
							"sourceUnit": 161,
							"src": "168:77:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2123,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "329:7:9"
									},
									"id": 2124,
									"nodeType": "InheritanceSpecifier",
									"src": "329:7:9"
								},
								{
									"baseName": {
										"id": 2125,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 160,
										"src": "338:15:9"
									},
									"id": 2126,
									"nodeType": "InheritanceSpecifier",
									"src": "338:15:9"
								}
							],
							"canonicalName": "IERC721A",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2122,
								"nodeType": "StructuredDocumentation",
								"src": "247:59:9",
								"text": " @dev Interface of an ERC721A compliant contract."
							},
							"fullyImplemented": false,
							"id": 2188,
							"linearizedBaseContracts": [
								2188,
								160,
								115,
								739
							],
							"name": "IERC721A",
							"nameLocation": "317:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2127,
										"nodeType": "StructuredDocumentation",
										"src": "360:76:9",
										"text": " The caller must own the token or be an approved operator."
									},
									"id": 2129,
									"name": "ApprovalCallerNotOwnerNorApproved",
									"nameLocation": "447:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "480:2:9"
									},
									"src": "441:42:9"
								},
								{
									"documentation": {
										"id": 2130,
										"nodeType": "StructuredDocumentation",
										"src": "489:44:9",
										"text": " The token does not exist."
									},
									"id": 2132,
									"name": "ApprovalQueryForNonexistentToken",
									"nameLocation": "544:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "576:2:9"
									},
									"src": "538:41:9"
								},
								{
									"documentation": {
										"id": 2133,
										"nodeType": "StructuredDocumentation",
										"src": "585:66:9",
										"text": " The caller cannot approve to their own address."
									},
									"id": 2135,
									"name": "ApproveToCaller",
									"nameLocation": "662:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "677:2:9"
									},
									"src": "656:24:9"
								},
								{
									"documentation": {
										"id": 2136,
										"nodeType": "StructuredDocumentation",
										"src": "686:66:9",
										"text": " The caller cannot approve to the current owner."
									},
									"id": 2138,
									"name": "ApprovalToCurrentOwner",
									"nameLocation": "763:22:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "785:2:9"
									},
									"src": "757:31:9"
								},
								{
									"documentation": {
										"id": 2139,
										"nodeType": "StructuredDocumentation",
										"src": "794:65:9",
										"text": " Cannot query the balance for the zero address."
									},
									"id": 2141,
									"name": "BalanceQueryForZeroAddress",
									"nameLocation": "870:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "896:2:9"
									},
									"src": "864:35:9"
								},
								{
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "905:51:9",
										"text": " Cannot mint to the zero address."
									},
									"id": 2144,
									"name": "MintToZeroAddress",
									"nameLocation": "967:17:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "984:2:9"
									},
									"src": "961:26:9"
								},
								{
									"documentation": {
										"id": 2145,
										"nodeType": "StructuredDocumentation",
										"src": "993:72:9",
										"text": " The quantity of tokens minted must be more than zero."
									},
									"id": 2147,
									"name": "MintZeroQuantity",
									"nameLocation": "1076:16:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1092:2:9"
									},
									"src": "1070:25:9"
								},
								{
									"documentation": {
										"id": 2148,
										"nodeType": "StructuredDocumentation",
										"src": "1101:44:9",
										"text": " The token does not exist."
									},
									"id": 2150,
									"name": "OwnerQueryForNonexistentToken",
									"nameLocation": "1156:29:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:2:9"
									},
									"src": "1150:38:9"
								},
								{
									"documentation": {
										"id": 2151,
										"nodeType": "StructuredDocumentation",
										"src": "1194:76:9",
										"text": " The caller must own the token or be an approved operator."
									},
									"id": 2153,
									"name": "TransferCallerNotOwnerNorApproved",
									"nameLocation": "1281:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:2:9"
									},
									"src": "1275:42:9"
								},
								{
									"documentation": {
										"id": 2154,
										"nodeType": "StructuredDocumentation",
										"src": "1323:53:9",
										"text": " The token must be owned by `from`."
									},
									"id": 2156,
									"name": "TransferFromIncorrectOwner",
									"nameLocation": "1387:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1413:2:9"
									},
									"src": "1381:35:9"
								},
								{
									"documentation": {
										"id": 2157,
										"nodeType": "StructuredDocumentation",
										"src": "1422:109:9",
										"text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
									},
									"id": 2159,
									"name": "TransferToNonERC721ReceiverImplementer",
									"nameLocation": "1542:38:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1580:2:9"
									},
									"src": "1536:47:9"
								},
								{
									"documentation": {
										"id": 2160,
										"nodeType": "StructuredDocumentation",
										"src": "1589:55:9",
										"text": " Cannot transfer to the zero address."
									},
									"id": 2162,
									"name": "TransferToZeroAddress",
									"nameLocation": "1655:21:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1676:2:9"
									},
									"src": "1649:30:9"
								},
								{
									"documentation": {
										"id": 2163,
										"nodeType": "StructuredDocumentation",
										"src": "1685:44:9",
										"text": " The token does not exist."
									},
									"id": 2165,
									"name": "URIQueryForNonexistentToken",
									"nameLocation": "1740:27:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1767:2:9"
									},
									"src": "1734:36:9"
								},
								{
									"canonicalName": "IERC721A.TokenOwnership",
									"id": 2172,
									"members": [
										{
											"constant": false,
											"id": 2167,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1911:4:9",
											"nodeType": "VariableDeclaration",
											"scope": 2172,
											"src": "1903:12:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2166,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1903:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2169,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "2024:14:9",
											"nodeType": "VariableDeclaration",
											"scope": 2172,
											"src": "2017:21:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2168,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2017:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2171,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "2099:6:9",
											"nodeType": "VariableDeclaration",
											"scope": 2172,
											"src": "2094:11:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2170,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2094:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1841:14:9",
									"nodeType": "StructDefinition",
									"scope": 2188,
									"src": "1834:278:9",
									"visibility": "public"
								},
								{
									"canonicalName": "IERC721A.AddressData",
									"id": 2181,
									"members": [
										{
											"constant": false,
											"id": 2174,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "2267:7:9",
											"nodeType": "VariableDeclaration",
											"scope": 2181,
											"src": "2260:14:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2173,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2260:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2176,
											"mutability": "mutable",
											"name": "numberMinted",
											"nameLocation": "2366:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 2181,
											"src": "2359:19:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2175,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2359:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2178,
											"mutability": "mutable",
											"name": "numberBurned",
											"nameLocation": "2470:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 2181,
											"src": "2463:19:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2177,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2463:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2180,
											"mutability": "mutable",
											"name": "aux",
											"nameLocation": "2697:3:9",
											"nodeType": "VariableDeclaration",
											"scope": 2181,
											"src": "2690:10:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2179,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2690:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressData",
									"nameLocation": "2183:11:9",
									"nodeType": "StructDefinition",
									"scope": 2188,
									"src": "2176:531:9",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2182,
										"nodeType": "StructuredDocumentation",
										"src": "2713:194:9",
										"text": " @dev Returns the total amount of tokens stored by the contract.\n \n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 2187,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2921:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2932:2:9"
									},
									"returnParameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2187,
												"src": "2958:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2958:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2957:9:9"
									},
									"scope": 2188,
									"src": "2912:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2189,
							"src": "307:2662:9",
							"usedErrors": [
								2129,
								2132,
								2135,
								2138,
								2141,
								2144,
								2147,
								2150,
								2153,
								2156,
								2159,
								2162,
								2165
							]
						}
					],
					"src": "84:2885:9"
				},
				"id": 9
			}
		}
	}
}